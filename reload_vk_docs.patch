Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.name	(revision )
+++ .idea/.name	(revision )
@@ -0,0 +1,1 @@
+vkDocs-master
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKImageOperation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKImageOperation.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKImageOperation.java	(revision )
@@ -0,0 +1,82 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.httpClient;
+
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.os.Handler;
+import android.os.Looper;
+
+public class VKImageOperation extends VKHttpOperation<Bitmap> {
+
+    public float imageDensity;
+
+    /**
+     * Create new operation for loading prepared Http request.
+     *
+     * @param imageUrl URL for image
+     */
+    public VKImageOperation(String imageUrl) {
+        super(new VKHttpClient.VKHTTPRequest(imageUrl));
+    }
+
+    @Override
+    public Bitmap getResultObject() {
+        byte[] response = getResponseData();
+        Bitmap image = BitmapFactory.decodeByteArray(response, 0, response.length);
+        if (imageDensity > 0) {
+            image = Bitmap.createScaledBitmap(image, (int) (image.getWidth() * imageDensity), (int) (image.getHeight() * imageDensity), true);
+        }
+        return image;
+
+    }
+
+    /**
+     * Set listener for current operation
+     *
+     * @param listener Listener subclasses VKHTTPOperationCompleteListener
+     */
+    public void setImageOperationListener(final VKImageOperationListener listener) {
+        this.setCompleteListener(new VKOperationCompleteListener() {
+            @Override
+            public void onComplete() {
+                if (VKImageOperation.this.state() != VKOperationState.Finished || mLastException != null) {
+                    listener.onError(VKImageOperation.this, generateError(mLastException));
+                } else {
+                    final Bitmap result = getResultObject();
+                    new Handler(Looper.getMainLooper()).post(new Runnable() {
+                        @Override
+                        public void run() {
+                            listener.onComplete(VKImageOperation.this, result);
+                        }
+                    });
+                }
+            }
+        });
+    }
+
+    /**
+     * Class representing operation listener for VKHttpOperation
+     */
+    public static abstract class VKImageOperationListener extends VKAbstractCompleteListener<VKImageOperation, Bitmap> {
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKCommentArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKCommentArray.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKCommentArray.java	(revision )
@@ -0,0 +1,37 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Array of VKComment
+ * Created by alex_xpert on 29.01.14.
+ */
+public class VKCommentArray extends VKList<VKApiComment> {
+    @Override
+    public VKApiModel parse(JSONObject response) throws JSONException {
+        fill(response, VKApiComment.class);
+        return this;
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/VKResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/VKResponse.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/VKResponse.java	(revision )
@@ -0,0 +1,46 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api;
+
+import org.json.JSONObject;
+
+/**
+ * Class presenting answer from API
+ */
+public class VKResponse {
+    /**
+     * Request which caused response
+     */
+    public VKRequest request;
+    /**
+     * Json content of response. Can be array or object.
+     */
+    public JSONObject json;
+	/**
+	 * String response from API
+	 */
+	public String responseString;
+    /**
+     * Model parsed from response
+     */
+    public Object parsedModel;
+}
Index: vksdk_library/src/main/.settings/org.eclipse.jdt.core.prefs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/.settings/org.eclipse.jdt.core.prefs	(revision )
+++ vksdk_library/src/main/.settings/org.eclipse.jdt.core.prefs	(revision )
@@ -0,0 +1,4 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
+org.eclipse.jdt.core.compiler.compliance=1.6
+org.eclipse.jdt.core.compiler.source=1.6
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Application.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Application.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Application.java	(revision )
@@ -0,0 +1,34 @@
+package com.vkdocs.oceanminded.vkdocs;
+
+/**
+ * Created by josh on 14.01.16.
+ */
+import android.content.Intent;
+import android.widget.Toast;
+
+import com.vk.sdk.VKAccessToken;
+import com.vk.sdk.VKAccessTokenTracker;
+import com.vk.sdk.VKSdk;
+import com.vkdocs.oceanminded.vkdocs.Activitys.LoginActivity;
+
+public class Application extends android.app.Application {
+
+    VKAccessTokenTracker vkAccessTokenTracker = new VKAccessTokenTracker() {
+        @Override
+        public void onVKAccessTokenChanged(VKAccessToken oldToken, VKAccessToken newToken) {
+            if (newToken == null) {
+                Toast.makeText(Application.this, "AccessToken invalidated", Toast.LENGTH_LONG).show();
+                /*Intent intent = new Intent(Application.this, LoginActivity.class);
+                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
+                startActivity(intent);*/
+            }
+        }
+    };
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        vkAccessTokenTracker.startTracking();
+        VKSdk.initialize(this);
+    }
+}
\ No newline at end of file
Index: .idea/copyright/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/copyright/profiles_settings.xml	(revision )
+++ .idea/copyright/profiles_settings.xml	(revision )
@@ -0,0 +1,3 @@
+<component name="CopyrightManager">
+  <settings default="" />
+</component>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/payments/VKPaymentsServerSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/payments/VKPaymentsServerSender.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/payments/VKPaymentsServerSender.java	(revision )
@@ -0,0 +1,335 @@
+//
+//  Copyright (c) 2015 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+
+package com.vk.sdk.payments;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Handler;
+import android.os.HandlerThread;
+import android.preference.PreferenceManager;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.vk.sdk.VKSdk;
+import com.vk.sdk.VKUIHelper;
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.VKResponse;
+
+import org.json.JSONException;
+
+import java.lang.reflect.Method;
+import java.util.HashSet;
+import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
+
+class VKPaymentsServerSender {
+
+    private static final String METHOD_NAME_CHECK_USER_INSTALL = "apps.checkUserInstall";
+    private static final String METHOD_NAME_SAVE_TRANSACTION = "apps.saveTransaction";
+
+    private static final String PLATFORM = "platform";
+    private static final String APP_ID = "app_id";
+    private static final String DEVICE_ID = "device_id";
+    private static final String RECEIPT = "receipt";
+    private static final String FORCE = "force";
+
+    private static final String RESPONSE = "response";
+
+    private static final int CHECK_USER_INSTALL_ANSWER_UNKNOWN = -1;
+    private static final int CHECK_USER_INSTALL_ANSWER_NOT_VK = 0;
+    private static final int CHECK_USER_INSTALL_ANSWER_VK = 1;
+    private static final int CHECK_USER_INSTALL_ANSWER_VK_FORCE = 2;
+
+    private static final String KEY_ANSWER = "VK_SDK_CHECK_USER_INSTALL";
+
+    // ---------- SINGLETON PART ----------
+
+    private static VKPaymentsServerSender sInstance = null;
+
+    public static VKPaymentsServerSender getInstance(@NonNull Context ctx) {
+        if (sInstance == null) {
+            synchronized (VKPaymentsServerSender.class) {
+                if (sInstance == null) {
+                    sInstance = new VKPaymentsServerSender(ctx.getApplicationContext());
+                }
+            }
+        }
+        return sInstance;
+    }
+
+    // ---------- CLASS PART ----------
+
+    @NonNull
+    private final Handler mHandler;
+    @NonNull
+    private final Context mAppCtx;
+
+    private volatile int mCheckUserInstallAnswer = -1;
+
+    private final List<VKPaymentsCallback> mVkPaymentsCallbacks = new CopyOnWriteArrayList<>();
+
+    private VKPaymentsServerSender(@NonNull Context ctx) {
+        mAppCtx = ctx;
+
+        mCheckUserInstallAnswer = restoreAnswer(ctx);
+
+        HandlerThread handlerThread = new HandlerThread(getClass().getName());
+        handlerThread.start();
+        mHandler = new Handler(handlerThread.getLooper());
+
+        // !!! WARNING !!! this for wait reference url from vk client
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    Thread.sleep(1000); // time for wait reference url
+                } catch (Exception e) {
+                    // nothing
+                }
+            }
+        });
+    }
+
+    public void requestUserState(@NonNull VKPaymentsCallback callback) {
+        synchronized (VKPaymentsServerSender.class) {
+            switch (mCheckUserInstallAnswer) {
+                case CHECK_USER_INSTALL_ANSWER_VK:
+                case CHECK_USER_INSTALL_ANSWER_VK_FORCE:
+                    callback.onUserState(true);
+                    break;
+                case CHECK_USER_INSTALL_ANSWER_NOT_VK:
+                    callback.onUserState(false);
+                    break;
+                default:
+                    mVkPaymentsCallbacks.add(callback);
+            }
+        }
+    }
+
+    // ---------- COMMON PART ----------
+
+    private void request(boolean force) {
+        if (force) {
+            onCheckUserInstallReceive(CHECK_USER_INSTALL_ANSWER_VK_FORCE);
+        }
+        if (mCheckUserInstallAnswer == CHECK_USER_INSTALL_ANSWER_UNKNOWN
+                || mCheckUserInstallAnswer == CHECK_USER_INSTALL_ANSWER_VK_FORCE) {
+            mHandler.post(mCheckUserInstallRunnable);
+            requestSaveTransaction();
+        } else if (mCheckUserInstallAnswer == CHECK_USER_INSTALL_ANSWER_VK) {
+            requestSaveTransaction();
+        }
+    }
+
+    private void requestSaveTransaction() {
+        HashSet<String> purchases = VKPaymentsDatabase.getInstance(mAppCtx).getPurchases();
+
+        final Runnable runnableSaveTransaction;
+        if (purchases.size() > 0) {
+            runnableSaveTransaction = new SaveTransactionRunnable(purchases);
+        } else {
+            runnableSaveTransaction = null;
+        }
+        if (runnableSaveTransaction != null) {
+            mHandler.post(runnableSaveTransaction);
+        }
+    }
+
+    public static boolean isNotVkUser() {
+        if (!VKSdk.isIsPaymentsEnable()) {
+            return true;
+        }
+        final Context ctx = VKUIHelper.getApplicationContext();
+        return ctx != null && VKPaymentsServerSender.getInstance(ctx).mCheckUserInstallAnswer == CHECK_USER_INSTALL_ANSWER_NOT_VK;
+    }
+
+    // ---------- SAVE TRANSACTION PART ----------
+
+    public void saveTransaction(final String purchaseInfo) {
+        VKPaymentsDatabase.getInstance(mAppCtx).insertPurchase(purchaseInfo);
+        request(false);
+    }
+
+    class SaveTransactionRunnable implements Runnable {
+        final HashSet<String> purchases;
+
+        private SaveTransactionRunnable(HashSet<String> purchases) {
+            this.purchases = purchases;
+        }
+
+        @Override
+        public void run() {
+            if (mCheckUserInstallAnswer == CHECK_USER_INSTALL_ANSWER_VK
+                    || mCheckUserInstallAnswer == CHECK_USER_INSTALL_ANSWER_VK_FORCE) {
+                for (final String receipt : purchases) {
+
+                    final String platform = "android";
+                    final int appId = getIntResByName(mAppCtx, VKSdk.SDK_APP_ID);
+                    final String deviceId = getDeviceId(mAppCtx);
+
+                    VKRequest request = new VKRequest(METHOD_NAME_SAVE_TRANSACTION);
+                    request.addExtraParameter(PLATFORM, platform);
+                    request.addExtraParameter(APP_ID, appId);
+                    if (!TextUtils.isEmpty(deviceId)) {
+                        request.addExtraParameter(DEVICE_ID, deviceId);
+                    }
+                    request.addExtraParameter(RECEIPT, receipt);
+
+                    request.executeSyncWithListener(new VKRequest.VKRequestListener() {
+                        @Override
+                        public void onComplete(VKResponse response) {
+                            VKPaymentsDatabase.getInstance(mAppCtx).deletePurchase(receipt);
+                            log("apps.saveTransaction successful response=" + response.json);
+                        }
+
+                        @Override
+                        public void onError(VKError error) {
+                            log("apps.saveTransaction error=" + (error.apiError == null ? error.errorMessage : error.apiError.errorMessage));
+                        }
+                    });
+                }
+            }
+        }
+    }
+
+    // ---------- CHECK USER INSTALL PART ----------
+
+    public void checkUserInstall(boolean force) {
+        request(force);
+    }
+
+    private void onCheckUserInstallReceive(int checkUserInstallAnswer) {
+        saveAnswer(mAppCtx, checkUserInstallAnswer);
+        synchronized (VKPaymentsServerSender.class) {
+            for (VKPaymentsCallback callback : mVkPaymentsCallbacks) {
+                switch (mCheckUserInstallAnswer) {
+                    case CHECK_USER_INSTALL_ANSWER_VK:
+                    case CHECK_USER_INSTALL_ANSWER_VK_FORCE:
+                        callback.onUserState(true);
+                        break;
+                    case CHECK_USER_INSTALL_ANSWER_NOT_VK:
+                        callback.onUserState(false);
+                        break;
+                }
+            }
+            mVkPaymentsCallbacks.clear();
+        }
+    }
+
+    Runnable mCheckUserInstallRunnable = new Runnable() {
+
+        @Override
+        public void run() {
+            if (VKSdk.isIsPaymentsEnable() && (mCheckUserInstallAnswer == CHECK_USER_INSTALL_ANSWER_UNKNOWN
+                    || mCheckUserInstallAnswer == CHECK_USER_INSTALL_ANSWER_VK_FORCE)) {
+                final String platform = "android";
+                final int appId = getIntResByName(mAppCtx, VKSdk.SDK_APP_ID);
+                final String deviceId = getDeviceId(mAppCtx);
+
+                VKRequest request = new VKRequest(METHOD_NAME_CHECK_USER_INSTALL);
+                request.addExtraParameter(PLATFORM, platform);
+                request.addExtraParameter(APP_ID, appId);
+                if (mCheckUserInstallAnswer == CHECK_USER_INSTALL_ANSWER_VK_FORCE) {
+                    request.addExtraParameter(FORCE, 1);
+                }
+                if (!TextUtils.isEmpty(deviceId)) {
+                    request.addExtraParameter(DEVICE_ID, deviceId);
+                }
+
+                request.executeSyncWithListener(new VKRequest.VKRequestListener() {
+                    @Override
+                    public void onComplete(VKResponse response) {
+                        try {
+                            onCheckUserInstallReceive(response.json.getInt(RESPONSE));
+                            log("apps.checkUserInstall successful response=" + response.json);
+                        } catch (JSONException e) {
+                            log("error", e);
+                        }
+                    }
+                });
+            }
+        }
+    };
+
+    // ---------- UTILS PART ----------
+
+    private static void log(String s) {
+        if (VKSdk.DEBUG) {
+            if (!TextUtils.isEmpty(s)) {
+                Log.e("vk", s);
+            }
+        }
+    }
+
+    private static void log(String s, Exception e) {
+        if (VKSdk.DEBUG) {
+            if (!TextUtils.isEmpty(s)) {
+                Log.e("vk", s, e);
+            }
+        }
+    }
+
+    private void saveAnswer(Context ctx, int value) {
+        synchronized (VKPaymentsServerSender.class) {
+            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctx.getApplicationContext());
+            prefs.edit().putInt(KEY_ANSWER, value).apply();
+
+            mCheckUserInstallAnswer = value;
+        }
+    }
+
+    private int restoreAnswer(Context ctx) {
+        synchronized (VKPaymentsServerSender.class) {
+            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctx.getApplicationContext());
+            return prefs.getInt(KEY_ANSWER, CHECK_USER_INSTALL_ANSWER_UNKNOWN);
+        }
+    }
+
+    private static Integer getIntResByName(Context ctx, String aString) {
+        int resId = ctx.getResources().getIdentifier(aString, "integer", ctx.getPackageName());
+        try {
+            return ctx.getResources().getInteger(resId);
+        } catch (Exception e) {
+            return 0;
+        }
+    }
+
+    @Nullable
+    private static String getDeviceId(Context ctx) {
+        try {
+            Class<?> advertisingIdClientClass = Class.forName("com.google.android.gms.ads.identifier.AdvertisingIdClient");
+            Class<?> advertisingIdClientClassInfo = Class.forName("com.google.android.gms.ads.identifier.AdvertisingIdClient$Info");
+            Method methodGetInfo = advertisingIdClientClass.getDeclaredMethod("getAdvertisingIdInfo", Context.class);
+            Method methodGetId = advertisingIdClientClassInfo.getMethod("getId");
+
+            Object info = methodGetInfo.invoke(advertisingIdClientClass, ctx);
+            return (String) methodGetId.invoke(info);
+        } catch (Exception e) {
+            Log.e("vk", "error", e);
+            return null;
+        }
+    }
+}
\ No newline at end of file
Index: app/src/release/res/values/google_maps_api.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/release/res/values/google_maps_api.xml	(revision )
+++ app/src/release/res/values/google_maps_api.xml	(revision )
@@ -0,0 +1,22 @@
+<resources>
+    <!--
+    TODO: Before you release your application, you need a Google Maps API key.
+
+    To do this, you can either add your release key credentials to your existing
+    key, or create a new key.
+
+    Note that this file specifies the API key for the release build target.
+    If you have previously set up a key for the debug target with the debug signing certificate,
+    you will also need to set up a key for your release certificate.
+
+    Follow the directions here:
+
+    https://developers.google.com/maps/documentation/android/signup
+
+    Once you have your key (it starts with "AIza"), replace the "google_maps_key"
+    string in this file.
+    -->
+    <string name="google_maps_key" templateMergeStrategy="preserve" translatable="false">
+        YOUR_KEY_HERE
+    </string>
+</resources>
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Activitys/LoginActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Activitys/LoginActivity.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Activitys/LoginActivity.java	(revision )
@@ -0,0 +1,88 @@
+package com.vkdocs.oceanminded.vkdocs.Activitys;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+
+import com.vk.sdk.VKAccessToken;
+import com.vk.sdk.VKCallback;
+import com.vk.sdk.VKScope;
+import com.vk.sdk.VKSdk;
+import com.vk.sdk.api.VKError;
+import com.vkdocs.oceanminded.vkdocs.R;
+
+public class LoginActivity extends AppCompatActivity {
+    private Button vkauth;
+    private static final String[] sMyScope = new String[]{
+            VKScope.FRIENDS,
+            VKScope.WALL,
+            VKScope.PHOTOS,
+            VKScope.NOHTTPS,
+            VKScope.MESSAGES,
+            VKScope.DOCS
+    };
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        VKSdk.wakeUpSession(this, new VKCallback<VKSdk.LoginState>() {
+            @Override
+            public void onResult(VKSdk.LoginState res) {
+                switch (res) {
+                    case LoggedOut:
+
+                        VKSdk.login(LoginActivity.this, sMyScope);
+                        break;
+                    case LoggedIn:
+                        userLoggedIn();
+                        break;
+                    case Pending:
+                        break;
+                    case Unknown:
+                        break;
+                }
+            }
+            @Override
+            public void onError(VKError error) {
+                Log.e("error","Error Login "+error.toString());
+            }
+        });
+        //setContentView(R.layout.activity_login);
+
+    }
+
+
+    private void userLoggedIn()
+    {
+        Intent openMainActivity = new Intent(this,MainActivity.class);
+        startActivity(openMainActivity);
+        finish();
+    }
+    public void onClick(View view)
+    {
+        VKSdk.login(LoginActivity.this, sMyScope);
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        VKCallback<VKAccessToken> callback = new VKCallback<VKAccessToken>() {
+            @Override
+            public void onResult(VKAccessToken res) {
+                //VKSdk.login(LoginActivity.this, sMyScope);
+                userLoggedIn();
+            }
+
+            @Override
+            public void onError(VKError error) {
+                // User didn't pass Authorization
+            }
+        };
+
+        if (!VKSdk.onActivityResult(requestCode, resultCode, data, callback)) {
+            super.onActivityResult(requestCode, resultCode, data);
+        }
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/VKAccessTokenTracker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/VKAccessTokenTracker.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/VKAccessTokenTracker.java	(revision )
@@ -0,0 +1,67 @@
+//
+//  Copyright (c) 2015 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk;
+
+import android.support.annotation.Nullable;
+
+/**
+ * Use this class for track access token changes.
+ * <p/>
+ * See example usage:
+ * <pre>
+ * <code>VKAccessTokenTracker vkAccessTokenTracker = new VKAccessTokenTracker() {
+ *  &#064;Override
+ *   public void onVKAccessTokenChanged(VKAccessToken oldToken, VKAccessToken newToken) {
+ *       if (newToken == null) {
+ *           Toast.makeText(Application.this, "AccessToken invalidated", Toast.LENGTH_LONG).show();
+ *       }
+ *   }
+ * };
+ * </code>
+ * </pre>
+ */
+public abstract class VKAccessTokenTracker {
+
+    private boolean isTracking = false;
+
+    /**
+     * This method will be call only from main thread
+     *
+     * @param oldToken Token before changes
+     * @param newToken Actual token after changes
+     */
+    public abstract void onVKAccessTokenChanged(@Nullable VKAccessToken oldToken, @Nullable VKAccessToken newToken);
+
+    public boolean isTracking() {
+        return isTracking;
+    }
+
+    public void startTracking() {
+        VKSdk.addVKTokenTracker(this);
+        isTracking = true;
+    }
+
+    public void stopTracking() {
+        VKSdk.removeVKTokenTracker(this);
+        isTracking = false;
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/VKServiceActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/VKServiceActivity.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/VKServiceActivity.java	(revision )
@@ -0,0 +1,243 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.dialogs.VKCaptchaDialog;
+import com.vk.sdk.dialogs.VKOpenAuthDialog;
+import com.vk.sdk.util.VKStringJoiner;
+import com.vk.sdk.util.VKUtil;
+
+import java.util.ArrayList;
+
+/**
+ * Special activity for VK events, such as login, captcha and validation
+ */
+public class VKServiceActivity extends Activity implements DialogInterface.OnDismissListener {
+
+    /**
+     * Defines true VK application fingerprint
+     */
+    private static final String VK_APP_FINGERPRINT = "48761EEF50EE53AFC4CC9C5F10E6BDE7F8F5B82F";
+    private static final String VK_APP_PACKAGE_ID = "com.vkontakte.android";
+    private static final String VK_APP_AUTH_ACTION = "com.vkontakte.android.action.SDK_AUTH";
+
+    private static final String KEY_TYPE = "arg1";
+    private static final String KEY_SCOPE_LIST = "arg2";
+    private static final String KEY_REQUEST = "arg3";
+    private static final String KEY_SDK_CUSTOM_INITIALIZE = "arg4";
+
+    // ---------- PUBLIC STATIC METHODS ----------
+
+    public enum VKServiceType {
+        Authorization(10485),
+        Captcha(14079),
+        Validation(11477);
+
+        private int outerCode;
+
+        VKServiceType(int outerCode) {
+            this.outerCode = outerCode;
+        }
+
+        public int getOuterCode() {
+            return outerCode;
+        }
+    }
+
+    public static void interruptWithError(Context ctx, VKError apiError, VKServiceType type) {
+        Intent intent = createIntent(ctx, type);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        intent.putExtra(KEY_REQUEST, apiError.registerObject());
+        if (ctx != null) {
+            ctx.startActivity(intent);
+        }
+    }
+
+    // ---------- PACKAGE METHODS ----------
+
+    /**
+     * Starts login process with fragment
+     * @param act       current running activity
+     * @param scopeList authorization
+     */
+    static void startLoginActivity(@NonNull Activity act, @NonNull ArrayList<String> scopeList) {
+        Intent intent = createIntent(act.getApplicationContext(), VKServiceType.Authorization);
+        intent.putStringArrayListExtra(KEY_SCOPE_LIST, scopeList);
+        act.startActivityForResult(intent, VKServiceType.Authorization.getOuterCode());
+    }
+
+    /**
+     * Starts login process with fragment
+     * warning: this method is available on SDK after honeycomb
+     *
+     * @param fr        current running fragment
+     * @param scopeList authorization
+     */
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
+    static void startLoginActivity(@NonNull Fragment fr, ArrayList<String> scopeList) {
+        Intent intent = createIntent(fr.getActivity().getApplication(), VKServiceType.Authorization);
+        intent.putStringArrayListExtra(KEY_SCOPE_LIST, scopeList);
+        fr.startActivityForResult(intent, VKServiceType.Authorization.getOuterCode());
+    }
+
+    // ---------- PRIVATE METHODS ----------
+
+    @NonNull
+    private static Intent createIntent(Context appCtx, VKServiceType type) {
+        Intent intent = new Intent(appCtx, VKServiceActivity.class);
+        intent.putExtra(KEY_TYPE, type.name());
+        intent.putExtra(KEY_SDK_CUSTOM_INITIALIZE, VKSdk.isCustomInitialize());
+        return intent;
+    }
+
+    @NonNull
+    private VKServiceType getType() {
+        return VKServiceType.valueOf(getIntent().getStringExtra(KEY_TYPE));
+    }
+
+    @Nullable
+    private ArrayList<String> getScopeList() {
+        return getIntent().getStringArrayListExtra(KEY_SCOPE_LIST);
+    }
+
+    private long getRequestId() {
+        return getIntent().getLongExtra(KEY_REQUEST, 0);
+    }
+
+    // ---------- ACTIVITY METHODS ----------
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getIntent().getBooleanExtra(KEY_SDK_CUSTOM_INITIALIZE, false)) {
+            VKSdk.customInitialize(this, 0, null);
+        }
+
+		VKSdk.wakeUpSession(getApplicationContext());
+
+		switch (getType()) {
+			case Authorization:
+				Intent intent;
+				final Context ctx = getApplicationContext();
+				Bundle bundle = new Bundle();
+				bundle.putString(VKOpenAuthDialog.VK_EXTRA_API_VERSION, VKSdk.getApiVersion());
+				bundle.putInt(VKOpenAuthDialog.VK_EXTRA_CLIENT_ID, VKSdk.getsCurrentAppId());
+				bundle.putBoolean(VKOpenAuthDialog.VK_EXTRA_REVOKE, true);
+				bundle.putString(VKOpenAuthDialog.VK_EXTRA_SCOPE, VKStringJoiner.join(getScopeList(), ","));
+				if (VKUtil.isAppInstalled(ctx, VK_APP_PACKAGE_ID) && VKUtil.isIntentAvailable(ctx, VK_APP_AUTH_ACTION)) {
+					if (savedInstanceState == null) {
+						intent = new Intent(VK_APP_AUTH_ACTION, null);
+						intent.putExtras(bundle);
+						startActivityForResult(intent, VKServiceType.Authorization.getOuterCode());
+					}
+				} else {
+					new VKOpenAuthDialog().show(this, bundle, VKServiceType.Authorization.getOuterCode(), null);
+				}
+				break;
+			case Captcha:
+				VKError vkError = (VKError) VKObject.getRegisteredObject(getRequestId());
+				if (vkError != null) {
+					new VKCaptchaDialog(vkError).show(this, this);
+				} else {
+					finish();
+				}
+				break;
+			case Validation:
+				vkError = (VKError) VKObject.getRegisteredObject(getRequestId());
+				if (vkError != null) {
+					if (!TextUtils.isEmpty(vkError.redirectUri)
+							&& !vkError.redirectUri.contains("&ui=vk_sdk")
+							&& !vkError.redirectUri.contains("?ui=vk_sdk")){
+						if (vkError.redirectUri.indexOf('?') > 0) {
+							vkError.redirectUri += "&ui=vk_sdk";
+						} else {
+							vkError.redirectUri += "?ui=vk_sdk";
+						}
+					}
+					new VKOpenAuthDialog().show(this, new Bundle(), VKServiceType.Validation.getOuterCode(), vkError);
+				} else {
+					finish();
+				}
+				break;
+		}
+	}
+
+	public void onActivityResultPublic(int requestCode, int resultCode, Intent data) {
+		onActivityResult(requestCode, resultCode, data);
+	}
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (requestCode == VKServiceType.Authorization.getOuterCode() || requestCode == VKServiceType.Validation.getOuterCode()) {
+            VKSdk.processActivityResult(this, resultCode, data, new VKCallback<VKAccessToken>() {
+                @Override
+                public void onResult(VKAccessToken res) {
+                    setResult(VKSdk.RESULT_OK);
+                    finish();
+                }
+
+                @Override
+                public void onError(VKError error) {
+                    Object o = VKObject.getRegisteredObject(getRequestId());
+                    if (o instanceof VKError) {
+                        VKError vkError = ((VKError) o);
+                        if (vkError.request != null) {
+                            vkError.request.cancel();
+                            if (vkError.request.requestListener != null) {
+                                vkError.request.requestListener.onError(error);
+                            }
+                        }
+                    }
+
+                    if (error != null) {
+                        setResult(VKSdk.RESULT_ERROR, getIntent().putExtra(VKSdk.EXTRA_ERROR_ID, error.registerObject()));
+                    } else {
+                        setResult(VKSdk.RESULT_ERROR);
+                    }
+                    finish();
+                }
+            });
+        }
+    }
+
+    // ---------- ON DISMISS LISTENER ----------
+
+    @Override
+    public void onDismiss(DialogInterface dialog) {
+        finish();
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/ArchivsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/ArchivsFragment.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/ArchivsFragment.java	(revision )
@@ -0,0 +1,111 @@
+package com.vkdocs.oceanminded.vkdocs.Fragments;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.VKResponse;
+import com.vk.sdk.api.model.VKApiDocument;
+import com.vk.sdk.api.model.VKDocsArray;
+import com.vkdocs.oceanminded.vkdocs.Adapters.RVAdapter;
+import com.vkdocs.oceanminded.vkdocs.R;
+import com.vkdocs.oceanminded.vkdocs.Services.VKDataService;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by josh on 23.01.16.
+ */
+public class ArchivsFragment extends Fragment {
+
+    private TextView notdosc;
+    private List<VKApiDocument> documentslist;
+    private RecyclerView documenstListRV;
+    private RVAdapter adapter;
+    public static int DOCS_PARAMETR = 2;
+    public static final String VKDOCS_LOADING = "Test";
+    public static final String ALARM_MESSAGE = "Срочно пришлите кота!";
+
+
+
+
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+
+        super.onCreate(savedInstanceState);
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.fragmenta,
+                container, false);
+        //doscList =(ListView) view.findViewById(R.id.docs_list);
+        notdosc =(TextView) view.findViewById(R.id.notdocs_text);
+        documenstListRV = (RecyclerView) view.findViewById(R.id.documents_recycleview);
+        LinearLayoutManager llm = new LinearLayoutManager(getContext());
+        documenstListRV.setLayoutManager(llm);
+        documenstListRV.setHasFixedSize(true);
+        documentslist = new ArrayList<>();
+        getDocumentFromServer();
+
+        return view;
+    }
+
+    public void updateData(){
+        Intent vkServiceIntent = new Intent(getActivity(),VKDataService.class);
+
+
+    }
+    public void getDocumentFromServer() {
+        List<VKApiDocument> docsList = new ArrayList<VKApiDocument>();
+        VKRequest getdocs = new VKRequest("docs.get", VKParameters.from("type", DOCS_PARAMETR), VKRequest.HttpMethod.GET, VKDocsArray.class);
+        getdocs.executeWithListener(new VKRequest.VKRequestListener() {
+            @Override
+            public void onProgress(VKRequest.VKProgressType progressType, long bytesLoaded, long bytesTotal) {
+                super.onProgress(progressType, bytesLoaded, bytesTotal);
+            }
+
+            @Override
+            public void onComplete(VKResponse response) {
+                super.onComplete(response);
+                VKDocsArray docsArray = (VKDocsArray) response.parsedModel;
+                for (VKApiDocument doc : docsArray) {
+                    documentslist.add(doc);
+                    //Log.i("json", response.json.toString());
+                }
+                adapter = new RVAdapter(documentslist);
+                documenstListRV.setAdapter(adapter);
+            }
+
+            @Override
+            public void attemptFailed(VKRequest request, int attemptNumber, int totalAttempts) {
+                super.attemptFailed(request, attemptNumber, totalAttempts);
+            }
+
+            @Override
+            public void onError(VKError error) {
+                super.onError(error);
+            }
+        });
+//        Log.i("list.size", "" + documentslist.size());
+    }
+
+
+    @Override
+    public void onAttach(Context context) {
+        super.onAttach(context);
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiApplicationContent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiApplicationContent.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiApplicationContent.java	(revision )
@@ -0,0 +1,125 @@
+/**
+ * AppInfo.java
+ * vk-android-sdk
+ * <p/>
+ * Created by Babichev Vitaly on 19.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.text.TextUtils;
+
+import org.json.JSONObject;
+
+import static com.vk.sdk.api.model.VKAttachments.*;
+
+/**
+ * Describes information about application in the post.
+ */
+@SuppressWarnings("unused")
+public class VKApiApplicationContent extends VKApiAttachment implements android.os.Parcelable {
+
+    /**
+     * ID of the application that posted on the wall;
+     */
+    public int id;
+
+    /**
+     * Application name
+     */
+    public String name;
+
+    /**
+     * Image URL for preview with maximum width in 130px
+     */
+    public String photo_130;
+
+    /**
+     * Image URL for preview with maximum width in 130px
+     */
+    public String photo_604;
+
+    /**
+     * Image URL for preview;
+     */
+    public VKPhotoSizes photo = new VKPhotoSizes();
+
+    public VKApiApplicationContent(JSONObject source) {
+        parse(source);
+    }
+
+    /**
+     * Fills an ApplicationContent instance from JSONObject.
+     */
+    public VKApiApplicationContent parse(JSONObject source) {
+        id = source.optInt("id");
+        name = source.optString("name");
+        photo_130 = source.optString("photo_130");
+        if (!TextUtils.isEmpty(photo_130)) {
+            photo.add(VKApiPhotoSize.create(photo_130, 130));
+        }
+        photo_604 = source.optString("photo_604");
+        if (!TextUtils.isEmpty(photo_604)) {
+            photo.add(VKApiPhotoSize.create(photo_604, 604));
+        }
+        return this;
+    }
+
+    /**
+     * Creates an ApplicationContent instance from Parcel.
+     */
+    public VKApiApplicationContent(Parcel in) {
+        this.id = in.readInt();
+        this.name = in.readString();
+        this.photo_130 = in.readString();
+        this.photo_604 = in.readString();
+        this.photo = in.readParcelable(VKPhotoSizes.class.getClassLoader());
+    }
+
+    /**
+     * Creates empty ApplicationContent instance.
+     */
+    public VKApiApplicationContent() {
+
+    }
+
+    @Override
+    public CharSequence toAttachmentString() {
+        throw new UnsupportedOperationException("Attaching app info is not supported by VK.com API");
+    }
+
+    @Override
+    public String getType() {
+        return TYPE_APP;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeString(this.name);
+        dest.writeString(this.photo_130);
+        dest.writeString(this.photo_604);
+        dest.writeParcelable(this.photo, flags);
+    }
+
+    public static Creator<VKApiApplicationContent> CREATOR = new Creator<VKApiApplicationContent>() {
+        public VKApiApplicationContent createFromParcel(Parcel source) {
+            return new VKApiApplicationContent(source);
+        }
+
+        public VKApiApplicationContent[] newArray(int size) {
+            return new VKApiApplicationContent[size];
+        }
+    };
+
+    @Override
+    public int getId() {
+        return id;
+    }
+}
\ No newline at end of file
Index: app/src/main/res/values-w820dp/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values-w820dp/dimens.xml	(revision )
+++ app/src/main/res/values-w820dp/dimens.xml	(revision )
@@ -0,0 +1,6 @@
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
Index: vksdk_library/src/main/java/com/vk/sdk/api/VKSyncRequestUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/VKSyncRequestUtil.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/VKSyncRequestUtil.java	(revision )
@@ -0,0 +1,84 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+
+package com.vk.sdk.api;
+
+import android.support.annotation.NonNull;
+
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.VKResponse;
+
+class VKSyncRequestUtil {
+
+    private static class Listener extends VKRequest.VKRequestListener {
+
+        private final Object syncObj = new Object();
+        private VKRequest.VKRequestListener listener;
+        private volatile boolean isFinish = false;
+
+        public Listener(VKRequest.VKRequestListener listener) {
+            this.listener = listener;
+        }
+
+        @Override
+        public void onComplete(VKResponse response) {
+            synchronized (this.syncObj) {
+                try {
+                    listener.onComplete(response);
+                } catch (Exception e) {
+                    // nothing
+                }
+                isFinish = true;
+                syncObj.notifyAll();
+            }
+        }
+
+        @Override
+        public void onError(VKError error) {
+            synchronized (this.syncObj) {
+                try {
+                    listener.onError(error);
+                } catch (Exception e) {
+                    // nothing
+                }
+                isFinish = true;
+                syncObj.notifyAll();
+            }
+        }
+    }
+
+    public static void executeSyncWithListener(@NonNull VKRequest vkRequest, @NonNull VKRequest.VKRequestListener vkListener) {
+        Listener listener = new Listener(vkListener);
+        vkRequest.setUseLooperForCallListener(false);
+        vkRequest.executeWithListener(listener);
+        synchronized (listener.syncObj) {
+            while (!listener.isFinish) {
+                try {
+                    listener.syncObj.wait();
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/VKSdk.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/VKSdk.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/VKSdk.java	(revision )
@@ -0,0 +1,574 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk;
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.app.Application;
+import android.app.Fragment;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.Build;
+import android.os.Handler;
+import android.os.Looper;
+import android.preference.PreferenceManager;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.webkit.CookieManager;
+import android.webkit.CookieSyncManager;
+
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.VKResponse;
+import com.vk.sdk.dialogs.VKOpenAuthDialog;
+import com.vk.sdk.payments.VKPaymentsCallback;
+import com.vk.sdk.payments.VKPaymentsReceiver;
+import com.vk.sdk.util.VKUtil;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.CopyOnWriteArrayList;
+
+/**
+ * Entry point of SDK. See example for using properly
+ */
+public class VKSdk {
+
+    private static Handler handler = new Handler(Looper.getMainLooper());
+
+    public static final boolean DEBUG = false;
+    public static final boolean DEBUG_API_ERRORS = false;
+    public static final String SDK_TAG = "VK SDK";
+    public static final String SDK_APP_ID = "com_vk_sdk_AppId";
+    public static final String SDK_API_VERSION = "com_vk_sdk_ApiVersion";
+
+    private static final String VK_SDK_APP_ID_PREF_KEY = "VK_SDK_APP_ID_PLEASE_DONT_TOUCH";
+    private static final String VK_SDK_APP_VERSION_PREF_KEY = "VK_SDK_APP_VERSION_PLEASE_DONT_TOUCH";
+
+    static final int RESULT_OK = Activity.RESULT_OK;
+    static final int RESULT_ERROR = Activity.RESULT_CANCELED;
+
+    static final String EXTRA_ERROR_ID = "vk_extra_error_id";
+
+    /**
+     * App id for current application
+     */
+    private static int sCurrentAppId = 0;
+    private static boolean isPaymentsEnable = false;
+
+    private final Context applicationContext;
+
+    private static VKSdk vkSdk = null; // use for initialize like builder
+
+    private static boolean sIsCustomInitialize = false;
+
+    /**
+     * Api version for current session
+     */
+    private static String sCurrentApiVersion;
+
+    public enum LoginState {
+        Unknown,
+        LoggedOut,
+        Pending,
+        LoggedIn
+    }
+
+    private volatile static LoginState sCurrentLoginState;
+
+    /**
+     * Last requested permissions list
+     */
+    private static ArrayList<String> requestedPermissions;
+
+    /**
+     *
+     */
+    private static final List<VKAccessTokenTracker> sVKTokenListeners = new CopyOnWriteArrayList<>();
+
+    private VKSdk(Context applicationContext) {
+        this.applicationContext = applicationContext;
+    }
+
+    static void addVKTokenTracker(VKAccessTokenTracker vkAccessTokenTracker) {
+        sVKTokenListeners.add(vkAccessTokenTracker);
+    }
+
+    static void removeVKTokenTracker(VKAccessTokenTracker vkAccessTokenTracker) {
+        sVKTokenListeners.remove(vkAccessTokenTracker);
+    }
+
+    static void notifyVKTokenChanged(final VKAccessToken oldToken, final VKAccessToken newToken) {
+        handler.post(new Runnable() {
+            @Override
+            public void run() {
+                for (VKAccessTokenTracker listener : sVKTokenListeners) {
+                    listener.onVKAccessTokenChanged(oldToken, newToken);
+                }
+            }
+        });
+    }
+
+    public static boolean isIsPaymentsEnable() {
+        return isPaymentsEnable;
+    }
+
+    public static void requestUserState(Context ctx, VKPaymentsCallback callback) {
+        VKPaymentsCallback.requestUserState(ctx, callback);
+    }
+
+    public void withPayments() {
+        isPaymentsEnable = true;
+        VKPaymentsReceiver.onReceiveStatic(applicationContext);
+    }
+
+    public static VKSdk customInitialize(Context ctx, int appId, String apiVer) {
+        if (appId == 0) {
+            appId = getIntFromPref(ctx, VK_SDK_APP_ID_PREF_KEY);
+        }
+        if (TextUtils.isEmpty(apiVer)) {
+            apiVer = getStringFromPref(ctx, VK_SDK_APP_VERSION_PREF_KEY, VKSdkVersion.DEFAULT_API_VERSION);
+        }
+        if (appId == 0) {
+            throw new RuntimeException("your_app_id is 0");
+        }
+        sIsCustomInitialize = true;
+        VKSdk vkSdk = initialize(ctx, appId, apiVer);
+        if (sCurrentAppId != 0) {
+            storeIntToPref(ctx, VK_SDK_APP_ID_PREF_KEY, sCurrentAppId);
+        }
+        if (sCurrentApiVersion != null) {
+            storeStringToPref(ctx, VK_SDK_APP_VERSION_PREF_KEY, sCurrentApiVersion);
+        }
+        return vkSdk;
+    }
+
+    public static boolean isCustomInitialize() {
+        return sIsCustomInitialize;
+    }
+
+    /**
+     * Call this method to prepare VK SDK for work. Best for call - in your application class.
+     * Don't forget to call this method when you starting a service
+     *
+     * @param ctx context of current application
+     */
+    public static VKSdk initialize(Context ctx) {
+        if (sCurrentAppId != 0) {
+            return vkSdk;
+        }
+
+        if (!(ctx instanceof Application)) {
+            if (ctx == null) {
+                throw new NullPointerException("Application context cannot be null");
+            } else {
+                throw new RuntimeException("VKSdk.initialize(Context) must be call from Application#onCreate()");
+            }
+        } else {
+            if (!hasInStack(Application.class, "onCreate")) {
+                throw new RuntimeException("VKSdk.initialize(Context) must be call from Application#onCreate()");
+            }
+        }
+
+        int appId = getIntResByName(ctx, SDK_APP_ID);
+        if (appId == 0) {
+            throw new RuntimeException("String <integer name=\"com_vk_sdk_AppId\">your_app_id</integer> did not find in your resources.xml");
+        }
+
+        return initialize(ctx, appId, getStringResByName(ctx, SDK_API_VERSION, VKSdkVersion.DEFAULT_API_VERSION));
+    }
+
+    private synchronized static VKSdk initialize(Context applicationContext, int appId, String appVer) {
+        if (sCurrentAppId == 0) {
+            vkSdk = new VKSdk(applicationContext);
+            sCurrentAppId = appId;
+            sCurrentApiVersion = TextUtils.isEmpty(appVer) ? VKSdkVersion.DEFAULT_API_VERSION : appVer;
+            sCurrentLoginState = LoginState.Unknown;
+            wakeUpSession(applicationContext);
+        }
+
+        return vkSdk;
+    }
+
+    private static String getStringResByName(Context ctx, String aString, String def) {
+        int resId = ctx.getResources().getIdentifier(aString, "string", ctx.getPackageName());
+        try {
+            String ret = ctx.getString(resId);
+            return TextUtils.isEmpty(ret) ? def : ret;
+        } catch (Exception e) {
+            return def;
+        }
+    }
+
+    private static Integer getIntResByName(Context ctx, String aString) {
+        int resId = ctx.getResources().getIdentifier(aString, "integer", ctx.getPackageName());
+        try {
+            return ctx.getResources().getInteger(resId);
+        } catch (Exception e) {
+            return 0;
+        }
+    }
+
+    /**
+     * Starts authorization process. If VK app is available in system, it will opens and requests access from user.
+     * Otherwise UIWebView with standard UINavigationBar will be opened for access request.
+     *
+     * @param activity current running activity
+     * @param scope    array of permissions for your applications. All permissions you can
+     */
+    public static void login(@NonNull Activity activity, String... scope) {
+        VKServiceActivity.startLoginActivity(activity, requestedPermissions = preparingScopeList(scope));
+    }
+
+    /**
+     * Starts authorization process. If VK app is available in system, it will opens and requests access from user.
+     * Otherwise UIWebView with standard UINavigationBar will be opened for access request.
+     *
+     * @param fragment current running fragment
+     * @param scope    array of permissions for your applications. All permissions you can
+     */
+    public static void login(@NonNull Fragment fragment, String... scope) {
+        VKServiceActivity.startLoginActivity(fragment, requestedPermissions = preparingScopeList(scope));
+    }
+
+    public static boolean onActivityResult(int requestCode, int resultCode, @NonNull Intent data, @NonNull VKCallback<VKAccessToken> vkCallback) {
+        if (requestCode == VKServiceActivity.VKServiceType.Authorization.getOuterCode()) {
+            if (resultCode == VKSdk.RESULT_OK) {
+                vkCallback.onResult(VKAccessToken.currentToken());
+            } else if (resultCode == VKSdk.RESULT_ERROR) {
+                vkCallback.onError((VKError) VKObject.getRegisteredObject(data == null ? 0 : data.getLongExtra(VKSdk.EXTRA_ERROR_ID, 0)));
+            }
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    @NonNull
+    private static ArrayList<String> preparingScopeList(String... scope) {
+        if (scope == null) {
+            scope = new String[]{};
+        }
+        ArrayList<String> scopeList = new ArrayList<>(Arrays.asList(scope));
+        if (!scopeList.contains(VKScope.OFFLINE)) {
+            scopeList.add(VKScope.OFFLINE);
+        }
+        return scopeList;
+    }
+
+    static int getsCurrentAppId() {
+        return sCurrentAppId;
+    }
+
+    /**
+     * Pass data of onActivityResult() function here
+     *
+     * @param resultCode result code of activity result
+     * @param result     intent passed by activity
+     * @param callback   activity result processing callback
+     * @return If SDK parsed activity result properly, returns true. You can return from onActivityResult(). Otherwise, returns false.
+     */
+    static boolean processActivityResult(@NonNull Context ctx, int resultCode, @Nullable Intent result,
+                                         @Nullable VKCallback<VKAccessToken> callback) {
+        if (resultCode != Activity.RESULT_OK || result == null) {
+            //Result isn't ok, maybe user canceled
+            if (callback != null) {
+                callback.onError(new VKError(VKError.VK_CANCELED));
+            }
+            updateLoginState(ctx);
+            return false;
+        }
+
+        CheckTokenResult tokenResult;
+        Map<String, String> tokenParams = null;
+        if (result.hasExtra(VKOpenAuthDialog.VK_EXTRA_TOKEN_DATA)) {
+            //Token received via webview
+            String tokenInfo = result.getStringExtra(VKOpenAuthDialog.VK_EXTRA_TOKEN_DATA);
+            tokenParams = VKUtil.explodeQueryString(tokenInfo);
+        } else if (result.getExtras() != null) {
+            //Token received via VK app
+            tokenParams = new HashMap<>();
+            for (String key : result.getExtras().keySet()) {
+                tokenParams.put(key, String.valueOf(result.getExtras().get(key)));
+            }
+        }
+
+        tokenResult = checkAndSetToken(ctx, tokenParams);
+        if (tokenResult.error != null && callback != null) {
+            callback.onError(tokenResult.error);
+        } else if (tokenResult.token != null) {
+            if (tokenResult.oldToken != null) {
+                VKRequest validationRequest = VKRequest.getRegisteredRequest(result.getLongExtra(VKOpenAuthDialog.VK_EXTRA_VALIDATION_REQUEST, 0));
+                if (validationRequest != null) {
+                    validationRequest.unregisterObject();
+                    validationRequest.repeat();
+                }
+            } else {
+                trackVisitor(null);
+            }
+
+            if (callback != null) {
+                callback.onResult(tokenResult.token);
+            }
+        }
+        requestedPermissions = null;
+        updateLoginState(ctx);
+        return true;
+    }
+
+    /**
+     * Check new access token and sets it as working token
+     *
+     * @param tokenParams params of token
+     * @return true if access token was set, or error was provided
+     */
+    private static CheckTokenResult checkAndSetToken(@NonNull Context ctx, @Nullable Map<String, String> tokenParams) {
+        if (tokenParams != null && requestedPermissions != null) {
+            tokenParams.put(VKAccessToken.SCOPE, TextUtils.join(",", requestedPermissions));
+        }
+        VKAccessToken token = VKAccessToken.tokenFromParameters(tokenParams);
+        if (token == null || token.accessToken == null) {
+            if (tokenParams != null && tokenParams.containsKey(VKAccessToken.SUCCESS)) {
+                return new CheckTokenResult(VKAccessToken.currentToken(), token != null ? token : VKAccessToken.currentToken());
+            }
+
+            VKError error = new VKError(tokenParams);
+            if (error.errorMessage != null || error.errorReason != null) {
+                error = new VKError(VKError.VK_CANCELED);
+            }
+            return new CheckTokenResult(error);
+        } else {
+            VKAccessToken old = VKAccessToken.currentToken();
+            if (old != null) {
+                VKAccessToken newToken = old.copyWithToken(token);
+                VKAccessToken.replaceToken(ctx, old.copyWithToken(token));
+                notifyVKTokenChanged(old, newToken);
+                return new CheckTokenResult(old, token);
+            } else {
+                VKAccessToken.replaceToken(ctx, token);
+                notifyVKTokenChanged(old, token);
+                return new CheckTokenResult(token);
+            }
+        }
+    }
+
+    /**
+     * Returns token for API requests
+     *
+     * @return Received access token or null, if user not yet authorized
+     * @deprecated Use {@link VKAccessToken#currentToken()} instead
+     */
+    public static VKAccessToken getAccessToken() {
+        return VKAccessToken.currentToken();
+    }
+
+    /**
+     * Checks if an access token exist and performs a try to use it again
+     *
+     * @param context An application context for store an access token
+     * @return true, if an access token exists and not expired
+     */
+    public static boolean wakeUpSession(@NonNull Context context) {
+        return wakeUpSession(context, null);
+    }
+
+    /**
+     * Checks if an access token exist and performs a try to use it again
+     *
+     * @param context            An application context for store an access token
+     * @param loginStateCallback if callback specified, {@link VKCallback#onResult(Object)} method will be called after login state changed
+     * @return true, if an access token exists and not expired
+     */
+    public static boolean wakeUpSession(@NonNull final Context context, final VKCallback<LoginState> loginStateCallback) {
+        final Context appContext = context.getApplicationContext();
+        VKUIHelper.setApplicationContext(appContext);
+
+        VKAccessToken token = VKAccessToken.currentToken();
+
+        if (token != null && token.accessToken != null && !token.isExpired()) {
+            forceLoginState(LoginState.Pending, loginStateCallback);
+            trackVisitor(new VKRequest.VKRequestListener() {
+                @Override
+                public void onComplete(VKResponse response) {
+                    updateLoginState(context, loginStateCallback);
+                }
+
+                @Override
+                public void onError(VKError error) {
+                    //Possible double call of access token invalid
+                    if (error != null && error.apiError != null && error.apiError.errorCode == 5) {
+                        onAccessTokenIsInvalid(appContext);
+                    }
+                    updateLoginState(context, loginStateCallback);
+                }
+            });
+            return true;
+        }
+        updateLoginState(context, loginStateCallback);
+        return false;
+    }
+
+    private static void onAccessTokenIsInvalid(@NonNull Context ctx) {
+        VKAccessToken old = VKAccessToken.replaceToken(ctx, null);
+        if (old != null) {
+            notifyVKTokenChanged(old, null);
+        }
+    }
+
+    /**
+     * Common check for access denied errors
+     *
+     * @param apiError error from VKRequest
+     */
+    public static void notifySdkAboutApiError(VKError apiError) {
+        if (apiError.errorCode == 5) {
+            onAccessTokenIsInvalid(VKUIHelper.getApplicationContext());
+        }
+    }
+
+    /**
+     * Wipes out information about the access token and clears cookies for internal browse
+     */
+    @SuppressLint("NewApi")
+    public static void logout() {
+        Context context = VKUIHelper.getApplicationContext();
+        if (Build.VERSION.SDK_INT < 21) {
+            CookieSyncManager.createInstance(context);
+            CookieManager cookieManager = CookieManager.getInstance();
+            cookieManager.removeAllCookie();
+        } else {
+            CookieManager.getInstance().removeAllCookies(null);
+        }
+
+        VKAccessToken.replaceToken(VKUIHelper.getApplicationContext(), null);
+
+        updateLoginState(context);
+    }
+
+    /**
+     * Indicated if an access token exists and not expired
+     *
+     * @return true if a token exists and not expired
+     */
+    public static boolean isLoggedIn() {
+        VKAccessToken token = VKAccessToken.currentToken();
+        return token != null && !token.isExpired();
+    }
+
+    private static void trackVisitor(VKRequest.VKRequestListener l) {
+        VKRequest r = new VKRequest("stats.trackVisitor");
+        r.attempts = 0;
+        r.executeWithListener(l);
+    }
+
+    private static void updateLoginState(Context context) {
+        updateLoginState(context, null);
+    }
+
+    private static void updateLoginState(Context context, VKCallback<LoginState> callback) {
+        VKUIHelper.setApplicationContext(context);
+        if (VKAccessToken.currentToken() != null) {
+            forceLoginState(LoginState.LoggedIn, callback);
+        } else {
+            forceLoginState(LoginState.LoggedOut, callback);
+        }
+    }
+
+    private static void forceLoginState(LoginState newState, VKCallback<LoginState> callback) {
+        sCurrentLoginState = newState;
+        if (callback != null) {
+            callback.onResult(sCurrentLoginState);
+        }
+    }
+
+    /**
+     * @return Returns specified API version for VK requests
+     */
+    public static String getApiVersion() {
+        return sCurrentApiVersion;
+    }
+
+    private static class CheckTokenResult {
+        public VKAccessToken token;
+        public VKAccessToken oldToken;
+        public VKError error;
+
+        public CheckTokenResult(VKAccessToken token) {
+            this.token = token;
+        }
+
+        public CheckTokenResult(VKAccessToken oldToken, VKAccessToken newToken) {
+            this.token = newToken;
+            this.oldToken = oldToken;
+        }
+
+        public CheckTokenResult(VKError err) {
+            this.error = err;
+        }
+    }
+
+    private static boolean hasInStack(@NonNull final Class<?> clazz, @NonNull final String method) {
+        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
+        for (int i = stackTrace.length - 2; i >= 0; --i) {
+            StackTraceElement element = stackTrace[i];
+            try {
+                Class<?> aClass = Class.forName(element.getClassName());
+                aClass.asSubclass(clazz);
+                if (method.equals(element.getMethodName())) {
+                    return true;
+                }
+            } catch (ClassNotFoundException | ClassCastException e) {
+                // nothing
+            }
+        }
+        return false;
+    }
+
+    private static int getIntFromPref(@NonNull Context ctx, @NonNull String key) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctx);
+        return prefs.getInt(key, 0);
+    }
+
+    private static void storeIntToPref(@NonNull Context ctx, @NonNull String key, int value) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctx);
+        SharedPreferences.Editor edit = prefs.edit();
+        edit.putInt(key, value);
+        edit.apply();
+    }
+
+    private static String getStringFromPref(@NonNull Context ctx, @NonNull String key, String def) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctx);
+        return prefs.getString(key, def);
+    }
+
+    private static void storeStringToPref(@NonNull Context ctx, @NonNull String key, String value) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctx);
+        SharedPreferences.Editor edit = prefs.edit();
+        edit.putString(key, value);
+        edit.apply();
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/res/values/color.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/values/color.xml	(revision )
+++ vksdk_library/src/main/res/values/color.xml	(revision )
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="vk_color">#5585BC</color>
+    <color name="vk_grey_color">#F0F2F5</color>
+    <color name="vk_white">#fff</color>
+    <color name="vk_light_color">#A7C2DF</color>
+    <color name="vk_clear">#0000</color>
+    <color name="vk_black_pressed">#1000</color>
+    <color name="vk_black">#000</color>
+    <color name="vk_share_blue_color">#338cc9</color>
+    <color name="vk_share_gray_line">#e5e5e5</color>
+    <color name="vk_share_top_blue_color">#527dad</color>
+    <color name="vk_share_link_title_color">#5477a3</color>
+    <color name="vk_share_link_color">#9e9e9e</color>
+</resources>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/package-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/package-info.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/package-info.java	(revision )
@@ -0,0 +1,25 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * Contains models to represent VK objects and provides parsing.
+ */
+package com.vk.sdk.api.model;
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(revision )
+++ .gitignore	(revision )
@@ -0,0 +1,8 @@
+*.iml
+.gradle
+/local.properties
+/.idea/workspace.xml
+/.idea/libraries
+.DS_Store
+/build
+/captures
Index: vksdk_library/src/main/res/values-v11/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/values-v11/styles.xml	(revision )
+++ vksdk_library/src/main/res/values-v11/styles.xml	(revision )
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <style name="VK.Transparent" parent="android:Theme.Holo.Light">
+        <item name="android:windowIsTranslucent">true</item>
+        <item name="android:windowBackground">@android:color/transparent</item>
+        <item name="android:windowContentOverlay">@null</item>
+        <item name="android:windowNoTitle">true</item>
+        <item name="android:windowIsFloating">true</item>
+    </style>
+
+    <style name="VKAlertDialog">
+        <item name="android:windowBackground">@android:color/transparent</item>
+        <item name="android:windowContentOverlay">@null</item>
+        <item name="android:windowMinWidthMajor">@android:dimen/dialog_min_width_major</item>
+        <item name="android:windowMinWidthMinor">@android:dimen/dialog_min_width_minor</item>
+    </style>
+</resources>
\ No newline at end of file
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Services/VKDataService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Services/VKDataService.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Services/VKDataService.java	(revision )
@@ -0,0 +1,105 @@
+package com.vkdocs.oceanminded.vkdocs.Services;
+
+import android.app.IntentService;
+import android.content.Intent;
+import android.util.Log;
+
+import com.vk.sdk.api.VKApiConst;
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.VKResponse;
+import com.vk.sdk.api.model.VKApiDocument;
+import com.vk.sdk.api.model.VKDocsArray;
+
+import java.util.ArrayList;
+
+
+/**
+ * An {@link IntentService} subclass for handling asynchronous task requests in
+ * a service on a separate handler thread.
+ * <p/>
+ * TODO: Customize class - update intent actions and extra parameters.
+ */
+public class VKDataService extends IntentService {
+    private ArrayList<VKApiDocument> data;
+    /**
+     * Creates an IntentService.  Invoked by your subclass's constructor.
+     *
+     * @param name Used to name the worker thread, important only for debugging.
+     */
+
+
+    final String SERVICE_LOG = "Service";
+    public VKDataService() {
+
+        super("name");
+    }
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        Log.i("S", "Started");
+    }
+
+     public void pushData(ArrayList<VKApiDocument> datalist){
+        data = datalist;
+    }
+
+    public void getDocumentFromServer() {
+        final ArrayList<VKApiDocument> docsList = new ArrayList<VKApiDocument>();
+        VKRequest getdocs = new VKRequest("docs.get", VKParameters.from(VKApiConst.FIELDS, "1"), VKRequest.HttpMethod.GET, VKDocsArray.class);
+        getdocs.executeWithListener(new VKRequest.VKRequestListener() {
+            @Override
+            public void onProgress(VKRequest.VKProgressType progressType, long bytesLoaded, long bytesTotal) {
+                super.onProgress(progressType, bytesLoaded, bytesTotal);
+            }
+
+            @Override
+            public void onComplete(VKResponse response) {
+                super.onComplete(response);
+                VKDocsArray docsArray = (VKDocsArray) response.parsedModel;
+                for (VKApiDocument doc : docsArray) {
+                    docsList.add(doc);
+                }
+
+                Log.i("list.size", "" + docsList.size());
+                //pushData(docsList);
+
+
+            }
+
+
+            @Override
+            public void attemptFailed(VKRequest request, int attemptNumber, int totalAttempts) {
+                super.attemptFailed(request, attemptNumber, totalAttempts);
+            }
+
+            @Override
+            public void onError(VKError error) {
+                super.onError(error);
+            }
+        });
+
+
+    }
+
+
+
+
+    @Override
+    protected void onHandleIntent(Intent intent) {
+        //getDocumentFromServer();
+        Log.i("message", intent.getStringExtra("send"));
+        intent.putExtra("back","work!!!");
+
+
+
+        Intent vkServiceIntent = new Intent();
+        vkServiceIntent.putExtra("get", "get Data");
+        vkServiceIntent.setAction("StartService");
+        vkServiceIntent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);
+        sendBroadcast(vkServiceIntent);
+    }
+
+}
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(revision )
+++ app/src/main/res/values/strings.xml	(revision )
@@ -0,0 +1,23 @@
+<resources>
+    <string name="app_name">Документы</string>
+    <string name="action_settings">Settings</string>
+    <string name="picture">изображения</string>
+    <string name="books">книги</string>
+    <string name="docs">документы</string>
+    <string name="other">другие</string>
+    <string name="files">файлы</string>
+    <integer name="com_vk_sdk_AppId">5204619</integer>
+    <string name="title_activity_example">exampleActivity</string>
+    <string name="navigation_drawer_open">Open navigation drawer</string>
+    <string name="navigation_drawer_close">Close navigation drawer</string>
+    <string name="authorization">авторизуйтесь</string>
+    <string name="title_activity_files_explore">FilesExplore</string>
+    <string name="chooser_title">file</string>
+    <string name="title_activity_maps">Map</string>
+    <string name="title_activity_image">ImageActivity</string>
+    <string name="dummy_button">Dummy Button</string>
+    <string name="dummy_content">DUMMY\nCONTENT</string>
+
+    <string name="title_activity_fullscreen">FullscreenActivity</string>
+
+</resources>
Index: vksdk_library/src/main/java/com/vk/sdk/util/VKStringJoiner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/util/VKStringJoiner.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/util/VKStringJoiner.java	(revision )
@@ -0,0 +1,99 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.util;
+
+import android.net.Uri;
+import android.text.TextUtils;
+
+import com.vk.sdk.api.model.VKAttachments;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Map;
+
+/**
+ * Helper class for join collections to strings
+ */
+public class VKStringJoiner {
+    /**
+     * Joins array of strings to one string with glue
+     *
+     * @param what Array of string to join
+     * @param glue Glue for joined strings
+     * @return Joined string
+     */
+    public static String join(String[] what, String glue) {
+        return join(Arrays.asList(what), glue);
+    }
+
+    /**
+     * Joins some collection to string with glue
+     *
+     * @param what Collection to join
+     * @param glue Glue for joined strings
+     * @return Joined string
+     */
+    public static String join(Collection<?> what, String glue) {
+        return TextUtils.join(glue, what);
+    }
+
+    /**
+     * Join parameters map into string, usually query string
+     *
+     * @param queryParams Map to join
+     * @param isUri       Indicates that value parameters must be uri-encoded
+     * @return Result query string, like k=v&k1=v1
+     */
+    public static String joinParams(Map<String, ?> queryParams, boolean isUri) {
+        ArrayList<String> params = new ArrayList<String>(queryParams.size());
+        for (Map.Entry<String, ?> entry : queryParams.entrySet()) {
+            Object value = entry.getValue();
+            if (value instanceof VKAttachments) {
+                value = ((VKAttachments)value).toAttachmentsString();
+            }
+            params.add(String.format("%s=%s", entry.getKey(),
+                    isUri ? Uri.encode(String.valueOf(value)) : String.valueOf(value)));
+        }
+        return join(params, "&");
+    }
+
+    /**
+     * Join parameters from map without URI-encoding
+     *
+     * @param queryParams Map to join
+     * @return Joined string
+     */
+    public static String joinParams(Map<String, ?> queryParams) {
+        return joinParams(queryParams, false);
+    }
+
+    /**
+     * Join parameters from map with URI-encoding
+     *
+     * @param queryParams Map to join
+     * @return Joined string
+     */
+    public static String joinUriParams(Map<String, ?> queryParams) {
+        return joinParams(queryParams, true);
+    }
+}
Index: app/src/main/res/drawable-v21/ic_create_new_folder_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_create_new_folder_black_24dp.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_create_new_folder_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M20,6h-8l-2,-2L4,4c-1.11,0 -1.99,0.89 -1.99,2L2,18c0,1.11 0.89,2 2,2h16c1.11,0 2,-0.89 2,-2L22,8c0,-1.11 -0.89,-2 -2,-2zM19,14h-3v3h-2v-3h-3v-2h3L14,9h2v3h3v2z"/>
+</vector>
Index: vksdk_library/src/main/java/com/vk/sdk/VKSdkVersion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/VKSdkVersion.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/VKSdkVersion.java	(revision )
@@ -0,0 +1,30 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk;
+
+/**
+ * Contains SDK versions constants
+ */
+public class VKSdkVersion {
+    public static final String SDK_VERSION = "1.6.3";
+    static final String DEFAULT_API_VERSION = "5.21";
+}
Index: vksdk_library/src/main/res/values-v21/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/values-v21/styles.xml	(revision )
+++ vksdk_library/src/main/res/values-v21/styles.xml	(revision )
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <style name="VK.Transparent" parent="android:Theme.Material.Light">
+        <item name="android:windowIsTranslucent">true</item>
+        <item name="android:windowBackground">@android:color/transparent</item>
+        <item name="android:windowContentOverlay">@null</item>
+        <item name="android:windowNoTitle">true</item>
+        <item name="android:windowIsFloating">true</item>
+        <item name="android:windowTranslucentStatus">true</item>
+    </style>
+</resources>
\ No newline at end of file
Index: app/src/main/res/drawable-v21/ic_file_download_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_file_download_black_24dp.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_file_download_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M19,9h-4V3H9v6H5l7,7 7,-7zM5,18v2h14v-2H5z"/>
+</vector>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision )
+++ .idea/misc.xml	(revision )
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="EntryPointsManager">
+    <entry_points version="2.0" />
+  </component>
+  <component name="NullableNotNullManager">
+    <option name="myDefaultNullable" value="android.support.annotation.Nullable" />
+    <option name="myDefaultNotNull" value="android.support.annotation.NonNull" />
+    <option name="myNullables">
+      <value>
+        <list size="4">
+          <item index="0" class="java.lang.String" itemvalue="org.jetbrains.annotations.Nullable" />
+          <item index="1" class="java.lang.String" itemvalue="javax.annotation.Nullable" />
+          <item index="2" class="java.lang.String" itemvalue="edu.umd.cs.findbugs.annotations.Nullable" />
+          <item index="3" class="java.lang.String" itemvalue="android.support.annotation.Nullable" />
+        </list>
+      </value>
+    </option>
+    <option name="myNotNulls">
+      <value>
+        <list size="4">
+          <item index="0" class="java.lang.String" itemvalue="org.jetbrains.annotations.NotNull" />
+          <item index="1" class="java.lang.String" itemvalue="javax.annotation.Nonnull" />
+          <item index="2" class="java.lang.String" itemvalue="edu.umd.cs.findbugs.annotations.NonNull" />
+          <item index="3" class="java.lang.String" itemvalue="android.support.annotation.NonNull" />
+        </list>
+      </value>
+    </option>
+  </component>
+  <component name="ProjectLevelVcsManager" settingsEditedManually="false">
+    <OptionsSetting value="true" id="Add" />
+    <OptionsSetting value="true" id="Remove" />
+    <OptionsSetting value="true" id="Checkout" />
+    <OptionsSetting value="true" id="Update" />
+    <OptionsSetting value="true" id="Status" />
+    <OptionsSetting value="true" id="Edit" />
+    <ConfirmationsSetting value="0" id="Add" />
+    <ConfirmationsSetting value="0" id="Remove" />
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" default="true" assert-keyword="true" jdk-15="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/build/classes" />
+  </component>
+  <component name="ProjectType">
+    <option name="id" value="Android" />
+  </component>
+</project>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiPhotos.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiPhotos.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiPhotos.java	(revision )
@@ -0,0 +1,71 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.methods;
+
+import com.vk.sdk.api.VKApiConst;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.model.VKPhotoArray;
+import com.vk.sdk.util.VKUtil;
+
+/**
+ * Builds requests for API.photos part
+ */
+public class VKApiPhotos extends VKApiBase {
+    public VKRequest getUploadServer(long albumId) {
+        return prepareRequest("getUploadServer", VKUtil.paramsFrom(VKApiConst.ALBUM_ID, String.valueOf(albumId)));
+    }
+
+    public VKRequest getUploadServer(long albumId, long groupId) {
+        return prepareRequest("getUploadServer", VKUtil.paramsFrom(VKApiConst.ALBUM_ID, albumId, VKApiConst.GROUP_ID, groupId));
+    }
+
+    public VKRequest getWallUploadServer() {
+        return prepareRequest("getWallUploadServer", null);
+    }
+
+    public VKRequest getWallUploadServer(long groupId) {
+        return prepareRequest("getWallUploadServer", VKUtil.paramsFrom(VKApiConst.GROUP_ID, groupId));
+    }
+
+    public VKRequest getMessagesUploadServer() {
+        return prepareRequest("getMessagesUploadServer", null);
+    }
+
+    public VKRequest saveWallPhoto(VKParameters params) {
+        return prepareRequest("saveWallPhoto", params, VKPhotoArray.class);
+
+    }
+
+    public VKRequest save(VKParameters params) {
+        return prepareRequest("save", params, VKPhotoArray.class);
+    }
+
+    public VKRequest saveMessagesPhoto(VKParameters params) {
+        return prepareRequest("saveMessagesPhoto", params, VKPhotoArray.class);
+    }
+
+    @Override
+    protected String getMethodsGroup() {
+        return "photos";
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiSchool.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiSchool.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiSchool.java	(revision )
@@ -0,0 +1,188 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import static android.text.TextUtils.isEmpty;
+
+/**
+ * A school object describes a school.
+ */
+@SuppressWarnings("unused")
+public class VKApiSchool extends VKApiModel implements Parcelable, Identifiable {
+
+    /**
+     * School ID, positive number
+     */
+    public int id;
+
+    /**
+     * ID of the country the school is located in, positive number
+     */
+    public int country_id;
+
+    /**
+     * ID of the city the school is located in, positive number
+     */
+    public int city_id;
+
+    /**
+     * School name
+     */
+    public String name;
+
+    /**
+     * Year the user started to study
+     */
+    public int year_from;
+
+    /**
+     * Year the user finished to study
+     */
+    public int year_to;
+
+    /**
+     * Graduation year
+     */
+    public int year_graduated;
+
+    /**
+     * School class letter
+     */
+    public String clazz;
+
+    /**
+     * Speciality
+     */
+    public String speciality;
+
+	public VKApiSchool(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills a School instance from JSONObject.
+     */
+    public VKApiSchool parse(JSONObject from) {
+        id = from.optInt("id");
+        country_id = from.optInt("country_id");
+        city_id = from.optInt("city_id");
+        name = from.optString("name");
+        year_from = from.optInt("year_from");
+        year_to = from.optInt("year_to");
+        year_graduated = from.optInt("year_graduated");
+        clazz = from.optString("class");
+        speciality = from.optString("speciality");
+        return this;
+    }
+
+    /**
+     * Creates a School instance from Parcel.
+     */
+    public VKApiSchool(Parcel in) {
+        this.id = in.readInt();
+        this.country_id = in.readInt();
+        this.city_id = in.readInt();
+        this.name = in.readString();
+        this.year_from = in.readInt();
+        this.year_to = in.readInt();
+        this.year_graduated = in.readInt();
+        this.clazz = in.readString();
+        this.speciality = in.readString();
+    }
+
+    /**
+     * Creates empty School instance.
+     */
+    public VKApiSchool() {
+
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    private String fullName;
+
+    @Override
+    public String toString() {
+        if(fullName == null) {
+            StringBuilder builder = new StringBuilder(name);
+            if(year_graduated != 0) {
+                builder.append(" \'");
+                builder.append(String.format("%02d", year_graduated % 100));
+            }
+            if(year_from != 0 && year_to != 0) {
+                builder.append(", ");
+                builder.append(year_from);
+                builder.append('-');
+                builder.append(year_to);
+            }
+            if(!isEmpty(clazz)) {
+                builder.append('(');
+                builder.append(clazz);
+                builder.append(')');
+            }
+            if(!isEmpty(speciality)) {
+                builder.append(", ");
+                builder.append(speciality);
+            }
+            fullName = builder.toString();
+        }
+        return fullName;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeInt(this.country_id);
+        dest.writeInt(this.city_id);
+        dest.writeString(this.name);
+        dest.writeInt(this.year_from);
+        dest.writeInt(this.year_to);
+        dest.writeInt(this.year_graduated);
+        dest.writeString(this.clazz);
+        dest.writeString(this.speciality);
+    }
+
+    public static Creator<VKApiSchool> CREATOR = new Creator<VKApiSchool>() {
+        public VKApiSchool createFromParcel(Parcel source) {
+            return new VKApiSchool(source);
+        }
+
+        public VKApiSchool[] newArray(int size) {
+            return new VKApiSchool[size];
+        }
+    };
+
+}
Index: app/src/main/res/drawable-v21/ic_cloud_upload_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_cloud_upload_black_24dp.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_cloud_upload_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M19.35,10.04C18.67,6.59 15.64,4 12,4 9.11,4 6.6,5.64 5.35,8.04 2.34,8.36 0,10.91 0,14c0,3.31 2.69,6 6,6h13c2.76,0 5,-2.24 5,-5 0,-2.64 -2.05,-4.78 -4.65,-4.96zM14,13v4h-4v-4H7l5,-5 5,5h-3z"/>
+</vector>
Index: vksdk_library/src/main/java/com/vk/sdk/dialogs/VKShareDialogNative.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/dialogs/VKShareDialogNative.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/dialogs/VKShareDialogNative.java	(revision )
@@ -0,0 +1,76 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.dialogs;
+
+import android.annotation.SuppressLint;
+import android.annotation.TargetApi;
+import android.app.Dialog;
+import android.app.DialogFragment;
+import android.content.DialogInterface;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+
+@TargetApi(Build.VERSION_CODES.HONEYCOMB)
+public class VKShareDialogNative extends DialogFragment implements VKShareDialogDelegate.DialogFragmentI {
+
+	private VKShareDialogDelegate mDelegate = new VKShareDialogDelegate(this);
+
+	public VKShareDialogNative() {
+	}
+
+	@SuppressLint("ValidFragment")
+	VKShareDialogNative(VKShareDialogBuilder builder) {
+		mDelegate.setAttachmentImages(builder.attachmentImages);
+		mDelegate.setText(builder.attachmentText);
+		if (builder.linkTitle != null && builder.linkUrl != null) {
+			mDelegate.setAttachmentLink(builder.linkTitle, builder.linkUrl);
+		}
+		mDelegate.setUploadedPhotos(builder.existingPhotos);
+		mDelegate.setShareDialogListener(builder.listener);
+	}
+
+	@NonNull
+	@Override
+	public Dialog onCreateDialog(Bundle savedInstanceState) {
+		return mDelegate.onCreateDialog(savedInstanceState);
+	}
+
+	@Override
+	@SuppressLint("NewApi")
+	public void onStart() {
+		super.onStart();
+		mDelegate.onStart();
+	}
+
+	@Override
+	public void onSaveInstanceState(Bundle outState) {
+		super.onSaveInstanceState(outState);
+		mDelegate.onSaveInstanceState(outState);
+	}
+
+	@Override
+	public void onCancel(DialogInterface dialog) {
+		super.onCancel(dialog);
+		mDelegate.onCancel(dialog);
+	}
+}
\ No newline at end of file
Index: app/src/main/res/drawable/plus.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/plus.xml	(revision )
+++ app/src/main/res/drawable/plus.xml	(revision )
@@ -0,0 +1,8 @@
+<!-- drawable/plus.xml -->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="24dp"
+    android:width="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path android:fillColor="#000" android:pathData="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />
+</vector>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiDialog.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiDialog.java	(revision )
@@ -0,0 +1,99 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * User.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 18.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Dialog object describes a user dialog.
+ */
+public class VKApiDialog extends VKApiModel implements Identifiable, android.os.Parcelable {
+
+    /**
+     * Flag, either 1 or 0
+     */
+    public int unread;
+    /**
+     * The first message dialog.
+     */
+    public VKApiMessage message;
+
+	public VKApiDialog(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills an dialog object from server response.
+     */
+    public VKApiDialog parse(JSONObject from) throws JSONException {
+        unread = from.optInt("unread");
+        message = new VKApiMessage(from.optJSONObject("message"));
+        return this;
+    }
+    /**
+     * Creates an Dialog instance from Parcel.
+     */
+    public VKApiDialog(Parcel in) {
+        this.unread = in.readInt();
+        this.message = in.readParcelable(VKApiMessage.class.getClassLoader());
+    }
+    /**
+     * Creates empty Dialog instance.
+     */
+    public VKApiDialog() {
+    }
+
+    @Override
+    public int getId() {
+        return message.getId();
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.unread);
+        dest.writeParcelable(this.message, flags);
+    }
+
+    public static Creator<VKApiDialog> CREATOR = new Creator<VKApiDialog>() {
+        public VKApiDialog createFromParcel(Parcel source) {
+            return new VKApiDialog(source);
+        }
+
+        public VKApiDialog[] newArray(int size) {
+            return new VKApiDialog[size];
+        }
+    };
+}
Index: vksdk_library/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/values/styles.xml	(revision )
+++ vksdk_library/src/main/res/values/styles.xml	(revision )
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <style name="VK.Transparent" parent="android:Theme">
+        <item name="android:windowIsTranslucent">true</item>
+        <item name="android:windowBackground">@android:color/transparent</item>
+        <item name="android:windowContentOverlay">@null</item>
+        <item name="android:windowNoTitle">true</item>
+        <item name="android:windowIsFloating">true</item>
+    </style>
+
+    <style name="VKAlertDialog">
+        <item name="android:windowBackground">@android:color/transparent</item>
+        <item name="android:windowContentOverlay">@null</item>
+    </style>
+</resources>
\ No newline at end of file
Index: vksdk_library/src/main/res/drawable/vk_gray_transparent_shape.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/drawable/vk_gray_transparent_shape.xml	(revision )
+++ vksdk_library/src/main/res/drawable/vk_gray_transparent_shape.xml	(revision )
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <solid android:color="@color/vk_black_pressed"/>
+</shape>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKMultipartEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKMultipartEntity.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKMultipartEntity.java	(revision )
@@ -0,0 +1,119 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.httpClient;
+
+import android.util.Pair;
+import android.webkit.MimeTypeMap;
+
+import com.vk.sdk.api.model.VKAttachments;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.Locale;
+import java.util.Random;
+
+/**
+ * Class used for build upload multipart data for VK servers
+ */
+public class VKMultipartEntity {
+
+    private static final String VK_BOUNDARY = "Boundary(======VK_SDK_%d======)";
+
+    private final String mBoundary;
+    private final File[] mFiles;
+    private String mType;
+
+    public VKMultipartEntity(File[] files) {
+        mBoundary = String.format(Locale.US, VK_BOUNDARY, new Random().nextInt());
+        mFiles = files;
+    }
+
+    public VKMultipartEntity(File[] files, String type) {
+        mBoundary = String.format(Locale.US, VK_BOUNDARY, new Random().nextInt());
+        mFiles = files;
+        mType = type;
+    }
+
+    public long getContentLength() {
+        long length = 0;
+        for (int i = 0; i < mFiles.length; i++) {
+            File f = mFiles[i];
+            length += f.length();
+            length += getFileDescription(f, i).length();
+        }
+        length += getBoundaryEnd().length();
+        return length;
+    }
+
+    public Pair<String, String> getContentType() {
+        return new Pair<>("Content-Type", String.format("multipart/form-data; boundary=%s", mBoundary));
+    }
+
+    public InputStream getContent() throws IOException, IllegalStateException {
+        throw new UnsupportedOperationException("Multipart form entity does not implement #getContent()");
+    }
+
+    protected String getFileDescription(File uploadFile, int i) {
+        String fileName;
+        if (mType != null && mType.equals(VKAttachments.TYPE_DOC)) {
+            fileName = "file";
+        } else {
+            fileName = String.format(Locale.US, "file%d", i + 1);
+        }
+        String extension = MimeTypeMap.getFileExtensionFromUrl(uploadFile.getAbsolutePath());
+        return String.format("\r\n--%s\r\n", mBoundary) +
+                String.format("Content-Disposition: form-data; name=\"%s\"; filename=\"%s.%s\"\r\n", fileName, fileName, extension) +
+                String.format("Content-Type: %s\r\n\r\n", getMimeType(uploadFile.getAbsolutePath()));
+    }
+
+    private String getBoundaryEnd() {
+        return String.format("\r\n--%s--\r\n", mBoundary);
+    }
+
+    public void writeTo(OutputStream outputStream) throws IOException {
+        for (int i = 0; i < mFiles.length; i++) {
+            File uploadFile = mFiles[i];
+            outputStream.write(getFileDescription(uploadFile, i).getBytes("UTF-8"));
+            FileInputStream reader = new FileInputStream(uploadFile);
+            byte[] fileBuffer = new byte[2048];
+            int bytesRead;
+            while ((bytesRead = reader.read(fileBuffer)) != -1) {
+                outputStream.write(fileBuffer, 0, bytesRead);
+            }
+            reader.close();
+        }
+        outputStream.write(getBoundaryEnd().getBytes("UTF-8"));
+    }
+
+    protected static String getMimeType(String url) {
+        String type = null;
+        String extension = MimeTypeMap.getFileExtensionFromUrl(url);
+        if (extension != null) {
+            MimeTypeMap mime = MimeTypeMap.getSingleton();
+            type = mime.getMimeTypeFromExtension(extension);
+        }
+        return type;
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Adapters/ViewPagerAdapte.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Adapters/ViewPagerAdapte.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Adapters/ViewPagerAdapte.java	(revision )
@@ -0,0 +1,37 @@
+package com.vkdocs.oceanminded.vkdocs.Adapters;
+
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentPagerAdapter;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ViewPagerAdapte extends FragmentPagerAdapter {
+    private final List<Fragment> mFragmentList = new ArrayList<>();
+    private final List<String> mFragmentTitleList = new ArrayList<>();
+
+    public ViewPagerAdapte(FragmentManager manager) {
+        super(manager);
+    }
+
+    @Override
+    public Fragment getItem(int position) {
+        return mFragmentList.get(position);
+    }
+
+    @Override
+    public int getCount() {
+        return mFragmentList.size();
+    }
+
+    public void addFragment(Fragment fragment, String title) {
+        mFragmentList.add(fragment);
+        mFragmentTitleList.add(title);
+    }
+
+    @Override
+    public CharSequence getPageTitle(int position) {
+        return mFragmentTitleList.get(position);
+    }
+}
\ No newline at end of file
Index: app/src/main/res/drawable-v21/ic_cloud_download_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_cloud_download_black_24dp.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_cloud_download_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M19.35,10.04C18.67,6.59 15.64,4 12,4 9.11,4 6.6,5.64 5.35,8.04 2.34,8.36 0,10.91 0,14c0,3.31 2.69,6 6,6h13c2.76,0 5,-2.24 5,-5 0,-2.64 -2.05,-4.78 -4.65,-4.96zM17,13l-5,5 -5,-5h3V9h4v4h3z"/>
+</vector>
Index: vksdk_library/src/main/java/com/vk/sdk/api/VKError.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/VKError.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/VKError.java	(revision )
@@ -0,0 +1,199 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api;
+
+import android.net.Uri;
+
+import com.vk.sdk.VKObject;
+import com.vk.sdk.util.VKJsonHelper;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.Map;
+
+/**
+ * Class for presenting VK SDK and VK API errors
+ */
+public class VKError extends VKObject {
+	public static final int VK_API_ERROR = -101;
+    public static final int VK_CANCELED = -102;
+    public static final int VK_REQUEST_NOT_PREPARED = -103;
+    public static final int VK_JSON_FAILED = -104;
+    public static final int VK_REQUEST_HTTP_FAILED = -105;
+
+    /**
+     * Contains system HTTP error
+     */
+    public Exception httpError;
+    /**
+     * Describes API error
+     */
+    public VKError apiError;
+    /**
+     * Request which caused error
+     */
+    public VKRequest request;
+    /**
+     * May contains such errors:<br/>
+     * <b>HTTP status code</b> if HTTP error occured;<br/>
+     * <b>VK_API_ERROR</b> if API error occured;<br/>
+     * <b>VK_API_CANCELED</b> if request was canceled;<br/>
+     * <b>VK_API_REQUEST_NOT_PREPARED</b> if error occured while preparing request;
+     */
+    public int errorCode;
+    /**
+     * API error message
+     */
+    public String errorMessage;
+    /**
+     * Reason for authorization fail
+     */
+    public String errorReason;
+    /**
+     * API parameters passed to request
+     */
+    public ArrayList<Map<String, String>> requestParams;
+    /**
+     * Captcha identifier for captcha-check
+     */
+    public String captchaSid;
+    /**
+     * Image for captcha-check
+     */
+    public String captchaImg;
+    /**
+     * Redirection address if validation check required
+     */
+    public String redirectUri;
+
+    /**
+     * Generate new error with code
+     *
+     * @param errorCode positive if it's an HTTP error. Negative if it's API or SDK error
+     */
+    public VKError(int errorCode) {
+        this.errorCode = errorCode;
+    }
+
+    /**
+     * Generate API error from JSON
+     *
+     * @param json Json description of VK API error
+     */
+    @SuppressWarnings("unchecked")
+	public VKError(JSONObject json) throws JSONException {
+        VKError internalError = new VKError(json.getInt(VKApiConst.ERROR_CODE));
+        internalError.errorMessage = json.getString(VKApiConst.ERROR_MSG);
+        internalError.requestParams = (ArrayList<Map<String, String>>) VKJsonHelper.toList(
+                json.getJSONArray(VKApiConst.REQUEST_PARAMS));
+        if (internalError.errorCode == 14) {
+            internalError.captchaImg = json.getString(VKApiConst.CAPTCHA_IMG);
+            internalError.captchaSid = json.getString(VKApiConst.CAPTCHA_SID);
+        }
+        if (internalError.errorCode == 17) {
+            internalError.redirectUri = json.getString(VKApiConst.REDIRECT_URI);
+        }
+
+        this.errorCode = VK_API_ERROR;
+        this.apiError = internalError;
+    }
+
+    private static final String FAIL = "fail";
+    private static final String ERROR_REASON = "error_reason";
+    private static final String ERROR_DESCRIPTION = "error_description";
+
+    /**
+     * Generate API error from HTTP-query
+     *
+     * @param queryParams key-value parameters
+     */
+    public VKError(Map<String, String> queryParams) {
+        this.errorCode = VK_API_ERROR;
+        this.errorReason = queryParams.get(ERROR_REASON);
+        this.errorMessage = Uri.decode(queryParams.get(ERROR_DESCRIPTION));
+        if (queryParams.containsKey(FAIL)) {
+            this.errorReason = "Action failed";
+        }
+        if (queryParams.containsKey("cancel")) {
+            this.errorCode   = VK_CANCELED;
+            this.errorReason = "User canceled request";
+        }
+    }
+
+    /**
+     * Repeats failed captcha request with user entered answer to captcha
+     *
+     * @param userEnteredCode answer for captcha
+     */
+    public void answerCaptcha(String userEnteredCode) {
+        VKParameters params = new VKParameters();
+        params.put(VKApiConst.CAPTCHA_SID, captchaSid);
+        params.put(VKApiConst.CAPTCHA_KEY, userEnteredCode);
+        request.addExtraParameters(params);
+        request.repeat();
+    }
+    public static VKError getRegisteredError(long requestId) {
+        return (VKError) getRegisteredObject(requestId);
+    }
+
+    private void appendFields(StringBuilder builder) {
+        if (errorReason != null)
+            builder.append(String.format("; %s", errorReason));
+        if (errorMessage != null)
+            builder.append(String.format("; %s", errorMessage));
+    }
+
+	@Override public String toString()
+	{
+		StringBuilder errorString = new StringBuilder("VKError (");
+		switch (this.errorCode) {
+			case VK_API_ERROR:
+				errorString.append("API error");
+                if (apiError != null) {
+                    errorString.append(apiError.toString());
+                }
+				break;
+			case VK_CANCELED:
+				errorString.append("Canceled");
+				break;
+			case VK_REQUEST_NOT_PREPARED:
+				errorString.append("Request wasn't prepared");
+				break;
+			case VK_JSON_FAILED:
+				errorString.append("JSON failed");
+
+				break;
+			case VK_REQUEST_HTTP_FAILED:
+				errorString.append("HTTP failed");
+				break;
+
+			default:
+				errorString.append(String.format("code: %d; ", errorCode));
+				break;
+		}
+        appendFields(errorString);
+		errorString.append(")");
+		return errorString.toString();
+	}
+}
\ No newline at end of file
Index: app/src/main/res/layout/card_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/card_item.xml	(revision )
+++ app/src/main/res/layout/card_item.xml	(revision )
@@ -0,0 +1,72 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:card_view="http://schemas.android.com/apk/res-auto"
+    android:orientation="vertical"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent">
+
+    <android.support.v7.widget.CardView
+        android:id="@+id/card_view"
+        android:layout_gravity="center"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content">
+        <RelativeLayout
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:background="#ffffff"
+            android:paddingBottom="8dp">
+
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:id="@+id/doc_name"
+                android:textSize="14sp"
+                android:textStyle="bold"
+                android:text="Microsoft.Msagl.hViewerGdi.dll"
+                android:layout_alignTop="@+id/doc_image"
+                android:layout_toRightOf="@+id/doc_image"
+                android:layout_toEndOf="@+id/doc_image"
+                android:layout_marginLeft="16dp" />
+
+
+
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="102 КБ, вчера в 22:19"
+                android:id="@+id/doc_info"
+                android:textSize="12sp"
+                android:layout_below="@+id/doc_name"
+                android:layout_marginTop="8dp"
+                android:layout_toRightOf="@+id/doc_image"
+                android:layout_toEndOf="@+id/doc_image"
+                android:layout_marginLeft="16dp" />
+
+            <ImageView
+                android:layout_width="75dp"
+                android:layout_height="50dp"
+                android:id="@+id/doc_image"
+                android:layout_alignParentTop="true"
+                android:layout_alignParentLeft="true"
+                android:layout_alignParentStart="true"
+                android:layout_marginLeft="16dp"
+                android:layout_marginTop="16dp" />
+
+            <TextView
+                android:layout_width="75dp"
+                android:layout_height="50dp"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:text="Small Text"
+                android:id="@+id/doc_text_image"
+                android:layout_alignTop="@+id/doc_image"
+                android:layout_alignLeft="@+id/doc_image"
+                android:layout_alignStart="@+id/doc_image"
+                android:gravity="center" />
+
+        </RelativeLayout>
+    </android.support.v7.widget.CardView>
+
+
+</RelativeLayout>
\ No newline at end of file
Index: .idea/runConfigurations.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/runConfigurations.xml	(revision )
+++ .idea/runConfigurations.xml	(revision )
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RunConfigurationProducerService">
+    <option name="ignoredProducers">
+      <set>
+        <option value="org.jetbrains.plugins.gradle.execution.test.runner.AllInPackageGradleConfigurationProducer" />
+        <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestClassGradleConfigurationProducer" />
+        <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestMethodGradleConfigurationProducer" />
+      </set>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: vksdk_library/src/main/res/values/dimen.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/values/dimen.xml	(revision )
+++ vksdk_library/src/main/res/values/dimen.xml	(revision )
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <dimen name="vk_share_dialog_padding">10dp</dimen>
+    <dimen name="vk_share_dialog_padding_top">6dp</dimen>
+    <dimen name="vk_share_settings_button_min_height">48dp</dimen>
+    <dimen name="vk_share_top_panel_height">48dp</dimen>
+    <dimen name="vk_share_top_line_margin">8dp</dimen>
+    <dimen name="vk_share_top_image_margin">6dp</dimen>
+    <dimen name="vk_share_top_title_margin">5dp</dimen>
+    <dimen name="vk_share_top_button_padding_left">1dp</dimen>
+    <dimen name="vk_share_top_button_padding_right">14dp</dimen>
+    <dimen name="vk_share_send_text_size">12sp</dimen>
+    <dimen name="vk_share_title_text_size">18sp</dimen>
+    <dimen name="vk_share_title_link_title_size">16sp</dimen>
+    <dimen name="vk_share_title_link_host_size">15sp</dimen>
+    <dimen name="vk_share_link_top_margin">2dp</dimen>
+    <dimen name="vk_share_dialog_view_padding">5dp</dimen>
+</resources>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiAudio.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiAudio.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiAudio.java	(revision )
@@ -0,0 +1,214 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * Audio.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 19.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.text.TextUtils;
+import org.json.JSONObject;
+import static com.vk.sdk.api.model.VKAttachments.*;
+
+/**
+ * An audio object describes an audio file and contains the following fields.
+ */
+@SuppressWarnings("unused")
+public class VKApiAudio extends VKApiAttachment implements Identifiable, android.os.Parcelable {
+
+    /**
+     * Audio ID.
+     */
+    public int id;
+
+    /**
+     * Audio owner ID.
+     */
+    public int owner_id;
+
+    /**
+     * Artist name.
+     */
+    public String artist;
+
+    /**
+     * Audio file title.
+     */
+    public String title;
+
+    /**
+     * Duration (in seconds).
+     */
+    public int duration;
+
+    /**
+     * Link to mp3.
+     */
+    public String url;
+
+    /**
+     * ID of the lyrics (if available) of the audio file.
+     */
+    public int lyrics_id;
+
+    /**
+     * ID of the album containing the audio file (if assigned).
+     */
+    public int album_id;
+
+    /**
+     * Genre ID. See the list of audio genres.
+     */
+    public int genre;
+
+    /**
+     * An access key using for get information about hidden objects.
+     */
+    public String access_key;
+
+	public VKApiAudio(JSONObject from) {
+		parse(from);
+	}
+    /**
+     * Fills an Audio instance from JSONObject.
+     */
+    public VKApiAudio parse(JSONObject from) {
+        id = from.optInt("id");
+        owner_id = from.optInt("owner_id");
+        artist = from.optString("artist");
+        title = from.optString("title");
+        duration = from.optInt("duration");
+        url = from.optString("url");
+        lyrics_id = from.optInt("lyrics_id");
+        album_id = from.optInt("album_id");
+        genre = from.optInt("genre_id");
+        access_key = from.optString("access_key");
+        return this;
+    }
+
+    /**
+     * Creates an Audio instance from Parcel.
+     */
+    public VKApiAudio(Parcel in) {
+        this.id = in.readInt();
+        this.owner_id = in.readInt();
+        this.artist = in.readString();
+        this.title = in.readString();
+        this.duration = in.readInt();
+        this.url = in.readString();
+        this.lyrics_id = in.readInt();
+        this.album_id = in.readInt();
+        this.genre = in.readInt();
+        this.access_key = in.readString();
+    }
+
+    /**
+     * Creates empty Audio instance.
+     */
+    public VKApiAudio() {
+
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public CharSequence toAttachmentString() {
+        StringBuilder result = new StringBuilder(TYPE_AUDIO).append(owner_id).append('_').append(id);
+        if(!TextUtils.isEmpty(access_key)) {
+            result.append('_');
+            result.append(access_key);
+        }
+        return result;
+    }
+
+    @Override
+    public String getType() {
+        return TYPE_AUDIO;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeInt(this.owner_id);
+        dest.writeString(this.artist);
+        dest.writeString(this.title);
+        dest.writeInt(this.duration);
+        dest.writeString(this.url);
+        dest.writeInt(this.lyrics_id);
+        dest.writeInt(this.album_id);
+        dest.writeInt(this.genre);
+        dest.writeString(this.access_key);
+    }
+
+    public static Creator<VKApiAudio> CREATOR = new Creator<VKApiAudio>() {
+        public VKApiAudio createFromParcel(Parcel source) {
+            return new VKApiAudio(source);
+        }
+
+        public VKApiAudio[] newArray(int size) {
+            return new VKApiAudio[size];
+        }
+    };
+
+    /**
+     * Audio object genres.
+     */
+    public final static class Genre {
+
+        private Genre() {}
+
+        public final static int ROCK = 1;
+        public final static int POP = 2;
+        public final static int RAP_AND_HIPHOP = 3;
+        public final static int EASY_LISTENING = 4;
+        public final static int DANCE_AND_HOUSE = 5;
+        public final static int INSTRUMENTAL = 6;
+        public final static int METAL = 7;
+        public final static int DUBSTEP = 8;
+        public final static int JAZZ_AND_BLUES = 9;
+        public final static int DRUM_AND_BASS = 10;
+        public final static int  TRANCE = 11;
+        public final static int CHANSON = 12;
+        public final static int ETHNIC = 13;
+        public final static int ACOUSTIC_AND_VOCAL = 14;
+        public final static int REGGAE = 15;
+        public final static int CLASSICAL = 16;
+        public final static int INDIE_POP = 17;
+        public final static int OTHER = 18;
+        public final static int SPEECH = 19;
+        public final static int ALTERNATIVE = 21;
+        public final static int ELECTROPOP_AND_DISCO = 22;
+    }
+
+}
Index: app/src/main/res/drawable/side_nav_bar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/side_nav_bar.xml	(revision )
+++ app/src/main/res/drawable/side_nav_bar.xml	(revision )
@@ -0,0 +1,9 @@
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <gradient
+        android:angle="135"
+        android:centerColor="#4CAF50"
+        android:endColor="#2E7D32"
+        android:startColor="#81C784"
+        android:type="linear" />
+</shape>
\ No newline at end of file
Index: app/src/main/res/values/button.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/button.xml	(revision )
+++ app/src/main/res/values/button.xml	(revision )
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources></resources>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKScopes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKScopes.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKScopes.java	(revision )
@@ -0,0 +1,166 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import java.util.ArrayList;
+
+/**
+ * Application Access Permissions
+ * @see <a href="http://vk.com/dev/permissions">http://vk.com/dev/permissions</a>
+ */
+@SuppressWarnings("unused")
+public class VKScopes {
+
+    private VKScopes() {}
+
+    /**
+     * User allowed to send notifications to him/her.
+     */
+    public final static String NOTIFY = "notify";
+    
+    /**
+     * Access to friends.
+     */
+    public final static String FRIENDS = "friends";
+    
+    /**
+     * Access to photos.
+     */
+    public final static String PHOTOS = "photos";  
+    
+    /**
+     * Access to audios.
+     */
+    public final static String AUDIO = "audio";
+    
+    /**
+     * Access to videos.
+     */
+    public final static String VIDEO = "video"; 
+    
+    /**
+     * Access to documents.
+     */
+    public final static String DOCS = "docs";
+    
+    /**
+     * Access to user notes.
+     */
+    public final static String NOTES = "notes";
+    
+    /**
+     * Access to wiki pages.
+     */
+    public final static String PAGES = "pages";
+    
+    /**
+     * Access to user status.
+     */
+    public final static String STATUS = "status";
+    
+    /**
+     * Access to offers (obsolete methods).
+     * @deprecated
+     */
+    public final static String OFFERS = "offers";
+    
+    /**
+     * Access to questions (obsolete methods).
+     * @deprecated
+     */
+
+    public final static String QUESTIONS = "questions";
+    
+    /**
+     * Access to standard and advanced methods for the wall.
+     */
+    public final static String WALL = "wall";
+    
+    /**
+     * Access to user groups.
+     */
+    public final static String GROUPS = "groups";
+    
+    /**
+     * Access to advanced methods for messaging.
+     */
+    public final static String MESSAGES = "messages";
+    
+    /**
+     * Access to notifications about answers to the user.
+     */
+    public final static String NOTIFICATIONS = "notifications";
+    
+    /**
+     * Access to statistics of user groups and applications where he/she is an administrator.
+     */
+    public final static String STATS = "stats";
+    
+    /**
+     * Access to advanced methods for <a href="http://vk.com/dev/ads">Ads API</a>.
+     */
+    public final static String ADS = "ads";
+    
+    /**
+     * Access to API at any time from a third party server.
+     */
+    public final static String OFFLINE = "offline"; 
+    
+    /**
+     * Possibility to make API requests without HTTPS. <br />
+     * <b>Note that this functionality is under testing and can be changed.</b>
+     */
+    public final static String NOHTTPS = "nohttps";
+
+	/**
+	 * Access to user email (if available/allowed by user)
+	 */
+	public static final String EMAIL = "email";
+
+    /**
+     * Converts integer value of permissions into arraylist of constants
+     * @param permissions integer permissions value
+     * @return ArrayList contains string constants of permissions (scope)
+     */
+    public static ArrayList<String> parse(int permissions) {
+        ArrayList<String> result = new ArrayList<String>();
+        if ((permissions & 1) > 0) result.add(NOTIFY);
+        if ((permissions & 2) > 0) result.add(FRIENDS);
+        if ((permissions & 4) > 0) result.add(PHOTOS);
+        if ((permissions & 8) > 0) result.add(AUDIO);
+        if ((permissions & 16) > 0) result.add(VIDEO);
+        if ((permissions & 128) > 0) result.add(PAGES);
+        if ((permissions & 1024) > 0) result.add(STATUS);
+        if ((permissions & 2048) > 0) result.add(NOTES);
+        if ((permissions & 4096) > 0) result.add(MESSAGES);
+        if ((permissions & 8192) > 0) result.add(WALL);
+        if ((permissions & 32768) > 0) result.add(ADS);
+        if ((permissions & 65536) > 0) result.add(OFFLINE);
+        if ((permissions & 131072) > 0) result.add(DOCS);
+        if ((permissions & 262144) > 0) result.add(GROUPS);
+        if ((permissions & 524288) > 0) result.add(NOTIFICATIONS);
+        if ((permissions & 1048576) > 0) result.add(STATS);
+		if ((permissions & 4194304) > 0) result.add(EMAIL);
+        return result;
+    }
+    
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/VKRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/VKRequest.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/VKRequest.java	(revision )
@@ -0,0 +1,681 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.vk.sdk.VKAccessToken;
+import com.vk.sdk.VKObject;
+import com.vk.sdk.VKSdk;
+import com.vk.sdk.VKServiceActivity;
+import com.vk.sdk.VKUIHelper;
+import com.vk.sdk.api.httpClient.VKAbstractOperation;
+import com.vk.sdk.api.httpClient.VKHttpClient;
+import com.vk.sdk.api.httpClient.VKHttpOperation;
+import com.vk.sdk.api.httpClient.VKJsonOperation;
+import com.vk.sdk.api.httpClient.VKModelOperation;
+import com.vk.sdk.api.model.VKApiModel;
+import com.vk.sdk.util.VKStringJoiner;
+import com.vk.sdk.util.VKUtil;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Locale;
+
+/**
+ * Class for execution API-requests.
+ */
+public class VKRequest extends VKObject {
+
+
+    public enum VKProgressType {
+        Download,
+        Upload
+    }
+
+    @Deprecated
+    public enum HttpMethod {
+        GET,
+        POST
+    }
+
+    public final Context context;
+
+    /**
+     * Selected method name
+     */
+    public final String methodName;
+
+    /**
+     * Passed parameters for method
+     */
+    private final VKParameters mMethodParameters;
+
+    /**
+     * Method parametes with common parameters
+     */
+    private VKParameters mPreparedParameters;
+
+    /**
+     * HTTP loading operation
+     */
+    private VKAbstractOperation mLoadingOperation;
+
+    /**
+     * How much times request was loaded
+     */
+    private int mAttemptsUsed;
+
+    /**
+     * Requests that should be called after current request.
+     */
+    private ArrayList<VKRequest> mPostRequestsQueue;
+
+    /**
+     * Class for model parsing
+     */
+    private Class<? extends VKApiModel> mModelClass;
+
+    /**
+     * Response parser
+     */
+    private VKParser mModelParser;
+
+    /**
+     * Specify language for API request
+     */
+    private String mPreferredLang;
+
+    private boolean mUseLooperForCallListener = true;
+    /**
+     * Looper which starts request
+     */
+    private Looper mLooper;
+
+    /**
+     * Specify listener for current request
+     */
+    @Nullable
+    public VKRequestListener requestListener;
+
+    /**
+     * Specify if this request should present an activity for processing errors, which required user interaction.
+     */
+    public boolean shouldInterruptUI;
+
+    /**
+     * Specify attempts for request loading if caused HTTP-error. 0 for infinite
+     */
+    public int attempts;
+
+    /**
+     * Use HTTPS requests (by default is YES). If http-request is impossible (user denied no https access), SDK will load https version
+     */
+    public boolean secure;
+
+    /**
+     * Sets current system language as default for API data
+     */
+    public boolean useSystemLanguage;
+
+    /**
+     * Set to false if you don't need automatic model parsing
+     */
+    public boolean parseModel;
+
+    /**
+     * Response for this request
+     */
+    public WeakReference<VKResponse> response;
+
+    /**
+     * @return Returns list of method parameters (without common parameters)
+     */
+    public VKParameters getMethodParameters() {
+        return mMethodParameters;
+    }
+
+    /**
+     * Creates new request with parameters. See documentation for methods here https://vk.com/dev/methods
+     *
+     * @param method API-method name, e.g. audio.get
+     */
+    public VKRequest(String method) {
+        this(method, null);
+    }
+
+    /**
+     * Creates new request with parameters. See documentation for methods here https://vk.com/dev/methods
+     *
+     * @param method     API-method name, e.g. audio.get
+     * @param parameters method parameters
+     */
+    public VKRequest(String method, VKParameters parameters) {
+        this(method, parameters, null);
+    }
+
+    @Deprecated
+    public VKRequest(String method, VKParameters parameters, HttpMethod httpMethod,
+                     Class<? extends VKApiModel> modelClass) {
+        this(method, parameters, modelClass);
+    }
+
+    /**
+     * Creates new request with parameters. See documentation for methods here https://vk.com/dev/methods
+     *
+     * @param method     API-method name, e.g. audio.get
+     * @param parameters method parameters
+     * @param modelClass class for automatic parse
+     */
+    public VKRequest(String method, VKParameters parameters, Class<? extends VKApiModel> modelClass) {
+        this.context = VKUIHelper.getApplicationContext();
+
+        this.methodName = method;
+        if (parameters == null) {
+            parameters = new VKParameters();
+        }
+        this.mMethodParameters = new VKParameters(parameters);
+        this.mAttemptsUsed = 0;
+
+        this.secure = true;
+        //By default there is 1 attempt for loading.
+        this.attempts = 1;
+
+        //If system language is not supported, we use english
+        this.mPreferredLang = "en";
+        //By default we use system language.
+        this.useSystemLanguage = true;
+
+        this.shouldInterruptUI = true;
+
+        setModelClass(modelClass);
+    }
+
+    public void setUseLooperForCallListener(boolean useLooperForCallListener) {
+        this.mUseLooperForCallListener = useLooperForCallListener;
+    }
+
+    /**
+     * Executes that request, and returns result to blocks
+     *
+     * @param listener listener for request events
+     */
+    public void executeWithListener(VKRequestListener listener) {
+        this.requestListener = listener;
+        start();
+    }
+
+    /**
+     * Executes that request, and returns result to blocks
+     *
+     * @param listener listener for request events
+     */
+    public void executeSyncWithListener(VKRequestListener listener) {
+        VKSyncRequestUtil.executeSyncWithListener(this, listener);
+    }
+
+    public void setRequestListener(@Nullable VKRequestListener listener) {
+        this.requestListener = listener;
+    }
+
+    /**
+     * Register current request for execute after passed request, if passed request is successful. If it's not, errorBlock will be called.
+     *
+     * @param request  after which request must be called that request
+     * @param listener listener for request events
+     */
+    public void executeAfterRequest(VKRequest request, VKRequestListener listener) {
+        this.requestListener = listener;
+        request.addPostRequest(this);
+    }
+
+    private void addPostRequest(VKRequest postRequest) {
+        if (mPostRequestsQueue == null) {
+            mPostRequestsQueue = new ArrayList<>();
+        }
+        mPostRequestsQueue.add(postRequest);
+    }
+
+    public VKParameters getPreparedParameters() {
+        if (mPreparedParameters == null) {
+            mPreparedParameters = new VKParameters(mMethodParameters);
+
+            //Set current access token from SDK object
+            VKAccessToken token = VKAccessToken.currentToken();
+            if (token != null) {
+                mPreparedParameters.put(VKApiConst.ACCESS_TOKEN, token.accessToken);
+                if (token.httpsRequired) {
+                    this.secure = true;
+                }
+            }
+            //Set actual version of API
+            mPreparedParameters.put(VKApiConst.VERSION, VKSdk.getApiVersion());
+            //Set preferred language for request
+            mPreparedParameters.put(VKApiConst.LANG, getLang());
+
+            if (this.secure) {
+                //If request is secure, we need all urls as https
+                mPreparedParameters.put(VKApiConst.HTTPS, "1");
+            }
+            if (token != null && token.secret != null) {
+                //If it not, generate signature of request
+                String sig = generateSig(token);
+                mPreparedParameters.put(VKApiConst.SIG, sig);
+            }
+            //From that moment you cannot modify parameters.
+            //Specially for http loading
+        }
+        return mPreparedParameters;
+    }
+
+    /**
+     * Prepares request for loading
+     *
+     * @return Prepared HttpUriRequest for that VKRequest
+     */
+    public VKHttpClient.VKHTTPRequest getPreparedRequest() {
+        VKHttpClient.VKHTTPRequest request = VKHttpClient.requestWithVkRequest(this);
+        if (request == null) {
+            VKError error = new VKError(VKError.VK_REQUEST_NOT_PREPARED);
+            provideError(error);
+            return null;
+        }
+        return request;
+    }
+
+    VKAbstractOperation getOperation() {
+        if (this.parseModel) {
+            if (this.mModelClass != null) {
+                mLoadingOperation = new VKModelOperation(getPreparedRequest(), this.mModelClass);
+            } else if (this.mModelParser != null) {
+                mLoadingOperation = new VKModelOperation(getPreparedRequest(), this.mModelParser);
+            }
+        }
+        if (mLoadingOperation == null) {
+            mLoadingOperation = new VKJsonOperation(getPreparedRequest());
+        }
+        if (mLoadingOperation instanceof VKHttpOperation) {
+            ((VKHttpOperation) mLoadingOperation).setHttpOperationListener(getHttpListener());
+        }
+        return mLoadingOperation;
+    }
+
+    private VKJsonOperation.VKJSONOperationCompleteListener getHttpListener() {
+        return new VKJsonOperation.VKJSONOperationCompleteListener() {
+            @Override
+            public void onComplete(VKJsonOperation operation, JSONObject response) {
+                if (response.has("error")) {
+                    try {
+                        VKError error = new VKError(response.getJSONObject("error"));
+                        if (VKSdk.DEBUG && VKSdk.DEBUG_API_ERRORS) {
+                            Log.w(VKSdk.SDK_TAG, operation.getResponseString());
+                        }
+                        if (processCommonError(error)) {
+                            return;
+                        }
+                        provideError(error);
+                    } catch (JSONException e) {
+                        if (VKSdk.DEBUG)
+                            e.printStackTrace();
+                    }
+
+                    return;
+                }
+                provideResponse(response,
+                        mLoadingOperation instanceof VKModelOperation
+                                ? ((VKModelOperation) mLoadingOperation).parsedModel
+                                : null);
+            }
+
+            @Override
+            public void onError(VKJsonOperation operation, VKError error) {
+                //Хак для проверки того, что корректно распарсился ответ при заливке картинок
+                if (error.errorCode != VKError.VK_CANCELED &&
+                        error.errorCode != VKError.VK_API_ERROR &&
+                        operation != null && operation.response != null &&
+                        operation.response.statusCode == 200) {
+                    provideResponse(operation.getResponseJson(), null);
+                    return;
+                }
+                if (VKSdk.DEBUG && VKSdk.DEBUG_API_ERRORS &&
+                        operation != null && operation.getResponseString() != null) {
+                    Log.w(VKSdk.SDK_TAG, operation.getResponseString());
+                }
+                if (attempts == 0 || ++mAttemptsUsed < attempts) {
+                    if (requestListener != null)
+                        requestListener.attemptFailed(VKRequest.this, mAttemptsUsed, attempts);
+                    runOnLooper(new Runnable() {
+                        @Override
+                        public void run() {
+                            start();
+                        }
+                    }, 300);
+                    return;
+                }
+                provideError(error);
+            }
+        };
+    }
+
+    /**
+     * Starts loading of prepared request. You can use it instead of executeWithResultBlock
+     */
+    public void start() {
+        if ((mLoadingOperation = getOperation()) == null) {
+            return;
+        }
+        if (mLooper == null) {
+            mLooper = Looper.myLooper();
+        }
+        VKHttpClient.enqueueOperation(mLoadingOperation);
+    }
+
+    /**
+     * Repeats this request with initial parameters and blocks.
+     * Used attempts will be set to 0.
+     */
+    public void repeat() {
+        this.mAttemptsUsed = 0;
+        this.mPreparedParameters = null;
+        this.mLoadingOperation = null;
+        start();
+    }
+
+    /**
+     * Cancel current request. Result will be not passed. errorBlock will be called with error code
+     */
+    public void cancel() {
+        if (mLoadingOperation != null) {
+            mLoadingOperation.cancel();
+        } else {
+            provideError(new VKError(VKError.VK_CANCELED));
+        }
+    }
+
+    /**
+     * Method used for errors processing
+     *
+     * @param error error caused by this request
+     */
+    private void provideError(final VKError error) {
+        error.request = this;
+
+        final boolean useLooperForCallListener = mUseLooperForCallListener;
+
+        if (!useLooperForCallListener && requestListener != null) {
+            requestListener.onError(error);
+        }
+
+        runOnLooper(new Runnable() {
+            @Override
+            public void run() {
+                if (useLooperForCallListener && requestListener != null) {
+                    requestListener.onError(error);
+                }
+                if (mPostRequestsQueue != null && mPostRequestsQueue.size() > 0) {
+                    for (VKRequest postRequest : mPostRequestsQueue)
+                        if (postRequest.requestListener != null)
+                            postRequest.requestListener.onError(error);
+                }
+            }
+        });
+
+    }
+
+    /**
+     * Method used for response processing
+     *
+     * @param jsonResponse response from API
+     * @param parsedModel  model parsed from json
+     */
+    private void provideResponse(final JSONObject jsonResponse, Object parsedModel) {
+        final VKResponse response = new VKResponse();
+        response.request = this;
+        response.json = jsonResponse;
+        response.parsedModel = parsedModel;
+
+        this.response = new WeakReference<>(response);
+        if (mLoadingOperation instanceof VKHttpOperation) {
+            response.responseString = ((VKHttpOperation) mLoadingOperation).getResponseString();
+        }
+
+        final boolean useLooperForCallListener = mUseLooperForCallListener;
+
+        runOnLooper(new Runnable() {
+            @Override
+            public void run() {
+                if (mPostRequestsQueue != null && mPostRequestsQueue.size() > 0) {
+                    for (final VKRequest request : mPostRequestsQueue) {
+                        request.start();
+                    }
+                }
+
+                if (useLooperForCallListener && requestListener != null) {
+                    requestListener.onComplete(response);
+                }
+            }
+        });
+
+        if (!useLooperForCallListener && requestListener != null) {
+            requestListener.onComplete(response);
+        }
+    }
+
+    /**
+     * Adds additional parameter to that request
+     *
+     * @param key   parameter name
+     * @param value parameter value
+     */
+    public void addExtraParameter(String key, Object value) {
+        mMethodParameters.put(key, value);
+    }
+
+    /**
+     * Adds additional parameters to that request
+     *
+     * @param extraParameters parameters supposed to be added
+     */
+    public void addExtraParameters(VKParameters extraParameters) {
+        mMethodParameters.putAll(extraParameters);
+    }
+
+    private String generateSig(VKAccessToken token) {
+        //Read description here https://vk.com/dev/api_nohttps
+        //At first, we need key-value pairs in order of request
+        String queryString = VKStringJoiner.joinParams(mPreparedParameters);
+        //Then we generate "request string" /method/{METHOD_NAME}?{GET_PARAMS}{POST_PARAMS}
+        queryString = String.format(Locale.US, "/method/%s?%s", methodName, queryString);
+        return VKUtil.md5(queryString + token.secret);
+
+    }
+
+    private boolean processCommonError(final VKError error) {
+        //TODO: lock thread, if ui required, release then
+        if (error.errorCode == VKError.VK_API_ERROR) {
+            final VKError apiError = error.apiError;
+
+            VKSdk.notifySdkAboutApiError(apiError);
+
+            if (apiError.errorCode == 16) {
+                VKAccessToken token = VKAccessToken.currentToken();
+                if (token != null) {
+                    token.httpsRequired = true;
+                    token.save();
+                }
+                repeat();
+
+                return true;
+            } else if (shouldInterruptUI) {
+                apiError.request = this;
+                if (error.apiError.errorCode == 14) {
+                    this.mLoadingOperation = null;
+                    VKServiceActivity.interruptWithError(context, apiError, VKServiceActivity.VKServiceType.Captcha);
+                    return true;
+                } else if (apiError.errorCode == 17) {
+                    VKServiceActivity.interruptWithError(context, apiError, VKServiceActivity.VKServiceType.Validation);
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    private String getLang() {
+        String result = mPreferredLang;
+        Resources res = Resources.getSystem();
+        if (useSystemLanguage && res != null) {
+            result = res.getConfiguration().locale.getLanguage();
+            if (result.equals("uk")) {
+                result = "ua";
+            }
+
+            if (!Arrays.asList(new String[]{"ru", "en", "ua", "es", "fi", "de", "it"})
+                    .contains(result)) {
+                result = mPreferredLang;
+            }
+        }
+        return result;
+    }
+
+    /**
+     * Sets preferred language for api results.
+     *
+     * @param lang Two letter language code. May be "ru", "en", "ua", "es", "fi", "de", "it"
+     */
+    public void setPreferredLang(String lang) {
+        useSystemLanguage = false;
+        mPreferredLang = lang;
+    }
+
+    /**
+     * Sets class for parse object model
+     *
+     * @param modelClass Class extends VKApiModel
+     */
+    public void setModelClass(Class<? extends VKApiModel> modelClass) {
+        mModelClass = modelClass;
+        if (mModelClass != null)
+            parseModel = true;
+    }
+
+    /**
+     * Specify parser for response json, which creates data model
+     *
+     * @param parser
+     */
+    public void setResponseParser(VKParser parser) {
+        mModelParser = parser;
+        if (mModelParser != null) {
+            parseModel = true;
+        }
+    }
+
+    private void runOnLooper(Runnable block) {
+        runOnLooper(block, 0);
+    }
+
+    private void runOnLooper(Runnable block, int delay) {
+        if (mLooper == null) {
+            mLooper = Looper.getMainLooper();
+        }
+        if (delay > 0) {
+            new Handler(mLooper).postDelayed(block, delay);
+        } else {
+            new Handler(mLooper).post(block);
+        }
+    }
+
+    private void runOnMainLooper(Runnable block) {
+
+        new Handler(Looper.getMainLooper()).post(block);
+    }
+
+    /**
+     * Extend listeners for requests from that class
+     * Created by Roman Truba on 02.12.13.
+     * Copyright (c) 2013 VK. All rights reserved.
+     */
+    public static abstract class VKRequestListener {
+        /**
+         * Called if there were no HTTP or API errors, returns execution result.
+         *
+         * @param response response from VKRequest
+         */
+        public void onComplete(VKResponse response) {
+        }
+
+        /**
+         * Called when request has failed attempt, and ready to do next attempt
+         *
+         * @param request       Failed request
+         * @param attemptNumber Number of failed attempt, started from 1
+         * @param totalAttempts Total request attempts defined for request
+         */
+        public void attemptFailed(VKRequest request, int attemptNumber, int totalAttempts) {
+        }
+
+        /**
+         * Called immediately if there was API error, or after <b>attempts</b> tries if there was an HTTP error
+         *
+         * @param error error for VKRequest
+         */
+        public void onError(VKError error) {
+        }
+
+        /**
+         * Specify progress for uploading or downloading. Useless for text requests (because gzip encoding bytesTotal will always return -1)
+         *
+         * @param progressType type of progress (upload or download)
+         * @param bytesLoaded  total bytes loaded
+         * @param bytesTotal   total bytes suppose to be loaded
+         */
+        public void onProgress(VKProgressType progressType, long bytesLoaded, long bytesTotal) {
+        }
+    }
+
+    public static VKRequest getRegisteredRequest(long requestId) {
+        return (VKRequest) getRegisteredObject(requestId);
+    }
+
+    @Override
+    public String toString() {
+        StringBuilder builder = new StringBuilder(super.toString());
+        builder.append("{").append(methodName).append(" ");
+        VKParameters parameters = getMethodParameters();
+        for (String key : parameters.keySet()) {
+            builder.append(key).append("=").append(parameters.get(key)).append(" ");
+        }
+        builder.append("}");
+        return  builder.toString();
+    }
+}
\ No newline at end of file
Index: app/src/main/res/drawable-v21/ic_search_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_search_black_24dp.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_search_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M15.5,14h-0.79l-0.28,-0.27C15.41,12.59 16,11.11 16,9.5 16,5.91 13.09,3 9.5,3S3,5.91 3,9.5 5.91,16 9.5,16c1.61,0 3.09,-0.59 4.23,-1.57l0.27,0.28v0.79l5,4.99L20.49,19l-4.99,-5zM9.5,14C7.01,14 5,11.99 5,9.5S7.01,5 9.5,5 14,7.01 14,9.5 11.99,14 9.5,14z"/>
+</vector>
Index: vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiWall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiWall.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiWall.java	(revision )
@@ -0,0 +1,110 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.methods;
+
+import com.vk.sdk.api.VKApiConst;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.model.VKCommentArray;
+import com.vk.sdk.api.model.VKPostArray;
+import com.vk.sdk.api.model.VKWallPostResult;
+
+/**
+ * Builds requests for API.wall part
+ */
+public class VKApiWall extends VKApiBase {
+    public static final String EXTENDED = VKApiConst.EXTENDED;
+
+    public VKRequest get(VKParameters params) {
+        if (params.containsKey(EXTENDED) && (Integer) (params.get(EXTENDED)) == 1) {
+            return prepareRequest("get", params, VKPostArray.class);
+        } else {
+            return prepareRequest("get", params);
+        }
+    }
+
+    public VKRequest getById(VKParameters params) {
+        return prepareRequest("getById", params, VKPostArray.class);
+    }
+
+    public VKRequest savePost(VKParameters params) {
+        return prepareRequest("savePost", params);
+    }
+
+
+    public VKRequest post(VKParameters parameters) {
+        return prepareRequest("post", parameters, VKWallPostResult.class);
+    }
+
+    public VKRequest repost(VKParameters params) {
+        return prepareRequest("repost", params);
+    }
+
+    public VKRequest getReposts(VKParameters params) {
+        return prepareRequest("getReposts", params);
+    }
+
+    public VKRequest edit(VKParameters params) {
+        return prepareRequest("edit", params);
+    }
+
+    public VKRequest delete(VKParameters params) {
+        return prepareRequest("delete", params);
+    }
+
+    public VKRequest restore(VKParameters params) {
+        return prepareRequest("restore", params);
+    }
+
+    public VKRequest getComments(VKParameters params) {
+        return prepareRequest("getComments", params, VKCommentArray.class);
+    }
+
+    public VKRequest addComment(VKParameters params) {
+        return prepareRequest("addComment", params);
+    }
+
+    public VKRequest editComment(VKParameters params) {
+        return prepareRequest("editComment", params);
+    }
+
+    public VKRequest deleteComment(VKParameters params) {
+        return prepareRequest("deleteComment", params);
+    }
+
+    public VKRequest restoreComment(VKParameters params) {
+        return prepareRequest("restoreComment", params);
+    }
+
+    public VKRequest reportPost(VKParameters params) {
+        return prepareRequest("reportPost", params);
+    }
+
+    public VKRequest reportComment(VKParameters params) {
+        return prepareRequest("reportComment", params);
+    }
+
+    @Override
+    protected String getMethodsGroup() {
+        return "wall";
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPost.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPost.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPost.java	(revision )
@@ -0,0 +1,277 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * Post.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 19.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * A post object describes a wall post.
+ */
+@SuppressWarnings("unused")
+public class VKApiPost extends VKAttachments.VKApiAttachment implements Identifiable, android.os.Parcelable {
+
+    /**
+     * Post ID on the wall, positive number
+     */
+    public int id;
+
+    /**
+     * Wall owner ID.
+     */
+    public int to_id;
+
+    /**
+     * ID of the user who posted.
+     */
+    public int from_id;
+
+    /**
+     * Date (in Unix time) the post was added.
+     */
+    public long date;
+
+    /**
+     * Text of the post.
+     */
+    public String text;
+
+    /**
+     * ID of the wall owner the post to which the reply is addressed (if the post is a reply to another wall post).
+     */
+    public int reply_owner_id;
+
+    /**
+     * ID of the wall post to which the reply is addressed (if the post is a reply to another wall post).
+     */
+    public int reply_post_id;
+
+    /**
+     * True, if the post was created with "Friends only" option.
+     */
+    public boolean friends_only;
+
+    /**
+     * Number of comments.
+     */
+    public int comments_count;
+
+    /**
+     * Whether the current user can leave comments to the post (false — cannot, true — can)
+     */
+    public boolean can_post_comment;
+
+    /**
+     * Number of users who liked the post.
+     */
+    public int likes_count;
+
+    /**
+     * Whether the user liked the post (false — not liked, true — liked)
+     */
+    public boolean user_likes;
+
+    /**
+     * Whether the user can like the post (false — cannot, true — can).
+     */
+    public boolean can_like;
+
+    /**
+     * Whether the user can repost (false — cannot, true — can).
+     */
+    public boolean can_publish;
+
+    /**
+     * Number of users who copied the post.
+     */
+    public int reposts_count;
+
+    /**
+     * Whether the user reposted the post (false — not reposted, true — reposted).
+     */
+    public boolean user_reposted;
+
+    /**
+     * Type of the post, can be: post, copy, reply, postpone, suggest.
+     */
+    public String post_type;
+
+    /**
+     * Information about attachments to the post (photos, links, etc.), if any;
+     */
+    public VKAttachments attachments = new VKAttachments();
+
+    /**
+     * Information about location.
+     */
+    public VKApiPlace geo;
+
+    /**
+     * ID of the author (if the post was published by a community and signed by a user).
+     */
+    public int signer_id;
+
+    /**
+     * List of history of the reposts.
+     */
+    public VKList<VKApiPost> copy_history;
+
+	public VKApiPost(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills a Post instance from JSONObject.
+     */
+    public VKApiPost parse(JSONObject source) throws JSONException {
+        id = source.optInt("id");
+        to_id = source.optInt("to_id");
+        from_id = source.optInt("from_id");
+        date = source.optLong("date");
+        text = source.optString("text");
+        reply_owner_id = source.optInt("reply_owner_id");
+        reply_post_id = source.optInt("reply_post_id");
+        friends_only = ParseUtils.parseBoolean(source, "friends_only");
+        JSONObject comments = source.optJSONObject("comments");
+        if(comments != null) {
+            comments_count = comments.optInt("count");
+            can_post_comment = ParseUtils.parseBoolean(comments, "can_post");
+        }
+        JSONObject likes = source.optJSONObject("likes");
+        if(likes != null) {
+            likes_count = likes.optInt("count");
+            user_likes = ParseUtils.parseBoolean(likes, "user_likes");
+            can_like = ParseUtils.parseBoolean(likes, "can_like");
+            can_publish = ParseUtils.parseBoolean(likes, "can_publish");
+        }
+        JSONObject reposts = source.optJSONObject("reposts");
+        if(reposts != null) {
+            reposts_count = reposts.optInt("count");
+            user_reposted = ParseUtils.parseBoolean(reposts, "user_reposted");
+        }
+        post_type = source.optString("post_type");
+        attachments.fill(source.optJSONArray("attachments"));
+        JSONObject geo = source.optJSONObject("geo");
+        if(geo != null) {
+            this.geo = new VKApiPlace().parse(geo);
+        }
+        signer_id = source.optInt("signer_id");
+        copy_history = new VKList<VKApiPost>(source.optJSONArray("copy_history"), VKApiPost.class);
+        return this;
+    }
+
+    /**
+     * Creates a Post instance from Parcel.
+     */
+    public VKApiPost(Parcel in) {
+        this.id = in.readInt();
+        this.to_id = in.readInt();
+        this.from_id = in.readInt();
+        this.date = in.readLong();
+        this.text = in.readString();
+        this.reply_owner_id = in.readInt();
+        this.reply_post_id = in.readInt();
+        this.friends_only = in.readByte() != 0;
+        this.comments_count = in.readInt();
+        this.can_post_comment = in.readByte() != 0;
+        this.likes_count = in.readInt();
+        this.user_likes = in.readByte() != 0;
+        this.can_like = in.readByte() != 0;
+        this.can_publish = in.readByte() != 0;
+        this.reposts_count = in.readInt();
+        this.user_reposted = in.readByte() != 0;
+        this.post_type = in.readString();
+        this.attachments = in.readParcelable(VKAttachments.class.getClassLoader());
+        this.geo = in.readParcelable(VKApiPlace.class.getClassLoader());
+        this.signer_id = in.readInt();
+    }
+
+    /**
+     * Creates empty Post instance.
+     */
+    public VKApiPost() {
+
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public CharSequence toAttachmentString() {
+        return new StringBuilder(VKAttachments.TYPE_POST).append(to_id).append('_').append(id);
+    }
+
+    @Override
+    public String getType() {
+        return VKAttachments.TYPE_POST;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeInt(this.to_id);
+        dest.writeInt(this.from_id);
+        dest.writeLong(this.date);
+        dest.writeString(this.text);
+        dest.writeInt(this.reply_owner_id);
+        dest.writeInt(this.reply_post_id);
+        dest.writeByte(friends_only ? (byte) 1 : (byte) 0);
+        dest.writeInt(this.comments_count);
+        dest.writeByte(can_post_comment ? (byte) 1 : (byte) 0);
+        dest.writeInt(this.likes_count);
+        dest.writeByte(user_likes ? (byte) 1 : (byte) 0);
+        dest.writeByte(can_like ? (byte) 1 : (byte) 0);
+        dest.writeByte(can_publish ? (byte) 1 : (byte) 0);
+        dest.writeInt(this.reposts_count);
+        dest.writeByte(user_reposted ? (byte) 1 : (byte) 0);
+        dest.writeString(this.post_type);
+        dest.writeParcelable(attachments, flags);
+        dest.writeParcelable(this.geo, flags);
+        dest.writeInt(this.signer_id);
+    }
+
+    public static Creator<VKApiPost> CREATOR = new Creator<VKApiPost>() {
+        public VKApiPost createFromParcel(Parcel source) {
+            return new VKApiPost(source);
+        }
+
+        public VKApiPost[] newArray(int size) {
+            return new VKApiPost[size];
+        }
+    };
+
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/photo/VKUploadAlbumPhotoRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/photo/VKUploadAlbumPhotoRequest.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/photo/VKUploadAlbumPhotoRequest.java	(revision )
@@ -0,0 +1,81 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.photo;
+
+import com.vk.sdk.api.VKApi;
+import com.vk.sdk.api.VKApiConst;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.util.VKJsonHelper;
+import com.vk.sdk.util.VKUtil;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.File;
+
+/**
+ * Special request for upload photos to specified album
+ */
+public class VKUploadAlbumPhotoRequest extends VKUploadPhotoBase {
+    /**
+	 * 
+	 */
+	private static final long serialVersionUID = 5439648671595840976L;
+
+	public VKUploadAlbumPhotoRequest(File image, long albumId, long groupId) {
+        super();
+        mAlbumId = albumId;
+        mGroupId = groupId;
+        mImages  = new File[]{image};
+    }
+
+    public VKUploadAlbumPhotoRequest(VKUploadImage image, long albumId, long groupId) {
+        super();
+        mAlbumId = albumId;
+        mGroupId = groupId;
+        mImages = new File[]{image.getTmpFile()};
+    }
+
+    protected VKRequest getServerRequest() {
+        if (mAlbumId != 0 && mGroupId != 0)
+            return VKApi.photos().getUploadServer(mAlbumId, mGroupId);
+        return VKApi.photos().getUploadServer(mAlbumId);
+    }
+
+    @Override
+    protected VKRequest getSaveRequest(JSONObject response) {
+        VKRequest saveRequest;
+        try {
+            saveRequest = VKApi.photos().save(new VKParameters(VKJsonHelper.toMap(response)));
+        } catch (JSONException e) {
+            return null;
+        }
+        if (mAlbumId != 0)
+            saveRequest.addExtraParameters(VKUtil.paramsFrom(VKApiConst.ALBUM_ID, mAlbumId));
+        if (mGroupId != 0)
+            saveRequest.addExtraParameters(VKUtil.paramsFrom(VKApiConst.GROUP_ID, mGroupId));
+        return saveRequest;
+
+    }
+
+}
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/CircleTransform.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/CircleTransform.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/CircleTransform.java	(revision )
@@ -0,0 +1,45 @@
+package com.vkdocs.oceanminded.vkdocs;
+
+import android.graphics.Bitmap;
+import android.graphics.BitmapShader;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+
+import com.squareup.picasso.Transformation;
+
+/**
+ * Created by josh on 28.01.16.
+ */
+public class CircleTransform implements Transformation {
+    @Override
+    public Bitmap transform(Bitmap source) {
+        int size = Math.min(source.getWidth(), source.getHeight());
+
+        int x = (source.getWidth() - size) / 2;
+        int y = (source.getHeight() - size) / 2;
+
+        Bitmap squaredBitmap = Bitmap.createBitmap(source, x, y, size, size);
+        if (squaredBitmap != source) {
+            source.recycle();
+        }
+
+        Bitmap bitmap = Bitmap.createBitmap(size, size, source.getConfig());
+
+        Canvas canvas = new Canvas(bitmap);
+        Paint paint = new Paint();
+        BitmapShader shader = new BitmapShader(squaredBitmap, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP);
+        paint.setShader(shader);
+        paint.setAntiAlias(true);
+
+        float r = size/2f;
+        canvas.drawCircle(r, r, r, paint);
+
+        squaredBitmap.recycle();
+        return bitmap;
+    }
+
+    @Override
+    public String key() {
+        return "circle";
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiCountry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiCountry.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiCountry.java	(revision )
@@ -0,0 +1,105 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * A country object describes a country.
+ */
+@SuppressWarnings("unused")
+public class VKApiCountry extends VKApiModel implements Parcelable, Identifiable {
+
+    /**
+     * Country ID.
+     */
+    public int id;
+
+    /**
+     * Country name
+     */
+    public String title;
+
+	public VKApiCountry(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills a Country instance from JSONObject.
+     */
+    public VKApiCountry parse(JSONObject from) {
+        id = from.optInt("id");
+        title = from.optString("title");
+        return this;
+    }
+
+    /**
+     * Creates a Country instance from Parcel.
+     */
+    public VKApiCountry(Parcel in) {
+        this.id = in.readInt();
+        this.title = in.readString();
+    }
+
+    /**
+     * Creates empty Country instance.
+     */
+    public VKApiCountry() {
+
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public String toString() {
+        return title;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeString(this.title);
+    }
+
+    public static Creator<VKApiCountry> CREATOR = new Creator<VKApiCountry>() {
+        public VKApiCountry createFromParcel(Parcel source) {
+            return new VKApiCountry(source);
+        }
+
+        public VKApiCountry[] newArray(int size) {
+            return new VKApiCountry[size];
+        }
+    };
+
+}
Index: vksdk_library/src/main/java/com/vk/sdk/VKScope.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/VKScope.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/VKScope.java	(revision )
@@ -0,0 +1,75 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk;
+
+import java.util.ArrayList;
+
+/**
+ * Scope constants used for authorization
+ */
+public class VKScope {
+    public static final String NOTIFY = "notify";
+    public static final String FRIENDS = "friends";
+    public static final String PHOTOS = "photos";
+    public static final String AUDIO = "audio";
+    public static final String VIDEO = "video";
+    public static final String DOCS = "docs";
+    public static final String NOTES = "notes";
+    public static final String PAGES = "pages";
+    public static final String STATUS = "status";
+    public static final String WALL = "wall";
+    public static final String GROUPS = "groups";
+    public static final String MESSAGES = "messages";
+    public static final String NOTIFICATIONS = "notifications";
+    public static final String STATS = "stats";
+    public static final String ADS = "ads";
+    public static final String OFFLINE = "offline";
+    public static final String EMAIL = "email";
+    public static final String NOHTTPS = "nohttps";
+    public static final String DIRECT = "direct";
+
+    /**
+     * Converts integer value of permissions into arraylist of constants
+     * @param permissionsValue integer permissions value
+     * @return ArrayList contains string constants of permissions (scope)
+     */
+    public static ArrayList<String> parseVkPermissionsFromInteger(int permissionsValue) {
+        ArrayList<String> res = new ArrayList<String>();
+        if ((permissionsValue & 1) > 0) res.add(NOTIFY);
+        if ((permissionsValue & 2) > 0) res.add(FRIENDS);
+        if ((permissionsValue & 4) > 0) res.add(PHOTOS);
+        if ((permissionsValue & 8) > 0) res.add(AUDIO);
+        if ((permissionsValue & 16) > 0) res.add(VIDEO);
+        if ((permissionsValue & 128) > 0) res.add(PAGES);
+        if ((permissionsValue & 1024) > 0) res.add(STATUS);
+        if ((permissionsValue & 2048) > 0) res.add(NOTES);
+        if ((permissionsValue & 4096) > 0) res.add(MESSAGES);
+        if ((permissionsValue & 8192) > 0) res.add(WALL);
+        if ((permissionsValue & 32768) > 0) res.add(ADS);
+        if ((permissionsValue & 65536) > 0) res.add(OFFLINE);
+        if ((permissionsValue & 131072) > 0) res.add(DOCS);
+        if ((permissionsValue & 262144) > 0) res.add(GROUPS);
+        if ((permissionsValue & 524288) > 0) res.add(NOTIFICATIONS);
+        if ((permissionsValue & 1048576) > 0) res.add(STATS);
+        return res;
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/VKParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/VKParser.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/VKParser.java	(revision )
@@ -0,0 +1,31 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api;
+
+
+import org.json.JSONObject;
+
+public abstract class VKParser {
+    public Object createModel(JSONObject object) {
+        return null;
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKPrivacy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKPrivacy.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKPrivacy.java	(revision )
@@ -0,0 +1,87 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * Privacy.java
+ * VK Dev
+ *
+ * Created by Babichev Vitaly on 29.09.13.
+ * Copyright (c) 2013 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import org.json.JSONObject;
+
+/**
+ * Describes privacy of some VK object
+ */
+public class VKPrivacy {
+
+    VKPrivacy() {}
+
+    /**
+     * Access for all users
+     */
+    public final static int PRIVACY_ALL = 0;
+
+    /**
+     * Access only for friends.
+     */
+    public final static int PRIVACY_FRIENDS = 1;
+
+    /**
+     * Access only for friends and friend of friends.
+     */
+    public final static int PRIVACY_FRIENDS_OF_FRIENDS = 2;
+
+    /**
+     * Access only for logged user.
+     */
+    public final static int PRIVACY_NOBODY = 3;
+
+    /**
+     * Unknown privacy format
+     */
+    public final static int PRIVACY_UNKNOWN = 4;
+
+    /**
+     * Parses privacy in int format from privacy_view format.
+     * @see <a href="http://vk.com/dev/privacy_setting">http://vk.com/dev/privacy_setting</a>
+     */
+    public static int parsePrivacy(JSONObject privacyView) {
+        int privacy = 0;
+        if(privacyView != null) {
+            String type = privacyView.optString("type");
+            if("all".equals(type)) {
+                privacy = PRIVACY_ALL;
+            } else if("friends".equals(type)) {
+                privacy = PRIVACY_FRIENDS;
+            } else if("friends_of_friends".equals(type)) {
+                privacy = PRIVACY_FRIENDS_OF_FRIENDS;
+            } else if("nobody".equals(type)) {
+                privacy = PRIVACY_NOBODY;
+            } else {
+                privacy = PRIVACY_UNKNOWN;
+            }
+        }
+        return privacy;
+    }
+}
\ No newline at end of file
Index: app/src/main/res/drawable/magnify.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/magnify.xml	(revision )
+++ app/src/main/res/drawable/magnify.xml	(revision )
@@ -0,0 +1,8 @@
+<!-- drawable/magnify.xml -->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="24dp"
+    android:width="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path android:fillColor="#000" android:pathData="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z" />
+</vector>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKAbstractOperation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKAbstractOperation.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKAbstractOperation.java	(revision )
@@ -0,0 +1,195 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.httpClient;
+
+import android.support.annotation.Nullable;
+
+import com.vk.sdk.api.VKError;
+
+import java.util.concurrent.ExecutorService;
+
+/**
+ * Class for executing any kind of asynchronous operation
+ */
+public abstract class VKAbstractOperation {
+
+    public enum VKOperationState {
+        Created,
+        Ready,
+        Executing,
+        Paused,
+        Finished,
+        Canceled
+    }
+
+    /**
+     * Listener called after operation finished
+     */
+    private VKOperationCompleteListener mCompleteListener;
+    /**
+     * Current operation state. Checked by stateTransitionIsValid function
+     */
+    private VKOperationState mState = VKOperationState.Created;
+    /**
+     * Flag for cancel
+     */
+    private boolean mCanceled = false;
+
+    public VKAbstractOperation() {
+        setState(VKOperationState.Ready);
+    }
+
+    @Nullable
+    private ExecutorService mResponseQueue;
+
+    /**
+     * Entry point for operation
+     */
+    public void start(ExecutorService responseQueue) {
+        mResponseQueue = responseQueue;
+    }
+
+    /**
+     * Cancels current operation and finishes it
+     */
+    public void cancel() {
+        mCanceled = true;
+        setState(VKOperationState.Canceled);
+    }
+
+    /**
+     * Finishes current operation. Will call onVkShareComplete() function for completeListener
+     */
+    public void finish() {
+        Runnable r = new Runnable() {
+            @Override
+            public void run() {
+                if (mCompleteListener != null) {
+                    mCompleteListener.onComplete();
+                }
+            }
+        };
+        if (mResponseQueue != null) {
+            mResponseQueue.submit(r);
+        } else {
+            r.run();
+        }
+    }
+
+    public abstract Object getResultObject();
+
+    /**
+     * Set complete listener for current operation
+     *
+     * @param listener Complete listener
+     */
+    protected void setCompleteListener(VKOperationCompleteListener listener) {
+        mCompleteListener = listener;
+    }
+
+    /**
+     * Returns current operation state
+     *
+     * @return state constant from {@link VKOperationState}
+     */
+    protected VKOperationState state() {
+        return mState;
+    }
+
+    /**
+     * Sets operation state. Checks validity of state transition
+     *
+     * @param state New operation state
+     */
+    protected void setState(VKOperationState state) {
+        if (isStateTransitionInvalid(mState, state, mCanceled)) {
+            return;
+        }
+        mState = state;
+        if (mState == VKOperationState.Finished ||
+                mState == VKOperationState.Canceled) {
+            finish();
+        }
+    }
+
+    /**
+     * Checks validity of state transition
+     *
+     * @param fromState   Old state (current operation state)
+     * @param toState     New state, sets by developer
+     * @param isCancelled Flag of cancelation
+     * @return Result of validation
+     */
+    private boolean isStateTransitionInvalid(VKOperationState fromState, VKOperationState toState,
+                                             boolean isCancelled) {
+        switch (fromState) {
+            case Ready:
+                switch (toState) {
+                    case Paused:
+                    case Executing:
+                    case Canceled:
+                        return false;
+                    case Finished:
+                        return !isCancelled;
+
+                    default:
+                        return true;
+                }
+
+            case Executing:
+                switch (toState) {
+                    case Paused:
+                    case Finished:
+                    case Canceled:
+                        return false;
+
+                    default:
+                        return true;
+                }
+
+            case Finished:
+            case Canceled:
+                return true;
+
+            case Paused:
+                switch (toState) {
+                    case Canceled:
+                        return false;
+                    default:
+                        return toState != VKOperationState.Ready;
+                }
+
+            default:
+                return false;
+        }
+    }
+
+    public interface VKOperationCompleteListener {
+        void onComplete();
+    }
+
+    public static abstract class VKAbstractCompleteListener<OperationType extends VKAbstractOperation, ResponseType extends Object> {
+        public abstract void onComplete(OperationType operation, ResponseType response);
+
+        public abstract void onError(OperationType operation, VKError error);
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPoll.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPoll.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPoll.java	(revision )
@@ -0,0 +1,225 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * PollAttachment.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 19.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+import static com.vk.sdk.api.model.VKAttachments.*;
+
+/**
+ * Describes poll on the wall on board.
+ */
+@SuppressWarnings("unused")
+public class VKApiPoll extends VKAttachments.VKApiAttachment implements android.os.Parcelable {
+
+    /**
+     * Poll ID to get information about it using polls.getById method;
+     */
+    public int id;
+
+    /**
+     * ID of the user or community that owns this poll.
+     */
+    public int owner_id;
+
+    /**
+     * Date (in Unix time) the poll was created.
+     */
+    public long created;
+
+    /**
+     * Question in the poll.
+     */
+    public String question;
+
+    /**
+     * The total number of users answered.
+     */
+    public int votes;
+
+    /**
+     * Response ID of the current user(if the current user has not yet posted in this poll, it contains 0)
+     */
+    public int answer_id;
+
+    /**
+     * Array of answers for this question.
+     */
+    public VKList<Answer> answers;
+
+	public VKApiPoll(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills a Poll instance from JSONObject.
+     */
+    public VKApiPoll parse(JSONObject source) {
+        id = source.optInt("id");
+        owner_id = source.optInt("owner_id");
+        created = source.optLong("created");
+        question = source.optString("question");
+        votes = source.optInt("votes");
+        answer_id = source.optInt("answer_id");
+        answers = new VKList<Answer>(source.optJSONArray("answers"), Answer.class);
+        return this;
+    }
+
+    /**
+     * Creates a Poll instance from Parcel.
+     */
+    public VKApiPoll(Parcel in) {
+        this.id = in.readInt();
+        this.owner_id = in.readInt();
+        this.created = in.readLong();
+        this.question = in.readString();
+        this.votes = in.readInt();
+        this.answer_id = in.readInt();
+        this.answers = in.readParcelable(VKList.class.getClassLoader());
+    }
+
+    /**
+     * Creates empty Country instance.
+     */
+    public VKApiPoll() {
+
+    }
+
+    @Override
+    public CharSequence toAttachmentString() {
+        return null;
+    }
+
+    @Override
+    public String getType() {
+        return TYPE_POLL;
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    /**
+     * Represents answer for the poll
+     */
+    public final static class Answer extends VKApiModel implements Identifiable, android.os.Parcelable {
+
+        /**
+         * ID of the answer for the question
+         */
+        public int id;
+
+        /**
+         * Text of the answer
+         */
+        public String text;
+
+        /**
+         * Number of users that voted for this answer
+         */
+        public int votes;
+
+        /**
+         * Rate of this answer in percent
+         */
+        public double rate;
+
+        public Answer parse(JSONObject source) {
+            id = source.optInt("id");
+            text = source.optString("text");
+            votes = source.optInt("votes");
+            rate = source.optDouble("rate");
+            return this;
+        }
+
+        @Override
+        public int describeContents() {
+            return 0;
+        }
+
+        @Override
+        public void writeToParcel(Parcel dest, int flags) {
+            dest.writeInt(this.id);
+            dest.writeString(this.text);
+            dest.writeInt(this.votes);
+            dest.writeDouble(this.rate);
+        }
+
+        public Answer(Parcel in) {
+            this.id = in.readInt();
+            this.text = in.readString();
+            this.votes = in.readInt();
+            this.rate = in.readDouble();
+        }
+
+        public static Creator<Answer> CREATOR = new Creator<Answer>() {
+            public Answer createFromParcel(Parcel source) {
+                return new Answer(source);
+            }
+
+            public Answer[] newArray(int size) {
+                return new Answer[size];
+            }
+        };
+
+        @Override
+        public int getId() {
+            return id;
+        }
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeInt(this.owner_id);
+        dest.writeLong(this.created);
+        dest.writeString(this.question);
+        dest.writeInt(this.votes);
+        dest.writeInt(this.answer_id);
+        dest.writeParcelable(this.answers, flags);
+    }
+
+    public static Creator<VKApiPoll> CREATOR = new Creator<VKApiPoll>() {
+        public VKApiPoll createFromParcel(Parcel source) {
+            return new VKApiPoll(source);
+        }
+
+        public VKApiPoll[] newArray(int size) {
+            return new VKApiPoll[size];
+        }
+    };
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiCommunity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiCommunity.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiCommunity.java	(revision )
@@ -0,0 +1,231 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.text.TextUtils;
+
+import org.json.JSONObject;
+
+
+/**
+ * Community object describes a community.
+ */
+@SuppressWarnings("unused")
+public class VKApiCommunity extends VKApiOwner implements android.os.Parcelable, Identifiable {
+
+    private final static String TYPE_GROUP = "group";
+    private final static String TYPE_PAGE = "page";
+    private final static String TYPE_EVENT = "event";
+    final static String PHOTO_50 = "http://vk.com/images/community_50.gif";
+    final static String PHOTO_100 = "http://vk.com/images/community_100.gif";
+
+    /**
+     * Community name
+     */
+    public String name;
+
+    /**
+     * Screen name of the community page (e.g. apiclub or club1).
+     */
+    public String screen_name;
+
+    /**
+     * Whether the community is closed
+     * @see com.vk.sdk.api.model.VKApiCommunity.Status
+     */
+    public int is_closed;
+
+    /**
+     * Whether a user is the community manager
+     */
+    public boolean is_admin;
+
+    /**
+     * Rights of the user
+     * @see com.vk.sdk.api.model.VKApiCommunity.AdminLevel
+     */
+    public int admin_level;
+
+    /**
+     * Whether a user is a community member
+     */
+    public boolean is_member;
+
+    /**
+     * Community type
+     * @see com.vk.sdk.api.model.VKApiCommunity.Type
+     */
+    public int type;
+
+    /**
+     * URL of the 50px-wide community logo.
+     */
+    public String photo_50;
+
+    /**
+     * URL of the 100px-wide community logo.
+     */
+    public String photo_100;
+
+    /**
+     * URL of the 200px-wide community logo.
+     */
+    public String photo_200;
+
+    /**
+     * {@link #photo_50}, {@link #photo_100}, {@link #photo_200} included here in Photo Sizes format.
+     */
+    public VKPhotoSizes photo = new VKPhotoSizes();
+
+	public VKApiCommunity(JSONObject from) {
+		parse(from);
+	}
+    /**
+     * Fills a community object from JSONObject
+     * @param from JSONObject describes community object according with VK Docs.
+     */
+    public VKApiCommunity parse(JSONObject from) {
+        super.parse(from);
+        name = from.optString("name");
+        screen_name = from.optString("screen_name", String.format("club%d", Math.abs(id)));
+        is_closed = from.optInt("is_closed");
+        is_admin = ParseUtils.parseBoolean(from, "is_admin");
+        admin_level = from.optInt("admin_level");
+        is_member = ParseUtils.parseBoolean(from, "is_member");
+
+        photo_50 = from.optString("photo_50", PHOTO_50);
+        if(!TextUtils.isEmpty(photo_50)) {
+            photo.add(VKApiPhotoSize.create(photo_50, 50));
+        }
+        photo_100 = from.optString("photo_100", PHOTO_100);
+        if(!TextUtils.isEmpty(photo_100)) {
+            photo.add(VKApiPhotoSize.create(photo_100, 100));
+        }
+        photo_200 = from.optString("photo_200", null);
+        if(!TextUtils.isEmpty(photo_200)) {
+            photo.add(VKApiPhotoSize.create(photo_200, 200));
+        }
+        photo.sort();
+
+        String type = from.optString("type", "group");
+        if(TYPE_GROUP.equals(type)) {
+            this.type = Type.GROUP;
+        } else if(TYPE_PAGE.equals(type)) {
+            this.type = Type.PAGE;
+        } else if(TYPE_EVENT.equals(type)) {
+            this.type = Type.EVENT;
+        }
+        return this;
+    }
+
+    /**
+     * Creates a community object from Parcel
+     */
+    public VKApiCommunity(Parcel in) {
+        super(in);
+        this.name = in.readString();
+        this.screen_name = in.readString();
+        this.is_closed = in.readInt();
+        this.is_admin = in.readByte() != 0;
+        this.admin_level = in.readInt();
+        this.is_member = in.readByte() != 0;
+        this.type = in.readInt();
+        this.photo_50 = in.readString();
+        this.photo_100 = in.readString();
+        this.photo_200 = in.readString();
+        this.photo = in.readParcelable(VKPhotoSizes.class.getClassLoader());
+    }
+
+    /**
+     * Creates empty Community instance.
+     */
+    public VKApiCommunity() {
+
+    }
+
+    @Override
+    public String toString() {
+        return name;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        super.writeToParcel(dest, flags);
+        dest.writeString(this.name);
+        dest.writeString(this.screen_name);
+        dest.writeInt(this.is_closed);
+        dest.writeByte(is_admin ? (byte) 1 : (byte) 0);
+        dest.writeInt(this.admin_level);
+        dest.writeByte(is_member ? (byte) 1 : (byte) 0);
+        dest.writeInt(this.type);
+        dest.writeString(this.photo_50);
+        dest.writeString(this.photo_100);
+        dest.writeString(this.photo_200);
+        dest.writeParcelable(this.photo, flags);
+    }
+
+    public static Creator<VKApiCommunity> CREATOR = new Creator<VKApiCommunity>() {
+        public VKApiCommunity createFromParcel(Parcel source) {
+            return new VKApiCommunity(source);
+        }
+
+        public VKApiCommunity[] newArray(int size) {
+            return new VKApiCommunity[size];
+        }
+    };
+
+    /**
+     * Access level to manage community.
+     */
+    public static class AdminLevel {
+        private AdminLevel() {}
+        public final static int MODERATOR = 1;
+        public final static int EDITOR = 2;
+        public final static int ADMIN = 3;
+    }
+
+    /**
+     * Privacy status of the group.
+     */
+    public static class Status {
+        private Status() {}
+        public final static int OPEN = 0;
+        public final static int CLOSED = 1;
+        public final static int PRIVATE = 2;
+    }
+
+    /**
+     * Types of communities.
+     */
+    public static class Type {
+        private Type() {}
+        public final static int GROUP = 0;
+        public final static int PAGE = 1;
+        public final static int EVENT = 2;
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiModel.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiModel.java	(revision )
@@ -0,0 +1,132 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * BaseModel.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 06.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcelable;
+import android.util.SparseArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Root class for all VK models.
+ * Any VK model supports Parcelable interface so you can pass it as extra.
+ *
+ * VK model is also allows you to store some object inside as a tag.
+ * These objects are retained by hard links,
+ * and never will be saved during parcelization.
+ */
+@SuppressWarnings("unused")
+public abstract class VKApiModel implements Parcelable {
+
+    public JSONObject fields;
+    /**
+     * The model's tag.
+     */
+    private Object mTag;
+
+    /**
+     * Map used to store model's tags.
+     */
+    private SparseArray<Object> mKeyedTags;
+
+	/**
+	 * Creates empty model
+	 */
+	public VKApiModel() {
+
+	}
+    /**
+     * Returns this model's tag.
+     *
+     * @return the Object stored in this model as a tag
+     *
+     * @see #setTag(Object)
+     * @see #getTag(int)
+     */
+    public Object getTag() {
+        return mTag;
+    }
+
+    /**
+     * Sets the tag associated with this model. A tag can be used to store
+     * data within a model without resorting to another data structure.
+     *
+     * @param tag an Object to tag the model with
+     *
+     * @see #getTag()
+     * @see #setTag(int, Object)
+     */
+    public void setTag(Object tag) {
+        mTag = tag;
+    }
+
+    /**
+     * Returns the tag associated with this model and the specified key.
+     *
+     * @param key The key identifying the tag
+     *
+     * @return the Object stored in this model as a tag
+     *
+     * @see #setTag(int, Object)
+     * @see #getTag()
+     */
+    public Object getTag(int key) {
+        if (mKeyedTags != null) return mKeyedTags.get(key);
+        return null;
+    }
+
+    /**
+     * Sets a tag associated with this model and a key. A tag can be used
+     * to store data within a model without resorting to another
+     * data structure.
+     *
+     * @see #setTag(Object)
+     * @see #getTag(int)
+     */
+    public void setTag(int key, final Object tag) {
+        if (mKeyedTags == null) {
+            mKeyedTags = new SparseArray<Object>(2);
+        }
+        mKeyedTags.put(key, tag);
+    }
+
+	public VKApiModel(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Parses object from source.
+     * @param response server API object.
+     * @return this object.
+     * @throws JSONException if any critical error occurred while parsing.
+     */
+    public VKApiModel parse(JSONObject response) throws JSONException {
+        return ParseUtils.parseViaReflection(this, response);
+    }
+}
Index: app/src/main/res/drawable-v21/ic_cloud_off_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_cloud_off_black_24dp.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_cloud_off_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M19.35,10.04C18.67,6.59 15.64,4 12,4c-1.48,0 -2.85,0.43 -4.01,1.17l1.46,1.46C10.21,6.23 11.08,6 12,6c3.04,0 5.5,2.46 5.5,5.5v0.5H19c1.66,0 3,1.34 3,3 0,1.13 -0.64,2.11 -1.56,2.62l1.45,1.45C23.16,18.16 24,16.68 24,15c0,-2.64 -2.05,-4.78 -4.65,-4.96zM3,5.27l2.75,2.74C2.56,8.15 0,10.77 0,14c0,3.31 2.69,6 6,6h11.73l2,2L21,20.73 4.27,4 3,5.27zM7.73,10l8,8H6c-2.21,0 -4,-1.79 -4,-4s1.79,-4 4,-4h1.73z"/>
+</vector>
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision )
+++ app/src/main/AndroidManifest.xml	(revision )
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.vkdocs.oceanminded.vkdocs">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+
+    <application
+        android:name=".Application"
+        android:allowBackup="false"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:supportsRtl="false"
+        android:theme="@style/AppTheme">
+        <activity
+            android:name=".Activitys.MainActivity"
+            android:label="@string/app_name"
+            android:theme="@style/AppTheme.NoActionBar" />
+        <activity
+            android:name=".Activitys.LoginActivity"
+            android:launchMode="singleTask">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name="com.vk.sdk.VKServiceActivity"
+            android:label="ServiceActivity"
+            android:theme="@style/VK.Transparent" />
+        <activity android:name=".Activitys.ImageActivity"
+            android:theme="@style/ImageTheme">
+
+        </activity>
+    </application>
+
+</manifest>
Index: vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiGroups.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiGroups.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiGroups.java	(revision )
@@ -0,0 +1,75 @@
+package com.vk.sdk.api.methods;
+
+import com.vk.sdk.api.VKApiConst;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.model.VKApiCommunityArray;
+import com.vk.sdk.api.model.VKUsersArray;
+
+/**
+ * Section groups
+ * Created by alex_xpert on 29.01.14.
+ */
+public class VKApiGroups extends VKApiBase {
+
+    public VKRequest isMember(VKParameters params) {
+        return prepareRequest("isMember", params);
+    }
+
+    public VKRequest getById(VKParameters params) {
+        return prepareRequest("getById", params, VKApiCommunityArray.class);
+    }
+
+    public VKRequest get(VKParameters params) {
+        if (params.containsKey(VKApiConst.EXTENDED) && ((Integer) params.get(VKApiConst.EXTENDED)) == 1) {
+            return prepareRequest("get", params, VKApiCommunityArray.class);
+        } else {
+            return prepareRequest("get", params);
+        }
+    }
+
+    public VKRequest getMembers(VKParameters params) {
+        return prepareRequest("getMembers", params);
+    }
+
+    public VKRequest join(VKParameters params) {
+        return prepareRequest("join", params);
+    }
+
+    public VKRequest leave(VKParameters params) {
+        return prepareRequest("leave", params);
+    }
+
+    public VKRequest leave(final int group_id) {
+        return prepareRequest("leave", new VKParameters() {
+            {
+                put(VKApiConst.GROUP_ID, String.valueOf(group_id));
+            }
+        });
+    }
+
+    public VKRequest search(VKParameters params) {
+        return prepareRequest("search", params, VKApiCommunityArray.class);
+    }
+
+    public VKRequest getInvites(VKParameters params) {
+        return prepareRequest("getInvites", params, VKApiCommunityArray.class);
+    }
+
+    public VKRequest banUser(VKParameters params) {
+        return prepareRequest("banUser", params);
+    }
+
+    public VKRequest unbanUser(VKParameters params) {
+        return prepareRequest("unbanUser", params);
+    }
+
+    public VKRequest getBanned(VKParameters params) {
+        return prepareRequest("getBanned", params, VKUsersArray.class);
+    }
+
+    @Override
+    protected String getMethodsGroup() {
+        return "groups";
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/activity_login.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_login.xml	(revision )
+++ app/src/main/res/layout/activity_login.xml	(revision )
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    tools:context=".Activitys.LoginActivity"
+    android:gravity="center_vertical">
+
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/authorization"
+        android:id="@+id/authorization_button"
+        android:layout_alignParentTop="true"
+        android:layout_centerHorizontal="true"
+        android:background="#537599"
+        android:textColor="#ffffff"
+        android:padding="15dp"
+        android:onClick="onClick"
+        android:visibility="invisible" />
+</RelativeLayout>
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VkAudioArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VkAudioArray.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VkAudioArray.java	(revision )
@@ -0,0 +1,12 @@
+package com.vk.sdk.api.model;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+public class VkAudioArray extends VKList<VKApiAudio> {
+    @Override
+    public VKApiModel parse(JSONObject response) throws JSONException {
+        fill(response, VKApiAudio.class);
+        return this;
+    }
+}
Index: app/src/main/res/drawable-v21/ic_cloud_circle_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_cloud_circle_black_24dp.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_cloud_circle_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM16.5,16L8,16c-1.66,0 -3,-1.34 -3,-3s1.34,-3 3,-3l0.14,0.01C8.58,8.28 10.13,7 12,7c2.21,0 4,1.79 4,4h0.5c1.38,0 2.5,1.12 2.5,2.5S17.88,16 16.5,16z"/>
+</vector>
Index: app/src/main/res/drawable-v21/ic_attachment_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_attachment_black_24dp.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_attachment_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M2,12.5C2,9.46 4.46,7 7.5,7H18c2.21,0 4,1.79 4,4s-1.79,4 -4,4H9.5C8.12,15 7,13.88 7,12.5S8.12,10 9.5,10H17v2H9.41c-0.55,0 -0.55,1 0,1H18c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2H7.5C5.57,9 4,10.57 4,12.5S5.57,16 7.5,16H17v2H7.5C4.46,18 2,15.54 2,12.5z"/>
+</vector>
Index: app/src/main/res/layout/content_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/content_main.xml	(revision )
+++ app/src/main/res/layout/content_main.xml	(revision )
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    app:layout_behavior="@string/appbar_scrolling_view_behavior"
+    tools:showIn="@layout/activity_main"
+    tools:context=".Activitys.MainActivity">
+
+</RelativeLayout>
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision )
+++ build.gradle	(revision )
@@ -0,0 +1,23 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+buildscript {
+    repositories {
+        jcenter()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.5.0'
+
+        // NOTE: Do not place your application dependencies here; they belong
+        // in the individual module build.gradle files
+    }
+}
+allprojects {
+    repositories {
+        jcenter()
+    }
+}
+task clean(type: Delete) {
+    delete rootProject.buildDir
+}
+
+dependencies {
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiVideo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiVideo.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiVideo.java	(revision )
@@ -0,0 +1,360 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * Video.java
+ * VK Dev
+ *
+ * Created by Babichev Vitaly on 29.09.13.
+ * Copyright (c) 2013 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.text.TextUtils;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import static com.vk.sdk.api.model.ParseUtils.parseBoolean;
+import static com.vk.sdk.api.model.VKAttachments.*;
+
+/**
+ * A video object describes an video file.
+ */
+@SuppressWarnings("unused")
+public class VKApiVideo extends VKAttachments.VKApiAttachment implements Parcelable, Identifiable {
+
+    /**
+     * Video ID.
+     */
+    public int id;
+
+    /**
+     * Video owner ID.
+     */
+    public int owner_id;
+
+    /**
+     * Video album ID.
+     */
+    public int album_id;
+
+    /**
+     * Video title.
+     */
+    public String title;
+
+    /**
+     * Text describing video.
+     */
+    public String description;
+
+    /**
+     * Duration of the video in seconds.
+     */
+    public int duration;
+
+    /**
+     * String with video+vid key.
+     */
+    public String link;
+
+    /**
+     * Date when the video was added, as unixtime.
+     */
+    public long date;
+
+    /**
+     * Number of views of the video.
+     */
+    public int views;
+
+    /**
+     * URL of the page with a player that can be used to play a video in the browser.
+     * Flash and HTML5 video players are supported; the player is always zoomed to fit
+     * the window size.
+     */
+    public String player;
+
+    /**
+     * URL of the video cover image with the size of 130x98px.
+     */
+    public String photo_130;
+
+    /**
+     * URL of the video cover image with the size of 320x240px.
+     */
+    public String photo_320;
+
+    /**
+     * URL of the video cover image with the size of 640x480px (if available).
+     */
+    public String photo_640;
+
+    /**
+     * Array of all photos.
+     */
+    public VKPhotoSizes photo = new VKPhotoSizes();
+
+    /**
+     * An access key using for get information about hidden objects.
+     */
+    public String access_key;
+
+    /**
+     * Number of comments on the video.
+     */
+    public int comments;
+
+    /**
+     * Whether the current user can comment on the video
+     */
+    public boolean can_comment;
+
+    /**
+     * Whether the current user can repost this video
+     */
+    public boolean can_repost;
+
+    /**
+     * Information whether the current user liked the video.
+     */
+    public boolean user_likes;
+
+    /**
+     * Information whether the the video should be repeated.
+     */
+    public boolean repeat;
+
+    /**
+     * Number of likes on the video.
+     */
+    public int likes;
+
+    /**
+     * Privacy to view of this video.
+     */
+    public int privacy_view;
+
+    /**
+     * Privacy to comment of this video.
+     */
+    public int privacy_comment;
+
+    /**
+     * URL of video with height of 240 pixels. Returns only if you use direct auth.
+     */
+    public String mp4_240;
+
+    /**
+     * URL of video with height of 360 pixels. Returns only if you use direct auth.
+     */
+    public String mp4_360;
+
+    /**
+     * URL of video with height of 480 pixels. Returns only if you use direct auth.
+     */
+    public String mp4_480;
+
+    /**
+     * URL of video with height of 720 pixels. Returns only if you use direct auth.
+     */
+    public String mp4_720;
+
+    /**
+     * URL of the external video link.
+     */
+    public String external;
+
+	public VKApiVideo(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills a Video instance from JSONObject.
+     */
+    public VKApiVideo parse(JSONObject from) {
+        id = from.optInt("id");
+        owner_id = from.optInt("owner_id");
+        title = from.optString("title");
+        description = from.optString("description");
+        duration = from.optInt("duration");
+        link = from.optString("link");
+        date = from.optLong("date");
+        views = from.optInt("views");
+        comments = from.optInt("comments");
+        player = from.optString("player");
+        access_key = from.optString("access_key");
+        album_id = from.optInt("album_id");
+
+        JSONObject likes = from.optJSONObject("likes");
+        if(likes != null) {
+            this.likes = likes.optInt("count");
+            user_likes = parseBoolean(likes, "user_likes");
+        }
+        can_comment = parseBoolean(from, "can_comment");
+        can_repost = parseBoolean(from, "can_repost");
+        repeat = parseBoolean(from, "repeat");
+
+        privacy_view = VKPrivacy.parsePrivacy(from.optJSONObject("privacy_view"));
+        privacy_comment = VKPrivacy.parsePrivacy(from.optJSONObject("privacy_comment"));
+
+        JSONObject files = from.optJSONObject("files");
+        if(files != null) {
+            mp4_240 = files.optString("mp4_240");
+            mp4_360 = files.optString("mp4_360");
+            mp4_480 = files.optString("mp4_480");
+            mp4_720 = files.optString("mp4_720");
+            external = files.optString("external");
+        }
+
+        photo_130 = from.optString("photo_130");
+        if(!TextUtils.isEmpty(photo_130)) {
+            photo.add(VKApiPhotoSize.create(photo_130, 130));
+        }
+
+        photo_320 = from.optString("photo_320");
+        if(!TextUtils.isEmpty(photo_320)) {
+            photo.add(VKApiPhotoSize.create(photo_320, 320));
+        }
+
+        photo_640 = from.optString("photo_640");
+        if(!TextUtils.isEmpty(photo_640)) {
+            photo.add(VKApiPhotoSize.create(photo_640, 640));
+        }
+        return this;
+    }
+
+    /**
+     * Creates a Video instance from Parcel.
+     */
+    public VKApiVideo(Parcel in) {
+        this.id = in.readInt();
+        this.owner_id = in.readInt();
+        this.album_id = in.readInt();
+        this.title = in.readString();
+        this.description = in.readString();
+        this.duration = in.readInt();
+        this.link = in.readString();
+        this.date = in.readLong();
+        this.views = in.readInt();
+        this.player = in.readString();
+        this.photo_130 = in.readString();
+        this.photo_320 = in.readString();
+        this.photo_640 = in.readString();
+        this.photo = in.readParcelable(VKPhotoSizes.class.getClassLoader());
+        this.access_key = in.readString();
+        this.comments = in.readInt();
+        this.can_comment = in.readByte() != 0;
+        this.can_repost = in.readByte() != 0;
+        this.user_likes = in.readByte() != 0;
+        this.repeat = in.readByte() != 0;
+        this.likes = in.readInt();
+        this.privacy_view = in.readInt();
+        this.privacy_comment = in.readInt();
+        this.mp4_240 = in.readString();
+        this.mp4_360 = in.readString();
+        this.mp4_480 = in.readString();
+        this.mp4_720 = in.readString();
+        this.external = in.readString();
+    }
+
+    /**
+     * Creates empty Video instance.
+     */
+    public VKApiVideo() {
+
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public CharSequence toAttachmentString() {
+        StringBuilder result = new StringBuilder(TYPE_VIDEO).append(owner_id).append('_').append(id);
+        if(!TextUtils.isEmpty(access_key)) {
+            result.append('_');
+            result.append(access_key);
+        }
+        return result;
+    }
+
+    @Override
+    public String getType() {
+        return TYPE_VIDEO;
+    }
+
+    @Override
+    public String toString() {
+        return title;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeInt(this.owner_id);
+        dest.writeInt(this.album_id);
+        dest.writeString(this.title);
+        dest.writeString(this.description);
+        dest.writeInt(this.duration);
+        dest.writeString(this.link);
+        dest.writeLong(this.date);
+        dest.writeInt(this.views);
+        dest.writeString(this.player);
+        dest.writeString(this.photo_130);
+        dest.writeString(this.photo_320);
+        dest.writeString(this.photo_640);
+        dest.writeParcelable(this.photo, flags);
+        dest.writeString(this.access_key);
+        dest.writeInt(this.comments);
+        dest.writeByte(can_comment ? (byte) 1 : (byte) 0);
+        dest.writeByte(can_repost ? (byte) 1 : (byte) 0);
+        dest.writeByte(user_likes ? (byte) 1 : (byte) 0);
+        dest.writeByte(repeat ? (byte) 1 : (byte) 0);
+        dest.writeInt(this.likes);
+        dest.writeInt(this.privacy_view);
+        dest.writeInt(this.privacy_comment);
+        dest.writeString(this.mp4_240);
+        dest.writeString(this.mp4_360);
+        dest.writeString(this.mp4_480);
+        dest.writeString(this.mp4_720);
+        dest.writeString(this.external);
+    }
+
+    public static Creator<VKApiVideo> CREATOR = new Creator<VKApiVideo>() {
+        public VKApiVideo createFromParcel(Parcel source) {
+            return new VKApiVideo(source);
+        }
+
+        public VKApiVideo[] newArray(int size) {
+            return new VKApiVideo[size];
+        }
+    };
+}
Index: app/src/main/res/menu/drawer_user_not_login.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/drawer_user_not_login.xml	(revision )
+++ app/src/main/res/menu/drawer_user_not_login.xml	(revision )
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android">
+    <item
+        android:id="@+id/login_in"
+
+        android:title="войти" />
+</menu>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKPhotoArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKPhotoArray.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKPhotoArray.java	(revision )
@@ -0,0 +1,36 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Array of API photos objects
+*/
+public class VKPhotoArray extends VKList<VKApiPhoto> {
+    @Override
+    public VKApiModel parse(JSONObject response) throws JSONException {
+        fill(response, VKApiPhoto.class);
+        return this;
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/dialogs/VKCaptchaDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/dialogs/VKCaptchaDialog.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/dialogs/VKCaptchaDialog.java	(revision )
@@ -0,0 +1,136 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.dialogs;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.view.inputmethod.EditorInfo;
+import android.widget.EditText;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.vk.sdk.R;
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.api.httpClient.VKHttpClient;
+import com.vk.sdk.api.httpClient.VKImageOperation;
+
+/**
+ * Dialog fo displaying captcha
+ */
+public class VKCaptchaDialog {
+    private final VKError mCaptchaError;
+    private EditText mCaptchaAnswer;
+    private ImageView mCaptchaImage;
+    private ProgressBar mProgressBar;
+    private float mDensity;
+
+    public VKCaptchaDialog(VKError captchaError) {
+
+        mCaptchaError = captchaError;
+    }
+
+    /**
+     * Prepare, create and show dialog for displaying captcha
+     *
+     * @param context Context activity for dialog
+     */
+    public void show(@NonNull Context context, @Nullable DialogInterface.OnDismissListener onDismissListener) {
+        View innerView = View.inflate(context, R.layout.vk_captcha_dialog, null);
+        assert innerView != null;
+        mCaptchaAnswer = (EditText) innerView.findViewById(R.id.captchaAnswer);
+        mCaptchaImage = (ImageView) innerView.findViewById(R.id.imageView);
+        mProgressBar = (ProgressBar) innerView.findViewById(R.id.progressBar);
+
+        mDensity = context.getResources().getDisplayMetrics().density;
+        final AlertDialog dialog = new AlertDialog.Builder(context).setView(innerView).create();
+        mCaptchaAnswer.setOnFocusChangeListener(new View.OnFocusChangeListener() {
+            @Override
+            public void onFocusChange(View v, boolean hasFocus) {
+                if (hasFocus) {
+                    dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
+                }
+            }
+        });
+        mCaptchaAnswer.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+            @Override
+            public boolean onEditorAction(TextView textView, int actionId, KeyEvent keyEvent) {
+                if (actionId == EditorInfo.IME_ACTION_SEND) {
+                    sendAnswer();
+                    dialog.dismiss();
+                    return true;
+                }
+                return false;
+            }
+        });
+
+        dialog.setButton(AlertDialog.BUTTON_NEGATIVE, context.getString(android.R.string.ok),
+                new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int which) {
+                        sendAnswer();
+                        dialog.dismiss();
+                    }
+                });
+        dialog.setOnCancelListener(new DialogInterface.OnCancelListener() {
+            @Override
+            public void onCancel(DialogInterface dialogInterface) {
+                dialog.dismiss();
+                mCaptchaError.request.cancel();
+            }
+        });
+        if (onDismissListener != null) {
+            dialog.setOnDismissListener(onDismissListener);
+        }
+        loadImage();
+        dialog.show();
+    }
+
+    private void sendAnswer() {
+        mCaptchaError.answerCaptcha(mCaptchaAnswer.getText() != null ? mCaptchaAnswer.getText().toString() : "");
+    }
+
+    private void loadImage() {
+        VKImageOperation imageOperation = new VKImageOperation(mCaptchaError.captchaImg);
+        imageOperation.imageDensity = mDensity;
+        imageOperation.setImageOperationListener(new VKImageOperation.VKImageOperationListener() {
+            @Override
+            public void onComplete(VKImageOperation operation, Bitmap image) {
+                mCaptchaImage.setImageBitmap(image);
+                mCaptchaImage.setVisibility(View.VISIBLE);
+                mProgressBar.setVisibility(View.GONE);
+            }
+
+            @Override
+            public void onError(VKImageOperation operation, VKError error) {
+                loadImage();
+            }
+        });
+        VKHttpClient.enqueueOperation(imageOperation);
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/docs/VKUploadDocRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/docs/VKUploadDocRequest.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/docs/VKUploadDocRequest.java	(revision )
@@ -0,0 +1,56 @@
+package com.vk.sdk.api.docs;
+
+import com.vk.sdk.api.VKApi;
+import com.vk.sdk.api.VKApiConst;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.util.VKJsonHelper;
+import com.vk.sdk.util.VKUtil;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.File;
+
+public class VKUploadDocRequest extends VKUploadDocBase {
+    /**
+     * Creates a VKUploadDocRequest instance.
+     * @param doc file for upload to server
+     */
+    public VKUploadDocRequest(File doc) {
+        super();
+        this.mDoc = doc;
+        this.mGroupId = 0;
+    }
+
+    /**
+     * Creates a VKUploadDocRequest instance.
+     * @param doc file for upload to server
+     * @param groupId community ID (if the document will be uploaded to the community).
+     */
+    public VKUploadDocRequest(File doc, long groupId) {
+        super();
+        this.mDoc = doc;
+        this.mGroupId = groupId;
+    }
+
+    @Override
+    protected VKRequest getServerRequest() {
+        if (mGroupId != 0)
+            return VKApi.docs().getUploadServer(mGroupId);
+        return VKApi.docs().getUploadServer();
+    }
+
+    @Override
+    protected VKRequest getSaveRequest(JSONObject response) {
+        VKRequest saveRequest;
+        try {
+            saveRequest = VKApi.docs().save(new VKParameters(VKJsonHelper.toMap(response)));
+        } catch (JSONException e) {
+            return null;
+        }
+        if (mGroupId != 0)
+            saveRequest.addExtraParameters(VKUtil.paramsFrom(VKApiConst.GROUP_ID, mGroupId));
+        return saveRequest;
+    }
+}
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- settings.gradle	(revision )
+++ settings.gradle	(revision )
@@ -0,0 +1,1 @@
+include ':vksdk_library', ':app'
\ No newline at end of file
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Adapters/RecyclerItemClickListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Adapters/RecyclerItemClickListener.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Adapters/RecyclerItemClickListener.java	(revision )
@@ -0,0 +1,48 @@
+package com.vkdocs.oceanminded.vkdocs.Adapters;
+
+/**
+ * Created by josh on 24.01.16.
+ */
+import android.content.Context;
+import android.support.v7.widget.RecyclerView;
+import android.view.GestureDetector;
+import android.view.MotionEvent;
+import android.view.View;
+
+public class RecyclerItemClickListener implements RecyclerView.OnItemTouchListener {
+    private OnItemClickListener mListener;
+
+    public interface OnItemClickListener {
+        public void onItemClick(View view, int position);
+    }
+
+    GestureDetector mGestureDetector;
+
+    public RecyclerItemClickListener(Context context, OnItemClickListener listener) {
+        mListener = listener;
+        mGestureDetector = new GestureDetector(context, new GestureDetector.SimpleOnGestureListener() {
+            @Override
+            public boolean onSingleTapUp(MotionEvent e) {
+                return true;
+            }
+        });
+    }
+
+    @Override
+    public boolean onInterceptTouchEvent(RecyclerView view, MotionEvent e) {
+        View childView = view.findChildViewUnder(e.getX(), e.getY());
+        if (childView != null && mListener != null && mGestureDetector.onTouchEvent(e)) {
+            mListener.onItemClick(childView, view.getChildAdapterPosition(childView));
+        }
+        return false;
+    }
+
+    @Override
+    public void onTouchEvent(RecyclerView view, MotionEvent motionEvent) {
+    }
+
+    @Override
+    public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {
+
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/Identifiable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/Identifiable.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/Identifiable.java	(revision )
@@ -0,0 +1,42 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * identifiable.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 06.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+/**
+ * Describes objects that contains an "id" field.
+ */
+@SuppressWarnings("unused")
+public interface Identifiable {
+
+    /**
+     * Returns unique identifier of this object(usually it's value of JSON field "id").
+     */
+    int getId();
+
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiVideo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiVideo.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiVideo.java	(revision )
@@ -0,0 +1,233 @@
+package com.vk.sdk.api.methods;
+
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.model.VKApiModel;
+import com.vk.sdk.api.model.VkVideoArray;
+
+/**
+ * Builds request for API.video part
+ */
+public class VKApiVideo extends VKApiBase {
+    /*
+     * https://vk.com/dev/video.get
+     */
+    public VKRequest get() {
+        return get(null);
+    }
+
+    /*
+     * https://vk.com/dev/video.get
+     */
+    public VKRequest get(VKParameters params) {
+        return prepareRequest("get", params, VkVideoArray.class);
+    }
+
+    /*
+     * https://vk.com/dev/video.edit
+     */
+    public VKRequest edit(VKParameters params) {
+        return prepareRequest("edit", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.add
+     */
+    public VKRequest add(VKParameters params) {
+        return prepareRequest("add", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.save
+     */
+    public VKRequest save(VKParameters params) {
+        return prepareRequest("save", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.delete
+     */
+    public VKRequest delete(VKParameters params) {
+        return prepareRequest("delete", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.restore
+     */
+    public VKRequest restore(VKParameters params) {
+        return prepareRequest("restore", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.search
+     */
+    public VKRequest search(VKParameters params) {
+        return prepareRequest("search", params, VkVideoArray.class);
+    }
+
+    /*
+     * https://vk.com/dev/video.getUserVideos
+     */
+    public VKRequest getUserVideos(VKParameters params) {
+        return prepareRequest("getUserVideos", params, VkVideoArray.class);
+    }
+
+    /*
+     * https://vk.com/dev/video.getAlbums
+     */
+    public VKRequest getAlbums() {
+        return getAlbums(null);
+    }
+
+    /*
+     * https://vk.com/dev/video.getAlbums
+     */
+    public VKRequest getAlbums(VKParameters params) {
+        return prepareRequest("getAlbums", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.getAlbumById
+     */
+    public VKRequest getAlbumById(VKParameters params) {
+        return prepareRequest("getAlbumById", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.addAlbum
+     */
+    public VKRequest addAlbum(VKParameters params) {
+        return prepareRequest("addAlbum", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.editAlbum
+     */
+    public VKRequest editAlbum(VKParameters params) {
+        return prepareRequest("editAlbum", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.deleteAlbum
+     */
+    public VKRequest deleteAlbum(VKParameters params) {
+        return prepareRequest("deleteAlbum", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.reorderAlbums
+     */
+    public VKRequest reorderAlbums(VKParameters params) {
+        return prepareRequest("getAlbumById", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.reorderVideos
+     */
+    public VKRequest reorderVideos(VKParameters params) {
+        return prepareRequest("getAlbumById", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.addToAlbum
+     */
+    public VKRequest addToAlbum(VKParameters params) {
+        return prepareRequest("addToAlbum", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.removeFromAlbum
+     */
+    public VKRequest removeFromAlbum(VKParameters params) {
+        return prepareRequest("removeFromAlbum", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.getAlbumsByVideo
+     */
+    public VKRequest getAlbumsByVideo(VKParameters params) {
+        return prepareRequest("getAlbumsByVideo", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.getComments
+     */
+    public VKRequest getComments(VKParameters params) {
+        return prepareRequest("getComments", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.createComment
+     */
+    public VKRequest createComment(VKParameters params) {
+        return prepareRequest("createComment", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.deleteComment
+     */
+    public VKRequest deleteComment(VKParameters params) {
+        return prepareRequest("deleteComment", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.restoreComment
+     */
+    public VKRequest restoreComment(VKParameters params) {
+        return prepareRequest("restoreComment", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.editComment
+     */
+    public VKRequest editComment(VKParameters params) {
+        return prepareRequest("editComment", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.getTags
+     */
+    public VKRequest getTags(VKParameters params) {
+        return prepareRequest("getTags", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.putTag
+     */
+    public VKRequest putTag(VKParameters params) {
+        return prepareRequest("putTag", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.removeTag
+     */
+    public VKRequest removeTag(VKParameters params) {
+        return prepareRequest("removeTag", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.getNewTags
+     */
+    public VKRequest getNewTags(VKParameters params) {
+        return prepareRequest("getNewTags", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.report
+     */
+    public VKRequest report(VKParameters params) {
+        return prepareRequest("report", params);
+    }
+
+    /*
+     * https://vk.com/dev/video.reportComment
+     */
+    public VKRequest reportComment(VKParameters params) {
+        return prepareRequest("reportComment", params);
+    }
+
+    @Override
+    protected String getMethodsGroup() {
+        return "video";
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiLink.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiLink.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiLink.java	(revision )
@@ -0,0 +1,149 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * Link.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 19.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+import static com.vk.sdk.api.model.VKAttachments.*;
+
+/**
+ * A link object describes a link attachment
+ */
+@SuppressWarnings("unused")
+public class VKApiLink extends VKAttachments.VKApiAttachment implements android.os.Parcelable {
+
+    /**
+     * Link URL
+     */
+    public String url;
+
+    /**
+     * Link title
+     */
+    public String title;
+
+    /**
+     * Link description;
+     */
+    public String description;
+
+    /**
+     * Image preview URL for the link (if any).
+     */
+    public String image_src;
+
+    /**
+     * ID wiki page with content for the preview of the page contents
+     * ID is returned as "ownerid_pageid".
+     */
+    public String preview_page;
+
+    /**
+     * Creates link attachment to attach it to the post
+     * @param url full URL of link
+     */
+    public VKApiLink(String url) {
+        this.url = url;
+    }
+
+	public VKApiLink(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills a Link instance from JSONObject.
+     */
+    public VKApiLink parse(JSONObject source) {
+        url = source.optString("url");
+        title = source.optString("title");
+        description = source.optString("description");
+        image_src = source.optString("image_src");
+        preview_page = source.optString("preview_page");
+        return this;
+    }
+
+    /**
+     * Creates a Link instance from Parcel.
+     */
+    private VKApiLink(Parcel in) {
+        this.url = in.readString();
+        this.title = in.readString();
+        this.description = in.readString();
+        this.image_src = in.readString();
+        this.preview_page = in.readString();
+    }
+
+    /**
+     * Creates empty Link instance.
+     */
+    public VKApiLink() {
+
+    }
+
+    @Override
+    public CharSequence toAttachmentString() {
+        return url;
+    }
+
+    @Override
+    public String getType() {
+        return TYPE_LINK;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeString(this.url);
+        dest.writeString(this.title);
+        dest.writeString(this.description);
+        dest.writeString(this.image_src);
+        dest.writeString(this.preview_page);
+    }
+
+    public static Creator<VKApiLink> CREATOR = new Creator<VKApiLink>() {
+        public VKApiLink createFromParcel(Parcel source) {
+            return new VKApiLink(source);
+        }
+
+        public VKApiLink[] newArray(int size) {
+            return new VKApiLink[size];
+        }
+    };
+
+    @Override
+    public int getId() {
+        return 0;
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKAttachments.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKAttachments.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKAttachments.java	(revision )
@@ -0,0 +1,266 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * VKAttachments.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 01.02.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+
+import com.vk.sdk.util.VKStringJoiner;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+/**
+ * A list of attachments in {@link VKApiComment}, {@link VKApiPost}, {@link VKApiMessage}
+ */
+public class VKAttachments extends VKList<VKAttachments.VKApiAttachment> implements android.os.Parcelable {
+
+    /**
+     * Attachment is a photo.
+     * @see com.vk.sdk.api.model.VKApiPhoto
+     */
+    public static final String TYPE_PHOTO = "photo";
+
+    /**
+     * Attachment is a video.
+     * @see com.vk.sdk.api.model.VKApiVideo
+     */
+    public static final String TYPE_VIDEO = "video";
+
+    /**
+     * Attachment is an audio.
+     * @see com.vk.sdk.api.model.VKApiAudio
+     */
+    public static final String TYPE_AUDIO = "audio";
+
+    /**
+     * Attachment is a document.
+     * @see com.vk.sdk.api.model.VKApiDocument
+     */
+    public static final String TYPE_DOC = "doc";
+
+    /**
+     * Attachment is a wall post.
+     * @see com.vk.sdk.api.model.VKApiPost
+     */
+    public static final String TYPE_POST = "wall";
+
+    /**
+     * Attachment is a posted photo.
+     * @see com.vk.sdk.api.model.VKApiPostedPhoto
+     */
+    public static final String TYPE_POSTED_PHOTO = "posted_photo";
+
+    /**
+     * Attachment is a link
+     * @see com.vk.sdk.api.model.VKApiLink
+     */
+    public static final String TYPE_LINK = "link";
+
+    /**
+     * Attachment is a note
+     * @see com.vk.sdk.api.model.VKApiNote
+     */
+    public static final String TYPE_NOTE = "note";
+
+    /**
+     * Attachment is an application content
+     * @see com.vk.sdk.api.model.VKApiApplicationContent
+     */
+    public static final String TYPE_APP = "app";
+
+    /**
+     * Attachment is a poll
+     * @see com.vk.sdk.api.model.VKApiPoll
+     */
+    public static final String TYPE_POLL = "poll";
+
+    /**
+     * Attachment is a WikiPage
+     * @see com.vk.sdk.api.model.VKApiWikiPage
+     */
+    public static final String TYPE_WIKI_PAGE = "page";
+
+    /**
+     * Attachment is a PhotoAlbum
+     * @see com.vk.sdk.api.model.VKApiPhotoAlbum
+     */
+    public static final String TYPE_ALBUM = "album";
+
+
+    public VKAttachments() {
+        super();
+    }
+
+    public VKAttachments(VKApiAttachment... data) {
+        super(Arrays.asList(data));
+    }
+
+    public VKAttachments(List<? extends VKApiAttachment> data) {
+        super(data);
+    }
+
+    public VKAttachments(JSONObject from) {
+        super();
+        fill(from);
+    }
+
+    public VKAttachments(JSONArray from) {
+        super();
+        fill(from);
+    }
+
+    public void fill(JSONObject from) {
+        super.fill(from, parser);
+    }
+
+    public void fill(JSONArray from) {
+        super.fill(from, parser);
+    }
+
+    public String toAttachmentsString() {
+        ArrayList<CharSequence> attachments = new ArrayList<CharSequence>();
+        for (VKApiAttachment attach : this) {
+            attachments.add(attach.toAttachmentString());
+        }
+        return VKStringJoiner.join(attachments, ",");
+    }
+    /**
+     * Parser that's used for parsing photo sizes.
+     */
+    private final Parser<VKApiAttachment> parser = new Parser<VKApiAttachment>() {
+        @Override
+        public VKApiAttachment parseObject(JSONObject attachment) throws Exception {
+            String type = attachment.optString("type");
+            if(TYPE_PHOTO.equals(type)) {
+                return new VKApiPhoto().parse(attachment.getJSONObject(TYPE_PHOTO));
+            } else if(TYPE_VIDEO.equals(type)) {
+                return new VKApiVideo().parse(attachment.getJSONObject(TYPE_VIDEO));
+            } else if(TYPE_AUDIO.equals(type)) {
+                return new VKApiAudio().parse(attachment.getJSONObject(TYPE_AUDIO));
+            } else if(TYPE_DOC.equals(type)) {
+                return new VKApiDocument().parse(attachment.getJSONObject(TYPE_DOC));
+            } else if(TYPE_POST.equals(type)) {
+                return new VKApiPost().parse(attachment.getJSONObject(TYPE_POST));
+            } else if(TYPE_POSTED_PHOTO.equals(type)) {
+                return new VKApiPostedPhoto().parse(attachment.getJSONObject(TYPE_POSTED_PHOTO));
+            } else if(TYPE_LINK.equals(type)) {
+                return new VKApiLink().parse(attachment.getJSONObject(TYPE_LINK));
+            } else if(TYPE_NOTE.equals(type)) {
+                return new VKApiNote().parse(attachment.getJSONObject(TYPE_NOTE));
+            } else if(TYPE_APP.equals(type)) {
+                return new VKApiApplicationContent().parse(attachment.getJSONObject(TYPE_APP));
+            } else if(TYPE_POLL.equals(type)) {
+                return new VKApiPoll().parse(attachment.getJSONObject(TYPE_POLL));
+            } else if(TYPE_WIKI_PAGE.equals(type)) {
+                return new VKApiWikiPage().parse(attachment.getJSONObject(TYPE_WIKI_PAGE));
+            } else if(TYPE_ALBUM.equals(type)) {
+                return new VKApiPhotoAlbum().parse(attachment.getJSONObject(TYPE_ALBUM));
+            }
+            return null;
+        }
+    };
+
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(size());
+        for(VKApiAttachment attachment: this) {
+            dest.writeString(attachment.getType());
+            dest.writeParcelable(attachment, 0);
+        }
+    }
+
+    public VKAttachments(Parcel parcel) {
+        int size = parcel.readInt();
+        for(int i = 0; i < size; i++) {
+            String type = parcel.readString();
+            if(TYPE_PHOTO.equals(type)) {
+                add((VKApiAttachment) parcel.readParcelable(VKApiPhoto.class.getClassLoader()));
+            } else if(TYPE_VIDEO.equals(type)) {
+                add((VKApiAttachment) parcel.readParcelable(VKApiVideo.class.getClassLoader()));
+            } else if(TYPE_AUDIO.equals(type)) {
+                add((VKApiAttachment) parcel.readParcelable(VKApiAudio.class.getClassLoader()));
+            } else if(TYPE_DOC.equals(type)) {
+                add((VKApiAttachment) parcel.readParcelable(VKApiDocument.class.getClassLoader()));
+            } else if(TYPE_POST.equals(type)) {
+                add((VKApiAttachment) parcel.readParcelable(VKApiPost.class.getClassLoader()));
+            } else if(TYPE_POSTED_PHOTO.equals(type)) {
+                add((VKApiAttachment) parcel.readParcelable(VKApiPostedPhoto.class.getClassLoader()));
+            } else if(TYPE_LINK.equals(type)) {
+                add((VKApiAttachment) parcel.readParcelable(VKApiLink.class.getClassLoader()));
+            } else if(TYPE_NOTE.equals(type)) {
+                add((VKApiAttachment) parcel.readParcelable(VKApiNote.class.getClassLoader()));
+            } else if(TYPE_APP.equals(type)) {
+                add((VKApiAttachment) parcel.readParcelable(VKApiApplicationContent.class.getClassLoader()));
+            } else if(TYPE_POLL.equals(type)) {
+                add((VKApiAttachment) parcel.readParcelable(VKApiPoll.class.getClassLoader()));
+            } else if(TYPE_WIKI_PAGE.equals(type)) {
+                add((VKApiAttachment) parcel.readParcelable(VKApiWikiPage.class.getClassLoader()));
+            } else if(TYPE_ALBUM.equals(type)) {
+                add((VKApiAttachment)  parcel.readParcelable(VKApiPhotoAlbum.class.getClassLoader()));
+            }
+        }
+    }
+
+    public static Creator<VKAttachments> CREATOR = new Creator<VKAttachments>() {
+        public VKAttachments createFromParcel(Parcel source) {
+            return new VKAttachments(source);
+        }
+
+        public VKAttachments[] newArray(int size) {
+            return new VKAttachments[size];
+        }
+    };
+
+    /**
+     * An abstract class for all attachments
+     */
+    @SuppressWarnings("unused")
+    public abstract static class VKApiAttachment extends VKApiModel implements Identifiable {
+
+        /**
+         * Convert attachment to special string to attach it to the post, message or comment.
+         */
+        public abstract CharSequence toAttachmentString();
+
+        /**
+         * @return type of this attachment
+         */
+        public abstract String getType();
+    }
+}
Index: vksdk_library/src/main/res/values-w600dp/dimen.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/values-w600dp/dimen.xml	(revision )
+++ vksdk_library/src/main/res/values-w600dp/dimen.xml	(revision )
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <dimen name="vk_share_dialog_view_padding">100dp</dimen>
+</resources>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiCity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiCity.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiCity.java	(revision )
@@ -0,0 +1,102 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import org.json.JSONObject;
+
+/**
+ * A city object describes a city.
+ */
+@SuppressWarnings("unused")
+public class VKApiCity extends VKApiModel implements Parcelable, Identifiable {
+
+    /**
+     * City ID.
+     */
+    public int id;
+
+    /**
+     * City name
+     */
+    public String title;
+
+	public VKApiCity(JSONObject from) {
+		parse(from);
+	}
+    /**
+     * Fills a City instance from JSONObject.
+     */
+    public VKApiCity parse(JSONObject from) {
+        id = from.optInt("id");
+        title = from.optString("title");
+        return this;
+    }
+
+    /**
+     * Creates a City instance from Parcel.
+     */
+    public VKApiCity(Parcel in) {
+        this.id = in.readInt();
+        this.title = in.readString();
+    }
+
+    /**
+     * Creates empty City instance.
+     */
+    public VKApiCity() {
+
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public String toString() {
+        return title;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeString(this.title);
+    }
+
+    public static Creator<VKApiCity> CREATOR = new Creator<VKApiCity>() {
+        public VKApiCity createFromParcel(Parcel source) {
+            return new VKApiCity(source);
+        }
+
+        public VKApiCity[] newArray(int size) {
+            return new VKApiCity[size];
+        }
+    };
+
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/ParseUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/ParseUtils.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/ParseUtils.java	(revision )
@@ -0,0 +1,254 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcelable;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.lang.reflect.*;
+
+/**
+ * Collection of helpers to parse server responses.
+ */
+class ParseUtils {
+
+    private ParseUtils() {
+    }
+
+    /**
+     * Parse boolean from server response.
+     *
+     * @param from server response like this format: {@code response: 1}
+     * @throws JSONException if server response is not valid
+     */
+    public static boolean parseBoolean(String from) throws JSONException {
+        return new JSONObject(from).optInt("response", 0) == 1;
+    }
+
+    /**
+     * Parse boolean from JSONObject with given name.
+     *
+     * @param from server response like this format: {@code field: 1}
+     * @param name name of field to read
+     */
+    public static boolean parseBoolean(JSONObject from, String name) {
+        return from != null && from.optInt(name, 0) == 1;
+    }
+
+    /**
+     * Parse int from JSONObject with given name.
+     *
+     * @param from server response like this format: {@code field: 34}
+     * @param name name of field to read
+     */
+    public static int parseInt(JSONObject from, String name) {
+        if (from == null) return 0;
+        return from.optInt(name, 0);
+    }
+
+    /**
+     * Parse int from server response.
+     *
+     * @param from server response like this format: {@code response: 34}
+     * @throws JSONException if server response is not valid
+     */
+    public static int parseInt(String from) throws JSONException {
+        if (from == null) return 0;
+        return new JSONObject(from).optInt("response");
+    }
+
+    /**
+     * Parse long from JSONObject with given name.
+     *
+     * @param from server response like this format: {@code field: 34}
+     * @param name name of field to read
+     */
+    public static long parseLong(JSONObject from, String name) {
+        if (from == null) return 0;
+        return from.optLong(name, 0);
+    }
+
+    /**
+     * Parse int array from JSONObject with given name.
+     *
+     * @param from int JSON array like this one {@code {11, 34, 42}}
+     */
+    public static int[] parseIntArray(JSONArray from) {
+        int[] result = new int[from.length()];
+        for (int i = 0; i < result.length; i++) {
+            result[i] = from.optInt(i);
+        }
+        return result;
+    }
+
+    /**
+     * Returns root JSONObject from server response
+     *
+     * @param source standart VK server response
+     * @throws JSONException if source is not valid
+     */
+    public static JSONObject rootJSONObject(String source) throws JSONException {
+        return new JSONObject(source).getJSONObject("response");
+    }
+
+    /**
+     * Returns root JSONArray from server response
+     *
+     * @param source standart VK server response
+     * @throws JSONException if source is not valid
+     */
+    public static JSONArray rootJSONArray(String source) throws JSONException {
+        return new JSONObject(source).getJSONArray("response");
+    }
+
+    /**
+     * Parses object with follow rules:
+     * <p/>
+     * 1. All fields should had a public access.
+     * 2. The name of the filed should be fully equal to name of JSONObject key.
+     * 3. Supports parse of all Java primitives, all {@link java.lang.String},
+     * arrays of primitive types, {@link java.lang.String}s and {@link com.vk.sdk.api.model.VKApiModel}s,
+     * list implementation line {@link com.vk.sdk.api.model.VKList}, {@link com.vk.sdk.api.model.VKAttachments.VKAttachment} or {@link com.vk.sdk.api.model.VKPhotoSizes},
+     * {@link com.vk.sdk.api.model.VKApiModel}s.
+     * <p/>
+     * 4. Boolean fields defines by vk_int == 1 expression.
+     *
+     * @param object object to initialize
+     * @param source data to read values
+     * @param <T>    type of result
+     * @return initialized according with given data object
+     * @throws JSONException if source object structure is invalid
+     */
+    @SuppressWarnings({"rawtypes", "unchecked"})
+    public static <T> T parseViaReflection(T object, JSONObject source) throws JSONException {
+        if (source.has("response")) {
+            source = source.optJSONObject("response");
+        }
+        if (source == null) {
+            return object;
+        }
+        for (Field field : object.getClass().getFields()) {
+            field.setAccessible(true);
+            String fieldName = field.getName();
+            Class<?> fieldType = field.getType();
+
+            Object value = source.opt(fieldName);
+            if (value == null) {
+                continue;
+            }
+            try {
+                if (fieldType.isPrimitive() && value instanceof Number) {
+                    Number number = (Number) value;
+                    if (fieldType.equals(int.class)) {
+                        field.setInt(object, number.intValue());
+                    } else if (fieldType.equals(long.class)) {
+                        field.setLong(object, number.longValue());
+                    } else if (fieldType.equals(float.class)) {
+                        field.setFloat(object, number.floatValue());
+                    } else if (fieldType.equals(double.class)) {
+                        field.setDouble(object, number.doubleValue());
+                    } else if (fieldType.equals(boolean.class)) {
+                        field.setBoolean(object, number.intValue() == 1);
+                    } else if (fieldType.equals(short.class)) {
+                        field.setShort(object, number.shortValue());
+                    } else if (fieldType.equals(byte.class)) {
+                        field.setByte(object, number.byteValue());
+                    }
+                } else {
+                    Object result = field.get(object);
+                    if (value.getClass().equals(fieldType)) {
+                        result = value;
+                    } else if (fieldType.isArray() && value instanceof JSONArray) {
+                        result = parseArrayViaReflection((JSONArray) value, fieldType);
+                    } else if (VKPhotoSizes.class.isAssignableFrom(fieldType) && value instanceof JSONArray) {
+                        Constructor<?> constructor = fieldType.getConstructor(JSONArray.class);
+                        result = constructor.newInstance((JSONArray) value);
+                    } else if (VKAttachments.class.isAssignableFrom(fieldType) && value instanceof JSONArray) {
+                        Constructor<?> constructor = fieldType.getConstructor(JSONArray.class);
+                        result = constructor.newInstance((JSONArray) value);
+                    } else if (VKList.class.equals(fieldType)) {
+                        ParameterizedType genericTypes = (ParameterizedType) field.getGenericType();
+                        Class<?> genericType = (Class<?>) genericTypes.getActualTypeArguments()[0];
+                        if (VKApiModel.class.isAssignableFrom(genericType) && Parcelable.class.isAssignableFrom(genericType) && Identifiable.class.isAssignableFrom(genericType)) {
+                            if (value instanceof JSONArray) {
+                                result = new VKList((JSONArray) value, genericType);
+                            } else if (value instanceof JSONObject) {
+                                result = new VKList((JSONObject) value, genericType);
+                            }
+                        }
+                    } else if (VKApiModel.class.isAssignableFrom(fieldType) && value instanceof JSONObject) {
+                        result = ((VKApiModel) fieldType.newInstance()).parse((JSONObject) value);
+                    }
+                    field.set(object, result);
+                }
+            } catch (InstantiationException e) {
+                throw new JSONException(e.getMessage());
+            } catch (IllegalAccessException e) {
+                throw new JSONException(e.getMessage());
+            } catch (NoSuchMethodException e) {
+                throw new JSONException(e.getMessage());
+            } catch (InvocationTargetException e) {
+                throw new JSONException(e.getMessage());
+            } catch (NoSuchMethodError e) {
+                // Примечание Виталия:
+                // Вы не поверите, но у некоторых вендоров getFields() вызывает ВОТ ЭТО.
+                // Иногда я всерьез задумываюсь, правильно ли я поступил, выбрав Android в качестве платформы разработки.
+                throw new JSONException(e.getMessage());
+            }
+        }
+        return object;
+    }
+
+    /**
+     * Parses array from given JSONArray.
+     * Supports parsing of primitive types and {@link com.vk.sdk.api.model.VKApiModel} instances.
+     *
+     * @param array      JSONArray to parse
+     * @param arrayClass type of array field in class.
+     * @return object to set to array field in class
+     * @throws JSONException if given array have incompatible type with given field.
+     */
+    private static Object parseArrayViaReflection(JSONArray array, Class arrayClass) throws JSONException {
+        Object result = Array.newInstance(arrayClass.getComponentType(), array.length());
+        Class<?> subType = arrayClass.getComponentType();
+        for (int i = 0; i < array.length(); i++) {
+            try {
+                Object item = array.opt(i);
+                if (VKApiModel.class.isAssignableFrom(subType) && item instanceof JSONObject) {
+                    VKApiModel model = (VKApiModel) subType.newInstance();
+                    item = model.parse((JSONObject) item);
+                }
+                Array.set(result, i, item);
+            } catch (InstantiationException e) {
+                throw new JSONException(e.getMessage());
+            } catch (IllegalAccessException e) {
+                throw new JSONException(e.getMessage());
+            } catch (IllegalArgumentException e) {
+                throw new JSONException(e.getMessage());
+            }
+        }
+        return result;
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/res/layout/vk_open_auth_dialog.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/layout/vk_open_auth_dialog.xml	(revision )
+++ vksdk_library/src/main/res/layout/vk_open_auth_dialog.xml	(revision )
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:fitsSystemWindows="true"
+                android:gravity="center">
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_centerInParent="true"
+        android:paddingBottom="10dp"
+        android:paddingTop="10dp">
+
+        <ProgressBar
+            android:id="@+id/progress"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerInParent="true"/>
+
+        <com.vk.sdk.WebView
+            android:id="@+id/copyUrl"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_centerInParent="true"
+            android:background="@android:color/transparent"
+            android:visibility="invisible"/>
+    </RelativeLayout>
+</RelativeLayout>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKDocsArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKDocsArray.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKDocsArray.java	(revision )
@@ -0,0 +1,36 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Array of API docs objects
+*/
+public class VKDocsArray extends VKList<VKApiDocument> {
+    @Override
+    public VKApiModel parse(JSONObject response) throws JSONException {
+        fill(response, VKApiDocument.class);
+        return this;
+    }
+}
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gradle/wrapper/gradle-wrapper.properties	(revision )
+++ gradle/wrapper/gradle-wrapper.properties	(revision )
@@ -0,0 +1,6 @@
+#Sun Jan 03 14:59:57 EET 2016
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-all.zip
Index: vksdk_library/src/main/java/com/vk/sdk/VKObject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/VKObject.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/VKObject.java	(revision )
@@ -0,0 +1,71 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk;
+
+import java.util.HashMap;
+import java.util.Random;
+
+public class VKObject {
+    private static final HashMap<Long, VKObject> sRegisteredObjects;
+    private long mRegisteredObjectId = 0;
+    static {
+        sRegisteredObjects = new HashMap<>();
+    }
+
+    /**
+     * Returns object saved in local cache
+     * @param registeredObjectId Registered object id
+     * @return Object which was saved with registerObject() method
+     */
+    public static VKObject getRegisteredObject(long registeredObjectId) {
+        return sRegisteredObjects.get(registeredObjectId);
+    }
+
+    /**
+     * Saves object in local cache for future use. Always call unregisterObject() after use
+     * @return Registered object id
+     */
+    public long registerObject() {
+        if (sRegisteredObjects.containsKey(mRegisteredObjectId)) {
+            return mRegisteredObjectId;
+        }
+        Random rand = new Random();
+        while (true) {
+            long nextRand = rand.nextLong();
+            if (sRegisteredObjects.containsKey(nextRand))
+                continue;
+            if (nextRand == 0)
+                continue;
+            sRegisteredObjects.put(nextRand, this);
+            mRegisteredObjectId = nextRand;
+            return nextRand;
+        }
+    }
+
+    /**
+     * Unregister object from local cache.
+     */
+    public void unregisterObject() {
+        sRegisteredObjects.remove(mRegisteredObjectId);
+        mRegisteredObjectId = 0;
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/res/layout/vk_share_dialog.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/layout/vk_share_dialog.xml	(revision )
+++ vksdk_library/src/main/res/layout/vk_share_dialog.xml	(revision )
@@ -0,0 +1,186 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_centerInParent="true"
+    android:layout_gravity="center"
+    android:orientation="vertical"
+    tools:context="com.vk.sdk.dialogs.VKShareDialog"
+    tools:ignore="RtlHardcoded">
+    <View
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+        android:focusable="true"
+        android:focusableInTouchMode="true" />
+
+    <RelativeLayout
+        android:id="@+id/topBarLayout"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/vk_share_top_panel_height"
+        android:background="@color/vk_share_top_blue_color">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_alignParentLeft="true"
+            android:layout_toLeftOf="@+id/sendButtonLayout"
+            >
+
+            <ImageView
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:layout_marginLeft="@dimen/vk_share_top_image_margin"
+                android:scaleType="fitCenter"
+                android:src="@drawable/ic_ab_app"
+                android:contentDescription="@string/vk_name"/>
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_marginLeft="@dimen/vk_share_top_title_margin"
+
+                android:gravity="center_vertical"
+                android:text="@string/vk_share"
+                android:textColor="@color/vk_white"
+                android:textSize="@dimen/vk_share_title_text_size" />
+        </LinearLayout>
+
+        <LinearLayout
+            android:id="@+id/sendButtonLayout"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentRight="true">
+
+            <View
+                android:layout_width="1dp"
+                android:layout_height="match_parent"
+                android:layout_margin="@dimen/vk_share_top_line_margin"
+                android:background="#3fff" />
+
+            <ProgressBar
+                android:id="@+id/sendProgress"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:indeterminate="true"
+                android:visibility="gone" />
+
+            <Button
+                android:id="@+id/sendButton"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:background="@drawable/vk_share_send_button_background"
+                android:drawableLeft="@drawable/ic_ab_done"
+                android:drawablePadding="3dp"
+                android:paddingLeft="@dimen/vk_share_top_button_padding_left"
+                android:paddingRight="@dimen/vk_share_top_button_padding_right"
+                android:text="@string/vk_send"
+                android:textColor="@color/vk_white"
+                android:textSize="@dimen/vk_share_send_text_size"
+                android:textStyle="bold" />
+        </LinearLayout>
+
+    </RelativeLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/topBarLayout"
+        android:orientation="vertical">
+
+        <ScrollView
+            android:layout_width="fill_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/vk_white"
+            android:fillViewport="true">
+
+            <LinearLayout
+                android:id="@+id/postContentLayout"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:paddingBottom="@dimen/vk_share_dialog_padding"
+                android:paddingLeft="@dimen/vk_share_dialog_padding"
+                android:paddingRight="@dimen/vk_share_dialog_padding"
+                android:paddingTop="@dimen/vk_share_dialog_padding_top">
+
+                <EditText
+                    android:id="@+id/shareText"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:background="@color/vk_clear"
+                    android:hint="@string/vk_new_message_text"
+                    android:inputType="textCapSentences|textMultiLine"
+                    android:textColor="@color/vk_black"
+                    android:textColorHint="@color/vk_share_link_color"
+                    android:textSize="@dimen/vk_share_title_text_size" />
+
+                <HorizontalScrollView
+                    android:id="@+id/imagesScrollView"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/vk_share_dialog_padding">
+
+                    <LinearLayout
+                        android:id="@+id/imagesContainer"
+                        android:layout_width="wrap_content"
+                        android:layout_height="match_parent"
+                        android:orientation="horizontal" />
+                </HorizontalScrollView>
+
+                <LinearLayout
+                    android:id="@+id/attachmentLinkLayout"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginBottom="@dimen/vk_share_link_top_margin"
+                    android:layout_marginTop="@dimen/vk_share_top_image_margin"
+                    android:orientation="vertical"
+                    android:visibility="gone">
+
+                    <TextView
+                        android:id="@+id/linkTitle"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:ellipsize="end"
+                        android:lines="1"
+                        android:textColor="@color/vk_share_link_title_color"
+                        android:textSize="@dimen/vk_share_title_link_title_size" />
+
+                    <TextView
+                        android:id="@+id/linkHost"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginTop="-1dp"
+                        android:ellipsize="end"
+                        android:lines="1"
+                        android:textColor="@color/vk_share_link_color"
+                        android:textSize="@dimen/vk_share_title_link_host_size" />
+                </LinearLayout>
+            </LinearLayout>
+        </ScrollView>
+
+        <LinearLayout
+            android:id="@+id/postSettingsLayout"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:minHeight="@dimen/vk_share_settings_button_min_height"
+            android:orientation="vertical"
+            android:visibility="gone">
+
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1dp"
+                android:layout_marginLeft="@dimen/vk_share_dialog_padding"
+                android:layout_marginRight="@dimen/vk_share_dialog_padding"
+                android:background="@color/vk_share_gray_line" />
+
+            <Button
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:background="@drawable/vk_share_send_button_background"
+                android:text="@string/vk_new_post_settings"
+                android:textColor="@color/vk_share_blue_color" />
+        </LinearLayout>
+    </LinearLayout>
+</RelativeLayout>
\ No newline at end of file
Index: vksdk_library/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/.gitignore	(revision )
+++ vksdk_library/.gitignore	(revision )
@@ -0,0 +1,2 @@
+/build
+/docs
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiCommunityFull.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiCommunityFull.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiCommunityFull.java	(revision )
@@ -0,0 +1,514 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.text.TextUtils;
+import org.json.JSONObject;
+
+/**
+ * Represents full community profile.
+ */
+@SuppressWarnings("unused")
+public class VKApiCommunityFull extends VKApiCommunity implements Parcelable {
+
+    /**
+     * Filed city from VK fields set
+     */
+    public final static String CITY = "city";
+
+    /**
+     * Filed country from VK fields set
+     */
+    public final static String COUNTRY = "country";
+
+    /**
+     * Filed place from VK fields set
+     */
+    public final static String PLACE = "place";
+
+    /**
+     * Filed description from VK fields set
+     */
+    public final static String DESCRIPTION = "description";
+
+    /**
+     * Filed wiki_page from VK fields set
+     */
+    public final static String WIKI_PAGE = "wiki_page";
+
+    /**
+     * Filed members_count from VK fields set
+     */
+    public final static String MEMBERS_COUNT = "members_count";
+
+    /**
+     * Filed counters from VK fields set
+     */
+    public final static String COUNTERS = "counters";
+
+    /**
+     * Filed start_date from VK fields set
+     */
+    public final static String START_DATE = "start_date";
+
+    /**
+     * Filed end_date from VK fields set
+     */
+    public final static String END_DATE = "end_date";
+
+    /**
+     * Filed can_post from VK fields set
+     */
+    public final static String CAN_POST = "can_post";
+
+    /**
+     * Filed can_see_all_posts from VK fields set
+     */
+    public final static String CAN_SEE_ALL_POSTS = "can_see_all_posts";
+
+    /**
+     * Filed status from VK fields set
+     */
+    public final static String STATUS = "status";
+
+    /**
+     * Filed contacts from VK fields set
+     */
+    public final static String CONTACTS = "contacts";
+
+    /**
+     * Filed links from VK fields set
+     */
+    public final static String LINKS = "links";
+
+    /**
+     * Filed fixed_post from VK fields set
+     */
+    public final static String FIXED_POST = "fixed_post";
+
+    /**
+     * Filed verified from VK fields set
+     */
+    public final static String VERIFIED = "verified";
+
+    /**
+     * Filed blacklisted from VK fields set
+     */
+    public final static String BLACKLISTED = "blacklisted";
+
+    /**
+     * Filed site from VK fields set
+     */
+    public final static String SITE = "site";
+
+    /**
+     * Filed activity from VK fields set
+     */
+    public final static String ACTIVITY = "activity";
+
+    /**
+     * City specified in information about community.
+     */
+    public VKApiCity city;
+
+    /**
+     * Country specified in information about community.
+     */
+    public VKApiCountry country;
+
+    /**
+     * Audio which broadcasting to status.
+     */
+    public VKApiAudio status_audio;
+
+    /**
+     * The location which specified in information about community
+     */
+    public VKApiPlace place;
+
+    /**
+     * Community description text.
+     */
+    public String description;
+
+    /**
+     * Name of the home wiki-page of the community.
+     */
+    public String wiki_page;
+
+    /**
+     * Number of community members.
+     */
+    public int members_count;
+
+    /**
+     * Counters object with community counters.
+     */
+    public Counters counters;
+
+    /**
+     * Returned only for meeting and contain start time of the meeting as unixtime.
+     */
+    public long start_date;
+
+    /**
+     * Returned only for meeting and contain end time of the meeting as unixtime.
+     */
+    public long end_date;
+
+    /**
+     * Whether the current user can post on the community's wall
+     */
+    public boolean can_post;
+
+    /**
+     * Whether others' posts on the community's wall can be viewed
+     */
+    public boolean can_see_all_posts;
+
+    /**
+     * Group status.
+     */
+    public String status;
+
+    /**
+     * Information from public page contact module.
+     */
+    public VKList<Contact> contacts;
+
+    /**
+     * Information from public page links module.
+     */
+    public VKList<Link> links;
+
+    /**
+     * ID of fixed post of this community.
+     */
+    public int fixed_post;
+
+    /**
+     * Information whether the community has a verified page in VK
+     */
+    public boolean verified;
+
+    /**
+     * URL of community site
+     */
+    public String site;
+
+    /**
+     * Information whether the current community has add current user to the blacklist.
+     */
+    public boolean blacklisted;
+
+    public VKApiCommunityFull() {
+        super();
+    }
+
+    public VKApiCommunityFull parse(JSONObject jo) {
+        super.parse(jo);
+
+        JSONObject city = jo.optJSONObject(CITY);
+        if(city != null) {
+            this.city = new VKApiCity().parse(city);
+        }
+        JSONObject country = jo.optJSONObject(COUNTRY);
+        if(country != null) {
+            this.country = new VKApiCountry().parse(country);
+        }
+
+        JSONObject place = jo.optJSONObject(PLACE);
+        if(place != null) this.place = new VKApiPlace().parse(place);
+
+        description = jo.optString(DESCRIPTION);
+        wiki_page = jo.optString(WIKI_PAGE);
+        members_count = jo.optInt(MEMBERS_COUNT);
+
+        JSONObject counters = jo.optJSONObject(COUNTERS);
+        if(counters != null) this.counters = new Counters(counters);
+
+        start_date = jo.optLong(START_DATE);
+        end_date = jo.optLong(END_DATE);
+        can_post = ParseUtils.parseBoolean(jo, CAN_POST);
+        can_see_all_posts = ParseUtils.parseBoolean(jo, CAN_SEE_ALL_POSTS);
+        status = jo.optString(STATUS);
+
+        JSONObject status_audio = jo.optJSONObject("status_audio");
+        if(status_audio != null) this.status_audio = new VKApiAudio().parse(status_audio);
+
+        contacts = new VKList<Contact>(jo.optJSONArray(CONTACTS), Contact.class);
+        links = new VKList<Link>(jo.optJSONArray(LINKS), Link.class);
+        fixed_post = jo.optInt(FIXED_POST);
+        verified = ParseUtils.parseBoolean(jo, VERIFIED);
+        blacklisted = ParseUtils.parseBoolean(jo, VERIFIED);
+        site = jo.optString(SITE);
+        return this;
+    }
+
+
+
+    public static class Counters implements Parcelable {
+
+        /**
+         * Значение в том случае, если счетчик не был явно указан.
+         */
+        public final static int NO_COUNTER = -1;
+
+        public int photos = NO_COUNTER;
+        public int albums = NO_COUNTER;
+        public int audios = NO_COUNTER;
+        public int videos = NO_COUNTER;
+        public int topics = NO_COUNTER;
+        public int docs = NO_COUNTER;
+
+        public Counters(JSONObject from) {
+            photos = from.optInt("photos", photos);
+            albums = from.optInt("albums", albums);
+            audios = from.optInt("audios", audios);
+            videos = from.optInt("videos", videos);
+            topics = from.optInt("topics", topics);
+            docs = from.optInt("docs", docs);
+        }
+
+
+        @Override
+        public int describeContents() {
+            return 0;
+        }
+
+        @Override
+        public void writeToParcel(Parcel dest, int flags) {
+            dest.writeInt(this.photos);
+            dest.writeInt(this.albums);
+            dest.writeInt(this.audios);
+            dest.writeInt(this.videos);
+            dest.writeInt(this.topics);
+            dest.writeInt(this.docs);
+        }
+
+        private Counters(Parcel in) {
+            this.photos = in.readInt();
+            this.albums = in.readInt();
+            this.audios = in.readInt();
+            this.videos = in.readInt();
+            this.topics = in.readInt();
+            this.docs = in.readInt();
+        }
+
+        public static Creator<Counters> CREATOR = new Creator<Counters>() {
+            public Counters createFromParcel(Parcel source) {
+                return new Counters(source);
+            }
+
+            public Counters[] newArray(int size) {
+                return new Counters[size];
+            }
+        };
+    }
+
+    public static class Contact extends VKApiModel implements Parcelable, Identifiable {
+        public int user_id;
+        public VKApiUser user;
+        public String email;
+        public String desc;
+
+        public Contact(JSONObject from) {
+            parse(from);
+        }
+
+	    public Contact parse(JSONObject from) {
+		    user_id = from.optInt("user_id");
+		    desc = from.optString("desc");
+		    email = from.optString("email");
+		    return this;
+	    }
+
+        @Override
+        public int describeContents() {
+            return 0;
+        }
+
+        @Override
+        public void writeToParcel(Parcel dest, int flags) {
+            dest.writeInt(this.user_id);
+            dest.writeString(this.desc);
+
+        }
+
+        private Contact(Parcel in) {
+            this.user_id = in.readInt();
+            this.desc = in.readString();
+        }
+
+        public static Creator<Contact> CREATOR = new Creator<Contact>() {
+            public Contact createFromParcel(Parcel source) {
+                return new Contact(source);
+            }
+
+            public Contact[] newArray(int size) {
+                return new Contact[size];
+            }
+        };
+
+        @Override
+        public int getId() {
+            return user_id;
+        }
+
+        @Override
+        public String toString() {
+            if(user != null) {
+                return user.toString();
+            } else if(email != null) {
+                return email;
+            }
+            return null;
+        }
+    }
+
+    public static class Link extends VKApiModel implements Parcelable, Identifiable {
+
+        public String url;
+        public String name;
+        public String desc;
+        public VKPhotoSizes photo = new VKPhotoSizes();
+
+        public Link(JSONObject from) {
+            parse(from);
+        }
+	    public Link parse(JSONObject from) {
+		    url = from.optString("url");
+		    name = from.optString("name");
+		    desc = from.optString("desc");
+
+		    String photo_50 = from.optString("photo_50");
+		    if(!TextUtils.isEmpty(photo_50)) {
+			    photo.add(VKApiPhotoSize.create(photo_50, 50));
+		    }
+		    String photo_100 = from.optString("photo_100");
+		    if(!TextUtils.isEmpty(photo_100)) {
+			    photo.add(VKApiPhotoSize.create(photo_100, 100));
+		    }
+		    photo.sort();
+		    return this;
+	    }
+
+        @Override
+        public int describeContents() {
+            return 0;
+        }
+
+        @Override
+        public void writeToParcel(Parcel dest, int flags) {
+            dest.writeString(this.url);
+            dest.writeString(this.name);
+            dest.writeString(this.desc);
+            dest.writeParcelable(this.photo, flags);
+        }
+
+        public Link(Parcel in) {
+            this.url = in.readString();
+            this.name = in.readString();
+            this.desc = in.readString();
+            this.photo = in.readParcelable(null);
+        }
+
+        public static Creator<Link> CREATOR = new Creator<Link>() {
+            public Link createFromParcel(Parcel source) {
+                return new Link(source);
+            }
+
+            public Link[] newArray(int size) {
+                return new Link[size];
+            }
+        };
+
+        @Override
+        public int getId() {
+            return 0;
+        }
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        super.writeToParcel(dest, flags);
+        dest.writeParcelable(this.city, flags);
+        dest.writeParcelable(this.country, flags);
+        dest.writeParcelable(this.status_audio, flags);
+        dest.writeParcelable(this.place, flags);
+        dest.writeString(this.description);
+        dest.writeString(this.wiki_page);
+        dest.writeInt(this.members_count);
+        dest.writeParcelable(this.counters, flags);
+        dest.writeLong(this.start_date);
+        dest.writeLong(this.end_date);
+        dest.writeByte(can_post ? (byte) 1 : (byte) 0);
+        dest.writeByte(can_see_all_posts ? (byte) 1 : (byte) 0);
+        dest.writeString(this.status);
+        dest.writeParcelable(this.contacts, flags);
+        dest.writeParcelable(this.links, flags);
+        dest.writeInt(this.fixed_post);
+        dest.writeByte(verified ? (byte) 1 : (byte) 0);
+        dest.writeString(this.site);
+        dest.writeByte(blacklisted ? (byte) 1 : (byte) 0);
+    }
+
+    public VKApiCommunityFull(Parcel in) {
+        super(in);
+        this.city = in.readParcelable(VKApiCity.class.getClassLoader());
+        this.country = in.readParcelable(VKApiCountry.class.getClassLoader());
+        this.status_audio = in.readParcelable(VKApiAudio.class.getClassLoader());
+        this.place = in.readParcelable(VKApiPlace.class.getClassLoader());
+        this.description = in.readString();
+        this.wiki_page = in.readString();
+        this.members_count = in.readInt();
+        this.counters = in.readParcelable(Counters.class.getClassLoader());
+        this.start_date = in.readLong();
+        this.end_date = in.readLong();
+        this.can_post = in.readByte() != 0;
+        this.can_see_all_posts = in.readByte() != 0;
+        this.status = in.readString();
+        this.contacts = in.readParcelable(VKList.class.getClassLoader());
+        this.links = in.readParcelable(VKList.class.getClassLoader());
+        this.fixed_post = in.readInt();
+        this.verified = in.readByte() != 0;
+        this.site = in.readString();
+        this.blacklisted = in.readByte() != 0;
+    }
+
+    public static Creator<VKApiCommunityFull> CREATOR = new Creator<VKApiCommunityFull>() {
+        public VKApiCommunityFull createFromParcel(Parcel source) {
+            return new VKApiCommunityFull(source);
+        }
+
+        public VKApiCommunityFull[] newArray(int size) {
+            return new VKApiCommunityFull[size];
+        }
+    };
+}
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/ImagesFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/ImagesFragment.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/ImagesFragment.java	(revision )
@@ -0,0 +1,110 @@
+package com.vkdocs.oceanminded.vkdocs.Fragments;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.VKResponse;
+import com.vk.sdk.api.model.VKApiDocument;
+import com.vk.sdk.api.model.VKDocsArray;
+import com.vkdocs.oceanminded.vkdocs.Adapters.RVAdapter;
+import com.vkdocs.oceanminded.vkdocs.R;
+import com.vkdocs.oceanminded.vkdocs.Services.VKDataService;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by josh on 23.01.16.
+ */
+public class ImagesFragment extends Fragment {
+
+    private TextView notdosc;
+    private List<VKApiDocument> documentslist;
+    private RecyclerView documenstListRV;
+    private RVAdapter adapter;
+    public static int DOCS_PARAMETR = 4;
+    public static final String VKDOCS_LOADING = "Test";
+    public static final String ALARM_MESSAGE = "Срочно пришлите кота!";
+
+
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+
+        super.onCreate(savedInstanceState);
+
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.fragmenta,
+                container, false);
+        //doscList =(ListView) view.findViewById(R.id.docs_list);
+        notdosc =(TextView) view.findViewById(R.id.notdocs_text);
+        documenstListRV = (RecyclerView) view.findViewById(R.id.documents_recycleview);
+        LinearLayoutManager llm = new LinearLayoutManager(getContext());
+        documenstListRV.setLayoutManager(llm);
+        documenstListRV.setHasFixedSize(true);
+        documentslist = new ArrayList<>();
+        getDocumentFromServer();
+
+        return view;
+    }
+
+    public void updateData(){
+        Intent vkServiceIntent = new Intent(getActivity(),VKDataService.class);
+
+
+    }
+    public void getDocumentFromServer() {
+        List<VKApiDocument> docsList = new ArrayList<VKApiDocument>();
+        VKRequest getdocs = new VKRequest("docs.get", VKParameters.from("type", DOCS_PARAMETR), VKRequest.HttpMethod.GET, VKDocsArray.class);
+        getdocs.executeWithListener(new VKRequest.VKRequestListener() {
+            @Override
+            public void onProgress(VKRequest.VKProgressType progressType, long bytesLoaded, long bytesTotal) {
+                super.onProgress(progressType, bytesLoaded, bytesTotal);
+            }
+
+            @Override
+            public void onComplete(VKResponse response) {
+                super.onComplete(response);
+                VKDocsArray docsArray = (VKDocsArray) response.parsedModel;
+                for (VKApiDocument doc : docsArray) {
+                    documentslist.add(doc);
+                    //Log.i("json", response.json.toString());
+                }
+                adapter = new RVAdapter(documentslist);
+                documenstListRV.setAdapter(adapter);
+            }
+
+            @Override
+            public void attemptFailed(VKRequest request, int attemptNumber, int totalAttempts) {
+                super.attemptFailed(request, attemptNumber, totalAttempts);
+            }
+
+            @Override
+            public void onError(VKError error) {
+                super.onError(error);
+            }
+        });
+//        Log.i("list.size", "" + documentslist.size());
+    }
+
+
+    @Override
+    public void onAttach(Context context) {
+        super.onAttach(context);
+    }
+}
Index: app/src/main/res/menu/activity_example_drawer.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/activity_example_drawer.xml	(revision )
+++ app/src/main/res/menu/activity_example_drawer.xml	(revision )
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <group android:checkableBehavior="single">
+        <item
+            android:id="@+id/nav_new_doc"
+            android:icon="@drawable/ic_plus_white_24dp"
+            android:title="новый документ" />
+    </group>
+
+    <item android:title="Communicate">
+        <menu>
+            <item
+                android:id="@+id/nav_exit"
+                android:icon="@android:drawable/arrow_down_float"
+                android:title="выйти" />
+
+        </menu>
+    </item>
+
+</menu>
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Activitys/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Activitys/MainActivity.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Activitys/MainActivity.java	(revision )
@@ -0,0 +1,304 @@
+package com.vkdocs.oceanminded.vkdocs.Activitys;
+
+import android.app.Fragment;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Environment;
+import android.support.design.widget.FloatingActionButton;
+import android.support.design.widget.NavigationView;
+import android.support.design.widget.Snackbar;
+import android.support.design.widget.TabLayout;
+import android.support.v4.view.GravityCompat;
+import android.support.v4.view.ViewPager;
+import android.support.v4.widget.DrawerLayout;
+import android.support.v7.app.ActionBarDrawerToggle;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import com.squareup.picasso.Picasso;
+import com.vk.sdk.VKSdk;
+import com.vk.sdk.api.VKApi;
+import com.vk.sdk.api.VKApiConst;
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.VKResponse;
+import com.vk.sdk.api.model.VKApiUser;
+import com.vk.sdk.api.model.VKList;
+import com.vkdocs.oceanminded.vkdocs.Adapters.ViewPagerAdapte;
+import com.vkdocs.oceanminded.vkdocs.CircleTransform;
+import com.vkdocs.oceanminded.vkdocs.Fragments.AllDocumentsFragment;
+import com.vkdocs.oceanminded.vkdocs.Fragments.AnimationFragment;
+import com.vkdocs.oceanminded.vkdocs.Fragments.ArchivsFragment;
+import com.vkdocs.oceanminded.vkdocs.Fragments.ImagesFragment;
+import com.vkdocs.oceanminded.vkdocs.Fragments.OtherFragment;
+import com.vkdocs.oceanminded.vkdocs.Fragments.TextsFragment;
+import com.vkdocs.oceanminded.vkdocs.R;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.File;
+
+public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {
+    private static final int CHOOSE_FILE_REQUESTCODE = 1;
+    private static final int SELECT_PICTURE = 123;
+    private TabLayout tabLayout;
+    private ViewPager viewPager;
+    private String[] mPlanetTitles;
+    private DrawerLayout mDrawerLayout;
+    private ListView mDrawerList;
+    private ImageView userAvatar;
+    private NavigationView navigationView;
+    private TextView userName;
+    private String Fileurl;
+    private String FileName;
+    private String filemanagerstring;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+        Log.i("MA","start");
+        guiInitialized();//create gui
+
+    }
+
+
+    private void setupViewPager(ViewPager viewPager) {
+        ViewPagerAdapte adapter = new ViewPagerAdapte(getSupportFragmentManager());
+        adapter.addFragment(new AllDocumentsFragment(), "ВСЕ");
+        adapter.addFragment(new TextsFragment(), "ТЕКСТОВЫЕ");
+        adapter.addFragment(new ArchivsFragment(), "АРХИВЫ");
+        adapter.addFragment(new AnimationFragment(), "АНИМАЦИЯ");
+        adapter.addFragment(new ImagesFragment(), "ИЗОБРАЖЕНИЯ");
+        adapter.addFragment(new OtherFragment(), "ПРОЧИЕ");
+
+        viewPager.setAdapter(adapter);
+
+
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        // Inflate the menu; this adds items to the action bar if it is present.
+        getMenuInflater().inflate(R.menu.menu_main, menu);
+        return true;
+    }
+
+    public void guiInitialized() {
+
+        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        setSupportActionBar(toolbar);
+
+
+        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
+        fab.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
+                        .setAction("Action", null).show();
+            }
+        });
+        viewPager = (ViewPager) findViewById(R.id.viewpager);
+        setupViewPager(viewPager);
+        tabLayout = (TabLayout) findViewById(R.id.tabs);
+        tabLayout.setupWithViewPager(viewPager);
+        tabLayout.setTabGravity(TabLayout.GRAVITY_CENTER);
+        //add navigation drawer
+        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
+        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
+                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
+        drawer.setDrawerListener(toggle);
+        toggle.syncState();
+
+        navigationView = (NavigationView) findViewById(R.id.nav_view);
+        navigationView.setNavigationItemSelectedListener(this);
+        //set user avatar and user name
+        getUserData();
+
+    }
+
+
+    public void repeat(){
+        Fragment nowFragment = getFragmentManager().findFragmentById(R.layout.fragmenta);
+
+    }
+
+    public String getUserData() {
+
+        //query for get user Avatar, user First and Last Name
+        final VKRequest request = VKApi.users().get(VKParameters.from(VKApiConst.FIELDS, "id,first_name,last_name,photo_100"));
+        request.executeWithListener(new VKRequest.VKRequestListener() {
+            @Override
+            public void onComplete(VKResponse response) {
+                super.onComplete(response);
+                //This query return
+                VKList<VKApiUser> usersArray = (VKList<VKApiUser>) response.parsedModel;
+                for (VKApiUser user : usersArray) {
+                    //set user avatar to drawer
+                    userAvatar = (ImageView) findViewById(R.id.user_avatar_imageview);
+                    userName = (TextView) findViewById(R.id.user_name_textview);
+                    /*Glide.with(getApplicationContext()).load(user.photo_100).asBitmap().centerCrop().into(new BitmapImageViewTarget(userAvatar) {
+                        @Override
+                        protected void setResource(Bitmap resource) {
+                            RoundedBitmapDrawable circularBitmapDrawable =
+                                    RoundedBitmapDrawableFactory.create(getApplicationContext().getResources(), resource);
+                            circularBitmapDrawable.setCircular(true);
+                            userAvatar.setImageDrawable(circularBitmapDrawable);
+                        }
+                    });*/
+
+                    Picasso.with(getApplicationContext()).load(user.photo_100).transform(new CircleTransform()).into(userAvatar);
+                    //set user name to drawer
+                    userName.setText(user.first_name + " " + user.last_name);
+                }
+
+            }
+
+
+            @Override
+            public void onError(VKError error) {
+                super.onError(error);
+            }
+
+            @Override
+            public void attemptFailed(VKRequest request, int attemptNumber, int totalAttempts) {
+                super.attemptFailed(request, attemptNumber, totalAttempts);
+            }
+        });
+        return null;
+    }
+
+    @Override
+    public void onBackPressed() {
+        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
+        if (drawer.isDrawerOpen(GravityCompat.START)) {
+            drawer.closeDrawer(GravityCompat.START);
+        } else {
+            super.onBackPressed();
+        }
+    }
+
+    @SuppressWarnings("StatementWithEmptyBody")
+    @Override
+    public boolean onNavigationItemSelected(MenuItem item) {
+        // Handle navigation view item clicks here.
+        int id = item.getItemId();
+
+
+        if (id == R.id.nav_exit_account) {
+            VKSdk.logout();
+            Intent openLoginActivity = new Intent(this, LoginActivity.class);
+            startActivity(openLoginActivity);
+        } else if (id == R.id.nav_new_doc) {
+            createFileFromSource();
+
+        }
+
+        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
+        drawer.closeDrawer(GravityCompat.START);
+        return true;
+    }
+
+    public File createFileFromSource() {
+
+        //1 Open FileManager on Activity
+        //2 When user checked file, close activity of file manager and return File Path
+        //3 Create File from filePath
+
+
+        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
+        intent.setType("*/*");
+        intent = Intent.createChooser(intent, "Choose a file");
+
+        startActivityForResult(intent,CHOOSE_FILE_REQUESTCODE);
+
+        return null;
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle action bar item clicks here. The action bar will
+        // automatically handle clicks on the Home/Up button, so long
+        // as you specify a parent activity in AndroidManifest.xml.
+        int id = item.getItemId();
+
+        //noinspection SimplifiableIfStatement
+        if (id == R.id.action_settings) {
+            return true;
+        }
+
+        return super.onOptionsItemSelected(item);
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+       // super.onActivityResult(requestCode, resultCode, data);
+AllDocumentsFragment oneFragment = (AllDocumentsFragment) getSupportFragmentManager().getBackStackEntryAt(R.layout.fragmenta);
+        oneFragment.getDocumentFromServer();
+        if(requestCode == CHOOSE_FILE_REQUESTCODE) {
+            Log.i("Error", data.getDataString());
+            Uri selectedImageUri = data.getData();
+
+//OI FILE Manager
+            filemanagerstring = selectedImageUri.getPath();
+
+//MEDIA GALLERY
+            String Fpath = selectedImageUri.getPath();
+            FileName = data.getData().getLastPathSegment();
+            Fileurl = data.getData().getPath().substring(0, data.getData().getPath().lastIndexOf("/"));
+
+
+            //******************************
+            VKRequest request = VKApi.docs().getUploadServer();
+            request.executeWithListener(new VKRequest.VKRequestListener() {
+                @Override
+                public void onComplete(VKResponse response) {
+                    super.onComplete(response);
+//----------------------------------send file to vk.com/MyDocuments/---------------------------------
+                    JSONObject jo = null;
+                    try {
+                        jo = response.json.getJSONObject("response");
+                        jo.getString("upload_url");
+
+                        //need add, method getPath. This method must open file Manager and return full path of checked file.
+                        // Example: sdcard/vkDocs/document1.docx
+
+                        //Get the text file
+                        File pathFile = Environment.getExternalStorageDirectory();
+                        String fileName = "downloaded.jpg";
+                        File file = new File(Fileurl, FileName);
+                        VKRequest uploadFile = VKApi.docs().uploadDocRequest(file);
+                        uploadFile.executeWithListener(new VKRequest.VKRequestListener() {
+                            @Override
+                            public void onComplete(VKResponse response) {
+                                super.onComplete(response);
+                            }
+
+                            @Override
+                            public void onError(VKError error) {
+                                super.onError(error);
+                                Log.i("Error", error.toString());
+                            }
+                        });
+
+                    } catch (JSONException e) {
+                        e.printStackTrace();
+                    }
+                    //
+                }
+            });
+            Log.i("File Name", FileName);
+            Log.i("File Path", Fileurl);
+
+        }
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPhotoAlbum.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPhotoAlbum.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPhotoAlbum.java	(revision )
@@ -0,0 +1,227 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import static com.vk.sdk.api.model.VKAttachments.*;
+
+/**
+ * Describes a photo album
+ */
+@SuppressWarnings("unused")
+public class VKApiPhotoAlbum extends VKAttachments.VKApiAttachment implements Parcelable, Identifiable {
+
+    /**
+     * URL for empty album cover with max width at 75px
+     */
+    public final static String COVER_S = "http://vk.com/images/s_noalbum.png";
+
+    /**
+     * URL of empty album cover with max width at 130px
+     */
+    public final static String COVER_M = "http://vk.com/images/m_noalbum.png";
+
+    /**
+     * URL of empty album cover with max width at 604px
+     */
+    public final static String COVER_X = "http://vk.com/images/x_noalbum.png";
+
+    /**
+     * Album ID.
+     */
+    public int id;
+
+    /**
+     * Album title.
+     */
+    public String title;
+
+    /**
+     * Number of photos in the album.
+     */
+    public int size;
+
+    /**
+     * Privacy settings for the album.
+     */
+    public int privacy;
+
+    /**
+     * Album description.
+     */
+    public String description;
+
+    /**
+     * ID of the user or community that owns the album.
+     */
+    public int owner_id;
+
+    /**
+     * Whether a user can upload photos to this album(false — cannot, true — can).
+     */
+    public boolean can_upload;
+
+    /**
+     * Date (in Unix time) the album was last updated.
+     */
+    public long updated;
+
+    /**
+     * Album creation date (in Unix time).
+     */
+    public long created;
+
+    /**
+     * ID of the photo which is the cover.
+     */
+    public int thumb_id;
+
+    /**
+     * Link to album cover photo.
+     */
+    public String thumb_src;
+
+    /**
+     * Links to to cover photo.
+     */
+    public VKPhotoSizes photo = new VKPhotoSizes();
+
+	public VKApiPhotoAlbum(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Creates a PhotoAlbum instance from JSONObject.
+     */
+    public VKApiPhotoAlbum parse(JSONObject from) {
+        id = from.optInt("id");
+        thumb_id = from.optInt("thumb_id");
+        owner_id = from.optInt("owner_id");
+        title = from.optString("title");
+        description = from.optString("description");
+        created = from.optLong("created");
+        updated = from.optLong("updated");
+        size = from.optInt("size");
+        can_upload = ParseUtils.parseBoolean(from, "can_upload");
+        thumb_src = from.optString("thumb_src");
+        if(from.has("privacy")) {
+            privacy = from.optInt("privacy");
+        } else {
+            privacy = VKPrivacy.parsePrivacy(from.optJSONObject("privacy_view"));
+        }
+        JSONArray sizes = from.optJSONArray("sizes");
+        if(sizes != null) {
+            photo.fill(sizes);
+        } else {
+            photo.add(VKApiPhotoSize.create(COVER_S, 75, 55));
+            photo.add(VKApiPhotoSize.create(COVER_M, 130, 97));
+            photo.add(VKApiPhotoSize.create(COVER_X, 432, 249));
+            photo.sort();
+        }
+        return this;
+    }
+
+    /**
+     * Creates a PhotoAlbum instance from Parcel.
+     */
+    public VKApiPhotoAlbum(Parcel in) {
+        this.id = in.readInt();
+        this.title = in.readString();
+        this.size = in.readInt();
+        this.privacy = in.readInt();
+        this.description = in.readString();
+        this.owner_id = in.readInt();
+        this.can_upload = in.readByte() != 0;
+        this.updated = in.readLong();
+        this.created = in.readLong();
+        this.thumb_id = in.readInt();
+        this.thumb_src = in.readString();
+        this.photo = in.readParcelable(VKPhotoSizes.class.getClassLoader());
+    }
+
+    /**
+     * Creates empty PhotoAlbum instance.
+     */
+    public VKApiPhotoAlbum() {
+
+    }
+
+    public boolean isClosed() {
+        return privacy != VKPrivacy.PRIVACY_ALL;
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public String toString() {
+        return title;
+    }
+
+    @Override
+    public CharSequence toAttachmentString() {
+        return new StringBuilder(TYPE_ALBUM).append(owner_id).append('_').append(id);
+    }
+
+    @Override
+    public String getType() {
+        return TYPE_ALBUM;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeString(this.title);
+        dest.writeInt(this.size);
+        dest.writeInt(this.privacy);
+        dest.writeString(this.description);
+        dest.writeInt(this.owner_id);
+        dest.writeByte(can_upload ? (byte) 1 : (byte) 0);
+        dest.writeLong(this.updated);
+        dest.writeLong(this.created);
+        dest.writeInt(this.thumb_id);
+        dest.writeString(this.thumb_src);
+        dest.writeParcelable(this.photo, flags);
+    }
+
+    public static Creator<VKApiPhotoAlbum> CREATOR = new Creator<VKApiPhotoAlbum>() {
+        public VKApiPhotoAlbum createFromParcel(Parcel source) {
+            return new VKApiPhotoAlbum(source);
+        }
+
+        public VKApiPhotoAlbum[] newArray(int size) {
+            return new VKApiPhotoAlbum[size];
+        }
+    };
+
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VkVideoArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VkVideoArray.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VkVideoArray.java	(revision )
@@ -0,0 +1,15 @@
+package com.vk.sdk.api.model;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Created by Lynnfield on 23.11.2015.
+ */
+public class VkVideoArray extends VKList<VKApiVideo> {
+    @Override
+    public VKApiModel parse(JSONObject response) throws JSONException {
+        fill(response, VKApiVideo.class);
+        return this;
+    }
+}
Index: app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_main.xml	(revision )
+++ app/src/main/res/layout/activity_main.xml	(revision )
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/drawer_layout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:fitsSystemWindows="true"
+    tools:openDrawer="start">
+
+    <include
+        layout="@layout/toolbar_activity"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+    <android.support.design.widget.NavigationView
+        android:id="@+id/nav_view"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:layout_gravity="start"
+        android:fitsSystemWindows="true"
+        app:headerLayout="@layout/drawer_header"
+        app:menu="@menu/drawer_menu" />
+
+</android.support.v4.widget.DrawerLayout>
+
Index: app/src/main/res/values/drawables.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/drawables.xml	(revision )
+++ app/src/main/res/values/drawables.xml	(revision )
@@ -0,0 +1,8 @@
+<resources xmlns:android="http://schemas.android.com/apk/res/android">
+    <item name="ic_menu_camera" type="drawable">@android:drawable/ic_menu_camera</item>
+    <item name="ic_menu_gallery" type="drawable">@android:drawable/ic_menu_gallery</item>
+    <item name="ic_menu_slideshow" type="drawable">@android:drawable/ic_menu_slideshow</item>
+    <item name="ic_menu_manage" type="drawable">@android:drawable/ic_menu_manage</item>
+    <item name="ic_menu_share" type="drawable">@android:drawable/ic_menu_share</item>
+    <item name="ic_menu_send" type="drawable">@android:drawable/ic_menu_send</item>
+</resources>
Index: vksdk_library/src/main/java/com/vk/sdk/api/VKDefaultParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/VKDefaultParser.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/VKDefaultParser.java	(revision )
@@ -0,0 +1,48 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api;
+
+import com.vk.sdk.VKSdk;
+import com.vk.sdk.api.model.VKApiModel;
+import org.json.JSONObject;
+
+/**
+ * This default parser uses standard model as initialized class, then calls {@link VKApiModel#parse(JSONObject)} method at model instance
+ */
+public class VKDefaultParser extends VKParser {
+    private final Class<? extends VKApiModel> mModelClass;
+    public VKDefaultParser(Class<? extends VKApiModel> objectModel) {
+        mModelClass = objectModel;
+    }
+    @Override
+    public Object createModel(JSONObject object) {
+        try {
+            VKApiModel model = mModelClass.newInstance();
+            model.parse(object);
+            return model;
+        } catch (Exception e) {
+            if (VKSdk.DEBUG)
+                e.printStackTrace();
+        }
+        return null;
+    }
+}
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(revision )
+++ .idea/compiler.xml	(revision )
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <resourceExtensions />
+    <wildcardResourcePatterns>
+      <entry name="!?*.java" />
+      <entry name="!?*.form" />
+      <entry name="!?*.class" />
+      <entry name="!?*.groovy" />
+      <entry name="!?*.scala" />
+      <entry name="!?*.flex" />
+      <entry name="!?*.kt" />
+      <entry name="!?*.clj" />
+      <entry name="!?*.aj" />
+    </wildcardResourcePatterns>
+    <annotationProcessing>
+      <profile default="true" name="Default" enabled="false">
+        <processorPath useClasspath="true" />
+      </profile>
+    </annotationProcessing>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(revision )
+++ .idea/modules.xml	(revision )
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/app/app.iml" filepath="$PROJECT_DIR$/app/app.iml" />
+      <module fileurl="file://$PROJECT_DIR$/vkDocs-master.iml" filepath="$PROJECT_DIR$/vkDocs-master.iml" />
+      <module fileurl="file://$PROJECT_DIR$/vksdk_library/vksdk_library.iml" filepath="$PROJECT_DIR$/vksdk_library/vksdk_library.iml" />
+      <module fileurl="file://$PROJECT_DIR$/vksdk_library/vksdk_library.iml" filepath="$PROJECT_DIR$/vksdk_library/vksdk_library.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/TextsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/TextsFragment.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/TextsFragment.java	(revision )
@@ -0,0 +1,113 @@
+package com.vkdocs.oceanminded.vkdocs.Fragments;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.VKResponse;
+import com.vk.sdk.api.model.VKApiDocument;
+import com.vk.sdk.api.model.VKDocsArray;
+import com.vkdocs.oceanminded.vkdocs.Adapters.RVAdapter;
+import com.vkdocs.oceanminded.vkdocs.R;
+import com.vkdocs.oceanminded.vkdocs.Services.VKDataService;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by josh on 23.01.16.
+ */
+public class TextsFragment extends Fragment {
+
+    private TextView notdosc;
+    private List<VKApiDocument> documentslist;
+    private RecyclerView documenstListRV;
+    private RVAdapter adapter;
+    public static int DOCS_PARAMETR = 1;
+    public static final String VKDOCS_LOADING = "Test";
+    public static final String ALARM_MESSAGE = "Срочно пришлите кота!";
+
+
+
+
+
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+
+        super.onCreate(savedInstanceState);
+
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.fragmenta,
+                container, false);
+
+        notdosc =(TextView) view.findViewById(R.id.notdocs_text);
+        documenstListRV = (RecyclerView) view.findViewById(R.id.documents_recycleview);
+        LinearLayoutManager llm = new LinearLayoutManager(getContext());
+        documenstListRV.setLayoutManager(llm);
+        documenstListRV.setHasFixedSize(true);
+        documentslist = new ArrayList<>();
+        getDocumentFromServer();
+
+        return view;
+    }
+
+    public void updateData(){
+        Intent vkServiceIntent = new Intent(getActivity(),VKDataService.class);
+
+
+    }
+    public void getDocumentFromServer() {
+        List<VKApiDocument> docsList = new ArrayList<VKApiDocument>();
+        VKRequest getdocs = new VKRequest("docs.get", VKParameters.from("type", DOCS_PARAMETR), VKRequest.HttpMethod.GET, VKDocsArray.class);
+        getdocs.executeWithListener(new VKRequest.VKRequestListener() {
+            @Override
+            public void onProgress(VKRequest.VKProgressType progressType, long bytesLoaded, long bytesTotal) {
+                super.onProgress(progressType, bytesLoaded, bytesTotal);
+            }
+
+            @Override
+            public void onComplete(VKResponse response) {
+                super.onComplete(response);
+                VKDocsArray docsArray = (VKDocsArray) response.parsedModel;
+                for (VKApiDocument doc : docsArray) {
+                    documentslist.add(doc);
+                    //Log.i("json", response.json.toString());
+                }
+                adapter = new RVAdapter(documentslist);
+                documenstListRV.setAdapter(adapter);
+            }
+
+            @Override
+            public void attemptFailed(VKRequest request, int attemptNumber, int totalAttempts) {
+                super.attemptFailed(request, attemptNumber, totalAttempts);
+            }
+
+            @Override
+            public void onError(VKError error) {
+                super.onError(error);
+            }
+        });
+//        Log.i("list.size", "" + documentslist.size());
+    }
+
+
+    @Override
+    public void onAttach(Context context) {
+        super.onAttach(context);
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKJsonOperation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKJsonOperation.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKJsonOperation.java	(revision )
@@ -0,0 +1,79 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.httpClient;
+
+import org.json.JSONObject;
+
+/**
+ * Operation for loading HTTP-requests that may return json response
+ */
+public class VKJsonOperation extends VKHttpOperation<JSONObject> {
+    private JSONObject mResponseJson;
+
+    /**
+     * Create new operation with request
+     *
+     * @param uriRequest Request prepared manually or with VKHttpClient
+     */
+    public VKJsonOperation(VKHttpClient.VKHTTPRequest uriRequest) {
+        super(uriRequest);
+    }
+
+    /**
+     * Generate JSON-response for current operation
+     *
+     * @return Parsed JSON object from response string
+     */
+    public JSONObject getResponseJson() {
+        if (mResponseJson == null) {
+            String response = getResponseString();
+            if (response == null)
+                return null;
+            try {
+                mResponseJson = new JSONObject(response);
+            } catch (Exception e) {
+                mLastException = e;
+            }
+        }
+        return mResponseJson;
+    }
+
+    @Override
+    protected boolean postExecution() {
+        if (!super.postExecution())
+            return false;
+        mResponseJson = getResponseJson();
+        return true;
+    }
+
+    @Override
+    public JSONObject getResultObject() {
+        return mResponseJson;
+    }
+
+    /**
+     * Class representing operation listener for VKJsonOperation
+     */
+    public static abstract class VKJSONOperationCompleteListener extends VKAbstractCompleteListener<VKJsonOperation, JSONObject> {
+
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiUsers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiUsers.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiUsers.java	(revision )
@@ -0,0 +1,154 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.methods;
+
+import com.vk.sdk.api.VKApiConst;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKParser;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.model.VKApiUserFull;
+import com.vk.sdk.api.model.VKList;
+import com.vk.sdk.api.model.VKUsersArray;
+
+import org.json.JSONObject;
+
+/**
+ * Builds requests for API.users part
+ */
+public class VKApiUsers extends VKApiBase {
+    /**
+     * Returns basic information about current user
+     *
+     * @return Request for load
+     */
+    public VKRequest get() {
+        return get(null);
+    }
+
+    /**
+     * https://vk.com/dev/users.get
+     *
+     * @param params use parameters from description with VKApiConst class
+     * @return Request for load
+     */
+    public VKRequest get(VKParameters params) {
+        return prepareRequest("get", params, new VKParser() {
+            @Override
+            public Object createModel(JSONObject object) {
+                return new VKList<>(object, VKApiUserFull.class);
+            }
+        });
+    }
+
+    /**
+     * https://vk.com/dev/users.search
+     *
+     * @param params use parameters from description with VKApiConst class
+     * @return Request for load
+     */
+    public VKRequest search(VKParameters params) {
+        return prepareRequest("search", params, VKUsersArray.class);
+    }
+
+    /**
+     * https://vk.com/dev/users.isAppUser
+     *
+     * @return Request for load
+     */
+    public VKRequest isAppUser() {
+        return prepareRequest("isAppUser", null);
+    }
+
+    /**
+     * https://vk.com/dev/users.isAppUser
+     *
+     * @param userID ID of user to check
+     * @return Request for load
+     */
+    public VKRequest isAppUser(final int userID) {
+        return prepareRequest("isAppUser",
+                new VKParameters() {
+                    /**
+                     *
+                     */
+                    private static final long serialVersionUID = 7458591447441581671L;
+
+                    {
+                        put(VKApiConst.USER_ID, String.valueOf(userID));
+                    }
+                });
+    }
+
+    /**
+     * https://vk.com/dev/users.getSubscriptions
+     *
+     * @return Request for load
+     */
+    public VKRequest getSubscriptions() {
+        return getSubscriptions(null);
+    }
+
+    /**
+     * https://vk.com/dev/users.getSubscriptions
+     *
+     * @param params use parameters from description with VKApiConst class
+     * @return Request for load
+     */
+    public VKRequest getSubscriptions(VKParameters params) {
+        return prepareRequest("getSubscriptions", params);
+    }
+
+    /**
+     * https://vk.com/dev/users.getFollowers
+     *
+     * @return Request for load
+     */
+    public VKRequest getFollowers() {
+        return getFollowers(null);
+    }
+
+    /**
+     * https://vk.com/dev/users.getFollowers
+     *
+     * @param params use parameters from description with VKApiConst class
+     * @return Request for load
+     */
+    public VKRequest getFollowers(VKParameters params) {
+        return prepareRequest("getFollowers", params);
+    }
+
+    /**
+     * https://vk.com/dev/users.report
+     * Created on 29.01.14.
+     *
+     * @param params use parameters from description with VKApiConst class
+     * @return Request for load
+     */
+    public VKRequest report(VKParameters params) {
+        return prepareRequest("report", params);
+    }
+
+    @Override
+    protected String getMethodsGroup() {
+        return "users";
+    }
+}
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(revision )
+++ .idea/vcs.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/res/layout/toolbar_activity.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/toolbar_activity.xml	(revision )
+++ app/src/main/res/layout/toolbar_activity.xml	(revision )
@@ -0,0 +1,43 @@
+<android.support.design.widget.CoordinatorLayout
+
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:fitsSystemWindows="true"
+    tools:context=".Activitys.MainActivity">
+
+    <android.support.design.widget.AppBarLayout
+        android:layout_height="wrap_content"
+        android:layout_width="match_parent"
+        android:theme="@style/AppTheme.AppBarOverlay">
+        <android.support.v7.widget.Toolbar
+            android:id="@+id/toolbar"
+            android:layout_width="match_parent"
+            android:layout_height="?attr/actionBarSize"
+            android:background="?attr/colorPrimary"
+            app:popupTheme="@style/AppTheme.PopupOverlay" />
+        <android.support.design.widget.TabLayout
+            android:id="@+id/tabs"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            app:tabMode="scrollable"
+            app:tabGravity="center"/>
+    </android.support.design.widget.AppBarLayout>
+    <android.support.v4.view.ViewPager
+        android:id="@+id/viewpager"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        app:layout_behavior="@string/appbar_scrolling_view_behavior"
+        android:background="#ffffff" />
+    <include layout="@layout/content_main"/>
+    <android.support.design.widget.FloatingActionButton
+        android:id="@+id/fab"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="bottom|end"
+        android:layout_margin="@dimen/fab_margin"
+        android:src="@drawable/ic_plus_white_24dp"
+        app:backgroundTint="@color/colorPrimary" />
+</android.support.design.widget.CoordinatorLayout>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPlace.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPlace.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPlace.java	(revision )
@@ -0,0 +1,168 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * A place object describes a location.
+ */
+@SuppressWarnings("unused")
+public class VKApiPlace extends VKApiModel implements Parcelable, Identifiable {
+
+    /**
+     * Location ID.
+     */
+    public int id;
+
+    /**
+     * Location title.
+     */
+    public String title;
+
+    /**
+     * Geographical latitude, in degrees (from -90 to 90).
+     */
+    public double latitude;
+
+    /**
+     * Geographical longitude, in degrees (from -180 to 180)
+     */
+    public double longitude;
+
+    /**
+     * Date (in Unix time) when the location was added
+     */
+    public long created;
+
+    /**
+     * Numbers of checkins in this place
+     */
+    public int checkins;
+
+    /**
+     * Date (in Unix time) when the location was last time updated
+     */
+    public long updated;
+
+    /**
+     * ID of the country the place is located in, positive number
+     */
+    public int country_id;
+
+    /**
+     * ID of the city the place is located in, positive number
+     */
+    public int city_id;
+
+    /**
+     * Location address.
+     */
+    public String address;
+
+	public VKApiPlace(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills a Place instance from JSONObject.
+     */
+    public VKApiPlace parse(JSONObject from) {
+        id = from.optInt("id");
+        title = from.optString("title");
+        latitude = from.optDouble("latitude");
+        longitude = from.optDouble("longitude");
+        created = from.optLong("created");
+        checkins = from.optInt("checkins");
+        updated = from.optLong("updated");
+        country_id = from.optInt("country");
+        city_id = from.optInt("city");
+        address = from.optString("address");
+        return this;
+    }
+
+    /**
+     * Creates a Place instance from Parcel.
+     */
+    public VKApiPlace(Parcel in) {
+        this.id = in.readInt();
+        this.title = in.readString();
+        this.latitude = in.readDouble();
+        this.longitude = in.readDouble();
+        this.created = in.readLong();
+        this.checkins = in.readInt();
+        this.updated = in.readLong();
+        this.country_id = in.readInt();
+        this.city_id = in.readInt();
+        this.address = in.readString();
+    }
+
+    /**
+     * Creates empty Place instance.
+     */
+    public VKApiPlace() {
+
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeString(this.title);
+        dest.writeDouble(this.latitude);
+        dest.writeDouble(this.longitude);
+        dest.writeLong(this.created);
+        dest.writeInt(this.checkins);
+        dest.writeLong(this.updated);
+        dest.writeInt(this.country_id);
+        dest.writeInt(this.city_id);
+        dest.writeString(address);
+    }
+
+    @Override
+    public String toString() {
+        return address;
+    }
+
+    public static Creator<VKApiPlace> CREATOR = new Creator<VKApiPlace>() {
+        public VKApiPlace createFromParcel(Parcel source) {
+            return new VKApiPlace(source);
+        }
+
+        public VKApiPlace[] newArray(int size) {
+            return new VKApiPlace[size];
+        }
+    };
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiChat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiChat.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiChat.java	(revision )
@@ -0,0 +1,133 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * Chat.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 19.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+/**
+ * Chat object describes a user's chat.
+ */
+@SuppressWarnings("unused")
+public class VKApiChat extends VKApiModel implements Identifiable, android.os.Parcelable {
+
+    /**
+     * Chat ID, positive number.
+     */
+    public int id;
+
+    /**
+     * Type of chat.
+     */
+    public String type;
+
+    /**
+     * Chat title.
+     */
+    public String title;
+
+    /**
+     * ID of the chat starter, positive number
+     */
+    public int admin_id;
+
+    /**
+     * List of chat participants' IDs.
+     */
+    public int[] users;
+
+	public VKApiChat(JSONObject from) {
+		parse(from);
+	}
+    /**
+     * Fills a Chat instance from JSONObject.
+     */
+    public VKApiChat parse(JSONObject source) {
+        id = source.optInt("id");
+        type = source.optString("type");
+        title = source.optString("title");
+        admin_id = source.optInt("admin_id");
+        JSONArray users = source.optJSONArray("users");
+        if(users != null) {
+            this.users = new int[users.length()];
+            for(int i = 0; i < this.users.length; i++) {
+                this.users[i] = users.optInt(i);
+            }
+        }
+        return this;
+    }
+
+    /**
+     * Creates a Chat instance from Parcel.
+     */
+    public VKApiChat(Parcel in) {
+        this.id = in.readInt();
+        this.type = in.readString();
+        this.title = in.readString();
+        this.admin_id = in.readInt();
+        this.users = in.createIntArray();
+    }
+
+    /**
+     * Creates empty Chat instance.
+     */
+    public VKApiChat() {
+
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeString(this.type);
+        dest.writeString(this.title);
+        dest.writeInt(this.admin_id);
+        dest.writeIntArray(this.users);
+    }
+
+    public static Creator<VKApiChat> CREATOR = new Creator<VKApiChat>() {
+        public VKApiChat createFromParcel(Parcel source) {
+            return new VKApiChat(source);
+        }
+
+        public VKApiChat[] newArray(int size) {
+            return new VKApiChat[size];
+        }
+    };
+}
Index: vksdk_library/src/main/res/drawable/vk_clear_shape.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/drawable/vk_clear_shape.xml	(revision )
+++ vksdk_library/src/main/res/drawable/vk_clear_shape.xml	(revision )
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+<solid android:color="@color/vk_clear"/>
+</shape>
\ No newline at end of file
Index: app/src/main/res/drawable-v21/ic_file_upload_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_file_upload_black_24dp.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_file_upload_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M9,16h6v-6h4l-7,-7 -7,7h4zM5,18h14v2L5,20z"/>
+</vector>
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/DownloadTask.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/DownloadTask.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/DownloadTask.java	(revision )
@@ -0,0 +1,82 @@
+package com.vkdocs.oceanminded.vkdocs;
+
+import android.os.AsyncTask;
+import android.os.Environment;
+import android.util.Log;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.net.URL;
+import java.net.URLConnection;
+
+/**
+ * Created by josh on 16.01.16.
+ */
+class DownloadTask extends AsyncTask<String, Integer, String> {
+
+    /**
+     * Before starting background thread Show Progress Bar Dialog
+     * */
+    @Override
+    protected void onPreExecute() {
+        super.onPreExecute();
+
+    }
+
+    /**
+     * Downloading file in background thread
+     * */
+    @Override
+    protected String doInBackground(String... f_url) {
+        try {
+
+            URL url = new URL(f_url[0]);
+            File folder = new File(Environment.getExternalStorageDirectory() +"/VkDocs");
+            folder.mkdirs();
+            if (!folder.exists()) {
+
+            }
+            String folderpath = folder.toString();
+
+
+            URLConnection connection = url.openConnection();
+            InputStream in = connection.getInputStream();
+            FileOutputStream fos = new FileOutputStream(new File(folderpath,"file.jpg"));
+            byte[] buf = new byte[512];
+            while (true) {
+                int len = in.read(buf);
+                if (len == -1) {
+                    break;
+                }
+                fos.write(buf, 0, len);
+            }
+            in.close();
+            fos.flush();
+            fos.close();
+        } catch (Exception e) {
+            Log.i("information", e.toString());
+        }
+
+        return null;
+    }
+
+    /**
+     * Updating progress bar
+     * */
+    protected void onProgressUpdate(String... progress) {
+        // setting progress percentage
+        Log.i("download",progress.toString());
+    }
+
+    /**
+     * After completing background task Dismiss the progress dialog
+     * **/
+    @Override
+    protected void onPostExecute(String file_url) {
+        // dismiss the dialog after the file was downloaded
+
+
+    }
+
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiCaptcha.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiCaptcha.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiCaptcha.java	(revision )
@@ -0,0 +1,38 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.methods;
+
+import com.vk.sdk.api.VKRequest;
+
+/**
+ * Contains single method for forcing captcha
+ */
+public class VKApiCaptcha extends VKApiBase {
+    public VKRequest force() {
+        return prepareRequest("force", null);
+    }
+
+    @Override
+    protected String getMethodsGroup() {
+        return "captcha";
+    }
+}
\ No newline at end of file
Index: app/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/proguard-rules.pro	(revision )
+++ app/proguard-rules.pro	(revision )
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in C:\Users\kolya\AppData\Local\Android\sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
Index: vksdk_library/src/main/java/com/vk/sdk/dialogs/VKOpenAuthDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/dialogs/VKOpenAuthDialog.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/dialogs/VKOpenAuthDialog.java	(revision )
@@ -0,0 +1,247 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.dialogs;
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.view.Window;
+import android.webkit.WebSettings;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+
+import com.vk.sdk.R;
+import com.vk.sdk.VKSdk;
+import com.vk.sdk.VKServiceActivity;
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.util.VKUtil;
+
+import java.util.Locale;
+import java.util.Map;
+
+public class VKOpenAuthDialog implements DialogInterface.OnDismissListener {
+
+	public static final String VK_EXTRA_CLIENT_ID = "client_id";
+	public static final String VK_EXTRA_SCOPE = "scope";
+	public static final String VK_EXTRA_API_VERSION = "version";
+	public static final String VK_EXTRA_REVOKE = "revoke";
+
+	public static final String VK_RESULT_INTENT_NAME = "com.vk.auth-token";
+	public static final String VK_EXTRA_TOKEN_DATA = "extra-token-data";
+	public static final String VK_EXTRA_VALIDATION_REQUEST = "extra-validation-request";
+
+	private static final String REDIRECT_URL = "https://oauth.vk.com/blank.html";
+	private static final String ERROR = "error";
+	private static final String CANCEL = "cancel";
+
+	@Nullable
+	protected VKError mVkError;
+	protected WebView mWebView;
+	protected View mProgress;
+	protected View mView;
+	protected Bundle mBundle;
+	protected Intent mData;
+	protected int mResCode = Activity.RESULT_OK;
+	protected int mReqCode;
+	protected Dialog mDialog;
+
+	public void show(@NonNull Activity activity, Bundle bundle, int reqCode, @Nullable VKError vkError) {
+		mVkError = vkError;
+		mBundle = bundle;
+		mReqCode = reqCode;
+		mView = View.inflate(activity, R.layout.vk_open_auth_dialog, null);
+
+		mProgress = mView.findViewById(R.id.progress);
+		mWebView = (WebView) mView.findViewById(R.id.copyUrl);
+
+		final Dialog dialog = new Dialog(activity, R.style.VKAlertDialog);
+		dialog.setContentView(mView);
+		dialog.setOnCancelListener(new DialogInterface.OnCancelListener() {
+			@Override
+			public void onCancel(DialogInterface dialogInterface) {
+				dialog.dismiss();
+			}
+		});
+		dialog.setOnDismissListener(this);
+		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+			dialog.getWindow().setStatusBarColor(Color.TRANSPARENT);
+		}
+
+		mDialog = dialog;
+		mDialog.show();
+
+		loadPage();
+	}
+
+	@SuppressLint("SetJavaScriptEnabled")
+	private void loadPage() {
+		try {
+			String urlToLoad;
+			urlToLoad = mVkError == null ? null : mVkError.redirectUri;
+			if (urlToLoad == null) {
+				int appId = mBundle.getInt(VK_EXTRA_CLIENT_ID, 0);
+				String scope = mBundle.getString(VK_EXTRA_SCOPE),
+						apiV = mBundle.getString(VK_EXTRA_API_VERSION);
+				boolean revoke = mBundle.getBoolean(VK_EXTRA_REVOKE, false);
+				urlToLoad = String.format(Locale.US,
+						"https://oauth.vk.com/authorize?client_id=%s" +
+								"&scope=%s" +
+								"&redirect_uri=%s" +
+								"&display=mobile" +
+								"&v=%s" +
+								"&response_type=token&revoke=%d",
+						appId, scope, REDIRECT_URL, apiV, revoke ? 1 : 0);
+			}
+			mWebView.setWebViewClient(new OAuthWebViewClient(this));
+			WebSettings webSettings = mWebView.getSettings();
+			webSettings.setJavaScriptEnabled(true);
+			mWebView.loadUrl(urlToLoad);
+			mWebView.setBackgroundColor(Color.TRANSPARENT);
+			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+				mWebView.setLayerType(WebView.LAYER_TYPE_SOFTWARE, null);
+			}
+			mWebView.setVerticalScrollBarEnabled(false);
+			mWebView.setVisibility(View.INVISIBLE);
+			mWebView.setOverScrollMode(WebView.OVER_SCROLL_NEVER);
+			mProgress.setVisibility(View.VISIBLE);
+		} catch (Exception e) {
+			setResult(Activity.RESULT_CANCELED);
+			finish();
+		}
+	}
+
+	private static class OAuthWebViewClient extends WebViewClient {
+		boolean canShowPage = true;
+		@NonNull
+		final VKOpenAuthDialog vkOpenAuthDialog;
+
+		public OAuthWebViewClient(@NonNull VKOpenAuthDialog vkOpenAuthDialog) {
+			this.vkOpenAuthDialog = vkOpenAuthDialog;
+		}
+
+		boolean processUrl(String url) {
+			if (url.startsWith(REDIRECT_URL)) {
+				Intent data = new Intent(VK_RESULT_INTENT_NAME);
+				String extraData = url.substring(url.indexOf('#') + 1);
+				data.putExtra(VK_EXTRA_TOKEN_DATA, extraData);
+				Map<String, String> resultParams = VKUtil.explodeQueryString(extraData);
+
+				if (vkOpenAuthDialog.mVkError != null) {
+					data.putExtra(VK_EXTRA_VALIDATION_REQUEST, vkOpenAuthDialog.mVkError.request.registerObject());
+				}
+				if (resultParams != null && (resultParams.containsKey(ERROR) || resultParams.containsKey(CANCEL))) {
+					vkOpenAuthDialog.setResult(Activity.RESULT_CANCELED, data);
+				} else {
+					vkOpenAuthDialog.setResult(Activity.RESULT_OK, data);
+				}
+				vkOpenAuthDialog.finish();
+				return true;
+			}
+			return false;
+		}
+
+		@Override
+		public boolean shouldOverrideUrlLoading(WebView view, String url) {
+			if (processUrl(url))
+				return true;
+			canShowPage = true;
+			return false;
+		}
+
+		@Override
+		public void onPageStarted(WebView view, String url, Bitmap favicon) {
+			super.onPageStarted(view, url, favicon);
+			processUrl(url);
+		}
+
+		@Override
+		public void onPageFinished(WebView view, String url) {
+			super.onPageFinished(view, url);
+			if (canShowPage) {
+				if (vkOpenAuthDialog.mProgress != null) {
+					vkOpenAuthDialog.mProgress.setVisibility(View.GONE);
+				}
+				view.setVisibility(View.VISIBLE);
+			}
+		}
+
+		@Override
+		public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
+			super.onReceivedError(view, errorCode, description, failingUrl);
+			canShowPage = false;
+			AlertDialog.Builder builder = new AlertDialog.Builder(view.getContext())
+					.setMessage(description)
+					.setPositiveButton(R.string.vk_retry, new DialogInterface.OnClickListener() {
+						@Override
+						public void onClick(DialogInterface dialogInterface, int i) {
+							vkOpenAuthDialog.loadPage();
+						}
+					})
+					.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
+						@Override
+						public void onClick(DialogInterface dialogInterface, int i) {
+							vkOpenAuthDialog.finish();
+						}
+					});
+			try {
+				builder.show();
+			} catch (Exception e) {
+				if (VKSdk.DEBUG)
+					e.printStackTrace();
+			}
+		}
+	}
+
+	@Override
+	public void onDismiss(DialogInterface dialog) {
+		Activity activity = mView == null ? null : (Activity) mView.getContext();
+		if (activity instanceof VKServiceActivity) {
+			((VKServiceActivity) activity).onActivityResultPublic(mReqCode, mResCode, mData);
+		}
+	}
+
+	private void setResult(int code) {
+		mResCode = code;
+	}
+
+	private void setResult(int code, Intent data) {
+		mResCode = code;
+		mData = data;
+	}
+
+	private void finish() {
+		if (mDialog != null) {
+			mDialog.dismiss();
+		}
+	}
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiFriends.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiFriends.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiFriends.java	(revision )
@@ -0,0 +1,89 @@
+package com.vk.sdk.api.methods;
+
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.model.VKUsersArray;
+
+/**
+ * Section friends
+ * Created by alex_xpert on 29.01.14.
+ */
+public class VKApiFriends extends VKApiBase {
+
+    public VKRequest get(VKParameters params) {
+        if (params.get("fields") != null) {
+            return prepareRequest("get", params, VKUsersArray.class);
+        } else {
+            return prepareRequest("get", params);
+        }
+    }
+
+    public VKRequest getOnline(VKParameters params) {
+        return prepareRequest("getOnline", params);
+    }
+
+    public VKRequest getMutual(VKParameters params) {
+        return prepareRequest("getMutual", params);
+    }
+
+    public VKRequest getRecent(VKParameters params) {
+        return prepareRequest("getRecent", params);
+    }
+
+    public VKRequest getRequests(VKParameters params) {
+        return prepareRequest("getRequests", params);
+    }
+
+    public VKRequest add(VKParameters params) {
+        return prepareRequest("add", params);
+    }
+
+    public VKRequest edit(VKParameters params) {
+        return prepareRequest("edit", params);
+    }
+
+    public VKRequest delete(VKParameters params) {
+        return prepareRequest("delete", params);
+    }
+
+    public VKRequest getLists(VKParameters params) {
+        return prepareRequest("getLists", params);
+    }
+
+    public VKRequest addList(VKParameters params) {
+        return prepareRequest("addList", params);
+    }
+
+    public VKRequest editList(VKParameters params) {
+        return prepareRequest("editList", params);
+    }
+
+    public VKRequest deleteList(VKParameters params) {
+        return prepareRequest("deleteList", params);
+    }
+
+    public VKRequest getAppUsers(VKParameters params) {
+        return prepareRequest("getAppUsers", params);
+    }
+
+    public VKRequest getByPhones(VKParameters params) {
+        return prepareRequest("getByPhones", params, VKUsersArray.class);
+    }
+
+    public VKRequest deleteAllRequests(VKParameters params) {
+        return prepareRequest("deleteAllRequests", params);
+    }
+
+    public VKRequest getSuggestions(VKParameters params) {
+        return prepareRequest("getSuggestions", params);
+    }
+
+    public VKRequest areFriends(VKParameters params) {
+        return prepareRequest("areFriends", params);
+    }
+
+    @Override
+    protected String getMethodsGroup() {
+        return "friends";
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiDocs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiDocs.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiDocs.java	(revision )
@@ -0,0 +1,128 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.methods;
+
+import com.vk.sdk.api.VKApiConst;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.docs.VKUploadDocRequest;
+import com.vk.sdk.api.docs.VKUploadWallDocRequest;
+import com.vk.sdk.api.model.VKDocsArray;
+import com.vk.sdk.util.VKUtil;
+
+import java.io.File;
+
+/**
+ * Builds requests for API.docs part
+ */
+public class VKApiDocs extends VKApiBase {
+
+    /**
+     * https://vk.com/dev/docs.getUploadServer
+     * Returns upload server for document
+     * @return Request for get server address
+     */
+    public VKRequest getUploadServer() {
+        return prepareRequest("getUploadServer", null);    }
+
+    /**
+     * https://vk.com/dev/docs.getUploadServer
+     * Returns upload server for document
+     * @param groupId community ID (if the document will be uploaded to the community).
+     * @return Request for get server address
+     */
+    public VKRequest getUploadServer(long groupId) {
+        return prepareRequest("getUploadServer", VKUtil.paramsFrom(VKApiConst.GROUP_ID, groupId));
+    }
+
+    /**
+     * https://vk.com/dev/docs.getWallUploadServer
+     * Returns wall upload server for document
+     * @return Request for get server address
+     */
+    public VKRequest getUploadWallServer() {
+        return prepareRequest("getWallUploadServer", null);    }
+
+    /**
+     * https://vk.com/dev/docs.getWallUploadServer
+     * Returns wall upload server for document
+     * @param groupId community ID (if the document will be uploaded to the community).
+     * @return Request for get server address
+     */
+    public VKRequest getUploadWallServer(long groupId) {
+        return prepareRequest("getWallUploadServer", VKUtil.paramsFrom(VKApiConst.GROUP_ID, groupId));
+    }
+
+    /**
+     * https://vk.com/dev/docs.save
+     * Saves a document after uploading it to a server.
+     * Returns an array of uploaded document objects.
+     * @param params use parameters from description with VKApiConst class
+     * @return Request for upload file on server
+     */
+    public VKRequest save(VKParameters params) {
+        return prepareRequest("save", params, VKDocsArray.class);
+    }
+
+    /**
+     * Upload a document to VK servers
+     * @param doc Doc object to upload
+     * @return Prepared vk request for doc upload
+     */
+    public VKRequest uploadDocRequest(File doc) {
+        return new VKUploadDocRequest(doc);
+    }
+
+    /**
+     * Upload a document to VK servers
+     * @param doc Doc object to upload
+     * @param groupId Group id or 0
+     * @return Prepared vk request for doc upload
+     */
+    public VKRequest uploadDocRequest(File doc, long groupId) {
+        return new VKUploadDocRequest(doc, groupId);
+    }
+
+    /**
+     * Upload a document to VK servers
+     * @param doc Doc object to upload
+     * @return Prepared vk request for doc upload
+     */
+    public VKRequest uploadWallDocRequest(File doc) {
+        return new VKUploadWallDocRequest(doc);
+    }
+
+    /**
+     * Upload a document to VK servers
+     * @param doc Doc object to upload
+     * @param groupId Group id or 0
+     * @return Prepared vk request for doc upload
+     */
+    public VKRequest uploadWallDocRequest(File doc, long groupId) {
+        return new VKUploadWallDocRequest(doc, groupId);
+    }
+
+    @Override
+    protected String getMethodsGroup() {
+        return "docs";
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/photo/VKUploadMessagesPhotoRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/photo/VKUploadMessagesPhotoRequest.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/photo/VKUploadMessagesPhotoRequest.java	(revision )
@@ -0,0 +1,43 @@
+package com.vk.sdk.api.photo;
+
+import com.vk.sdk.api.VKApi;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.photo.VKUploadImage;
+import com.vk.sdk.api.photo.VKUploadPhotoBase;
+import com.vk.sdk.util.VKJsonHelper;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.File;
+
+public class VKUploadMessagesPhotoRequest extends VKUploadPhotoBase {
+    private static final long serialVersionUID = 1L;
+
+    public VKUploadMessagesPhotoRequest(File image) {
+        super();
+        mImages = new File[]{image};
+    }
+
+    public VKUploadMessagesPhotoRequest(VKUploadImage image) {
+        super();
+        mImages = new File[]{image.getTmpFile()};
+    }
+
+    @Override
+    protected VKRequest getServerRequest() {
+        return VKApi.photos().getMessagesUploadServer();
+    }
+
+    @Override
+    protected VKRequest getSaveRequest(JSONObject response) {
+        VKRequest saveRequest;
+        try {
+            saveRequest = VKApi.photos().saveMessagesPhoto(new VKParameters(VKJsonHelper.toMap(response)));
+        } catch (JSONException e) {
+            return null;
+        }
+        return saveRequest;
+    }
+}
Index: app/src/main/res/drawable/progres_bar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/progres_bar.xml	(revision )
+++ app/src/main/res/drawable/progres_bar.xml	(revision )
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<rotate xmlns:android="http://schemas.android.com/apk/res/android"
+    android:fromDegrees="90"
+    android:toDegrees="100">
+    <shape
+        android:innerRadiusRatio="1"
+        android:shape="ring"
+        android:thickness="3dp"
+        android:useLevel="true"><!-- this line fixes the issue for lollipop api 21 -->
+
+        <gradient
+            android:angle="0"
+            android:type="sweep"
+            android:useLevel="false" />
+    </shape>
+</rotate>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/dialogs/VKShareDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/dialogs/VKShareDialog.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/dialogs/VKShareDialog.java	(revision )
@@ -0,0 +1,166 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.dialogs;
+
+import android.annotation.SuppressLint;
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v4.app.DialogFragment;
+
+import com.vk.sdk.api.model.VKApiPhoto;
+import com.vk.sdk.api.model.VKPhotoArray;
+import com.vk.sdk.api.photo.VKUploadImage;
+
+/**
+ * Share dialog for making post directly to VK.
+ * Now it supports: attaching 1 named link, attaching photos with upload,
+ * attaching photos already uploaded to VK.
+ * Example usage:
+ * <pre>
+ * {@code VKPhotoArray photos = new VKPhotoArray();
+ * photos.add(new VKApiPhoto("photo-47200925_314622346"));
+ * new VKShareDialogBuilder()
+ * .setText("I created this post with VK Android SDK\nSee additional information below\n#vksdk")
+ * .setUploadedPhotos(photos)
+ * .setAttachmentImages(new VKUploadImage[]{
+ * new VKUploadImage(myBitmap, VKImageParameters.pngImage())
+ * })
+ * .setAttachmentLink("VK Android SDK information", "https://vk.com/dev/android_sdk")
+ * .setShareDialogListener(new VKShareDialog.VKShareDialogListener() {
+ * public void onVkShareComplete(int postId) {
+ *
+ * }
+ * public void onVkShareCancel() {
+ *
+ * }
+ * })
+ * .show(getFragmentManager(), "VK_SHARE_DIALOG");
+ * }
+ * </pre>
+ */
+public class VKShareDialog extends DialogFragment implements VKShareDialogDelegate.DialogFragmentI {
+
+	private VKShareDialogDelegate mDelegate = new VKShareDialogDelegate(this);
+
+	/** Use VKShareDialogBuilder */
+	@Deprecated
+	public VKShareDialog() {
+	}
+
+	@SuppressLint("ValidFragment")
+	VKShareDialog(VKShareDialogBuilder builder) {
+		mDelegate.setAttachmentImages(builder.attachmentImages);
+		mDelegate.setText(builder.attachmentText);
+		if (builder.linkTitle != null && builder.linkUrl != null) {
+			mDelegate.setAttachmentLink(builder.linkTitle, builder.linkUrl);
+		}
+		mDelegate.setUploadedPhotos(builder.existingPhotos);
+		mDelegate.setShareDialogListener(builder.listener);
+	}
+
+	/**
+	 * Sets images that will be uploaded with post
+	 *
+	 * @param images array of VKUploadImage objects with image data and upload parameters
+	 * @return Returns this dialog for chaining
+	 */
+	public VKShareDialog setAttachmentImages(VKUploadImage[] images) {
+		mDelegate.setAttachmentImages(images);
+		return this;
+	}
+
+	/**
+	 * Sets this dialog post text. User can change that text
+	 *
+	 * @param textToPost Text for post
+	 * @return Returns this dialog for chaining
+	 */
+	public VKShareDialog setText(CharSequence textToPost) {
+		mDelegate.setText(textToPost);
+		return this;
+	}
+
+	/**
+	 * Sets dialog link with link name
+	 *
+	 * @param linkTitle A small description for your link
+	 * @param linkUrl   Url that link follows
+	 * @return Returns this dialog for chaining
+	 */
+	public VKShareDialog setAttachmentLink(String linkTitle, String linkUrl) {
+		mDelegate.setAttachmentLink(linkTitle, linkUrl);
+		return this;
+	}
+
+	/**
+	 * Sets array of already uploaded photos from VK, that will be attached to post
+	 *
+	 * @param photos Prepared array of {@link VKApiPhoto} objects
+	 * @return Returns this dialog for chaining
+	 */
+	public VKShareDialog setUploadedPhotos(VKPhotoArray photos) {
+		mDelegate.setUploadedPhotos(photos);
+		return this;
+	}
+
+	/**
+	 * Sets this dialog listener
+	 *
+	 * @param listener {@link VKShareDialogListener} object
+	 * @return Returns this dialog for chaining
+	 */
+	public VKShareDialog setShareDialogListener(VKShareDialogListener listener) {
+		mDelegate.setShareDialogListener(listener);
+		return this;
+	}
+
+	@NonNull
+	@Override
+	public Dialog onCreateDialog(Bundle savedInstanceState) {
+		return mDelegate.onCreateDialog(savedInstanceState);
+	}
+
+
+	@Override
+	@SuppressLint("NewApi")
+	public void onStart() {
+		super.onStart();
+		mDelegate.onStart();
+	}
+
+	@Override
+	public void onSaveInstanceState(Bundle outState) {
+		super.onSaveInstanceState(outState);
+		mDelegate.onSaveInstanceState(outState);
+	}
+
+	@Override
+	public void onCancel(DialogInterface dialog) {
+		super.onCancel(dialog);
+		mDelegate.onCancel(dialog);
+	}
+
+	public interface VKShareDialogListener extends VKShareDialogBuilder.VKShareDialogListener {
+	}
+}
\ No newline at end of file
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Activitys/ImageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Activitys/ImageActivity.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Activitys/ImageActivity.java	(revision )
@@ -0,0 +1,54 @@
+package com.vkdocs.oceanminded.vkdocs.Activitys;
+
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+
+import com.squareup.picasso.Picasso;
+import com.vkdocs.oceanminded.vkdocs.R;
+
+public class ImageActivity extends AppCompatActivity {
+
+    private ImageView image;
+    private boolean mshow = false;
+    private ProgressBar progressBar;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.image);
+
+        progressBar = (ProgressBar) findViewById(R.id.image_progresbar);
+        progressBar.setSystemUiVisibility(View.VISIBLE);
+        image = (ImageView) findViewById(R.id.image_content);
+
+        Picasso.with(this).load(getIntent().getStringExtra("url")).into(image,  new ImageLoadedCallback(progressBar) {
+            @Override
+            public void onSuccess() {
+                if (progressBar != null) {
+                    progressBar.setVisibility(View.GONE);
+                }
+            }
+        });
+
+        hide();
+    }
+
+
+    public void hide(){
+        android.support.v7.app.ActionBar actionBar = getSupportActionBar();
+        if (actionBar != null) {
+            actionBar.hide();
+        }
+    }
+
+
+    public void show(){
+        android.support.v7.app.ActionBar actionBar = getSupportActionBar();
+        if (actionBar != null) {
+            actionBar.show();
+        }
+    }
+
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/VKApiConst.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/VKApiConst.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/VKApiConst.java	(revision )
@@ -0,0 +1,131 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api;
+
+/**
+ * Constants for api. List is not full
+ */
+public class VKApiConst {
+    //Commons
+    public static final String USER_ID = "user_id";
+    public static final String USER_IDS = "user_ids";
+    public static final String FIELDS = "fields";
+    public static final String SORT = "sort";
+    public static final String OFFSET = "offset";
+    public static final String COUNT = "count";
+    public static final String OWNER_ID = "owner_id";
+
+    //auth
+    public static final String VERSION = "v";
+    public static final String HTTPS = "https";
+    public static final String LANG = "lang";
+    public static final String ACCESS_TOKEN = "access_token";
+    public static final String SIG = "sig";
+
+    //get users
+    public static final String NAME_CASE = "name_case";
+
+    //Messages
+    public static final String OUT = "out";
+    public static final String TIME_OFFSET = "time_offset";
+    public static final String FILTERS = "filters";
+    public static final String LAST_MESSAGE_ID = "last_message_id";
+    public static final String START_MESSAGE_ID = "start_message_id";
+    public static final String PREVIEW_LENGTH = "preview_length";
+    public static final String UNREAD = "unread";
+
+    //Get subscriptions
+    public static final String EXTENDED = "extended";
+
+    //Search
+    public static final String Q = "q";
+    public static final String CITY = "city";
+    public static final String COUNTRY = "country";
+    public static final String HOMETOWN = "hometown";
+    public static final String UNIVERSITY_COUNTRY = "university_country";
+    public static final String UNIVERSITY = "university";
+    public static final String UNIVERSITY_YEAR = "university_year";
+    public static final String SEX = "sex";
+    public static final String STATUS = "status";
+    public static final String AGE_FROM = "age_from";
+    public static final String AGE_TO = "age_to";
+    public static final String BIRTH_DAY = "birth_day";
+    public static final String BIRTH_MONTH = "birth_month";
+    public static final String BIRTH_YEAR = "birth_year";
+    public static final String ONLINE = "online";
+    public static final String HAS_PHOTO = "has_photo";
+    public static final String SCHOOL_COUNTRY = "school_country";
+    public static final String SCHOOL_CITY = "school_city";
+    public static final String SCHOOL = "school";
+    public static final String SCHOOL_YEAR = "school_year";
+    public static final String RELIGION = "religion";
+    public static final String INTERESTS = "interests";
+    public static final String COMPANY = "company";
+    public static final String POSITION = "position";
+    public static final String GROUP_ID = "group_id";
+
+    public static final String FRIENDS_ONLY = "friends_only";
+    public static final String FROM_GROUP = "from_group";
+    public static final String MESSAGE = "message";
+    public static final String ATTACHMENTS = "attachments";
+    public static final String SERVICES = "services";
+    public static final String SIGNED = "signed";
+    public static final String PUBLISH_DATE = "publish_date";
+    public static final String LAT = "lat";
+    public static final String LONG = "long";
+    public static final String PLACE_ID = "place_id";
+    public static final String POST_ID = "post_id";
+    public static final String POSTS = "posts";
+
+    //Errors
+    public static final String ERROR_CODE = "error_code";
+    public static final String ERROR_MSG = "error_msg";
+    public static final String REQUEST_PARAMS = "request_params";
+
+    //Captcha
+    public static final String CAPTCHA_IMG = "captcha_img";
+    public static final String CAPTCHA_SID = "captcha_sid";
+    public static final String CAPTCHA_KEY = "captcha_key";
+    public static final String REDIRECT_URI = "redirect_uri";
+
+    //Photos
+    public static final String PHOTO = "photo";
+    public static final String PHOTOS = "photos";
+    public static final String ALBUM_ID = "album_id";
+    public static final String PHOTO_IDS = "photo_ids";
+    public static final String PHOTO_SIZES = "photo_sizes";
+    public static final String REV = "rev";
+    public static final String FEED_TYPE = "feed_type";
+    public static final String FEED = "feed";
+
+    //Videos
+    public static final String ADULT = "adult";
+
+    //Enums
+    enum VKProgressType {
+        VKProgressTypeUpload,
+        VKProgressTypeDownload
+    }
+
+    //Events
+    public static final String VKCaptchaAnsweredEvent = "VKCaptchaAnsweredEvent";
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKHttpClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKHttpClient.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKHttpClient.java	(revision )
@@ -0,0 +1,378 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.httpClient;
+
+import android.content.Context;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Pair;
+
+import com.vk.sdk.VKAccessToken;
+import com.vk.sdk.VKSdk;
+import com.vk.sdk.VKSdkVersion;
+import com.vk.sdk.VKUIHelper;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.model.VKAttachments;
+import com.vk.sdk.util.VKUtil;
+
+import java.io.BufferedWriter;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.OutputStreamWriter;
+import java.io.UnsupportedEncodingException;
+import java.net.CookieHandler;
+import java.net.CookieManager;
+import java.net.CookiePolicy;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.zip.GZIPInputStream;
+
+/**
+ * Class provides configured http client for API request loading
+ */
+public class VKHttpClient {
+
+    /**
+     * Prepares new "normal" request from VKRequest
+     *
+     * @param vkRequest Request, created for some method
+     * @return Prepared request for creating VKHttpOperation
+     */
+    public static VKHTTPRequest requestWithVkRequest(@NonNull VKRequest vkRequest) {
+        VKAccessToken token = VKAccessToken.currentToken();
+        VKHTTPRequest result = new VKHTTPRequest(String.format(Locale.US, "http%s://api.vk.com/method/%s", vkRequest.secure || (token != null && token.httpsRequired) ? "s" : "", vkRequest.methodName));
+        result.headers = getDefaultHeaders();
+        result.setVkParameters(vkRequest.getPreparedParameters());
+        return result;
+    }
+
+    /**
+     * Prepares new request with multipart boundary for uploading files
+     *
+     * @param uploadUrl String url received with some of *.getUploadServer method
+     * @param files     Files array to upload
+     * @return prepared HTTP request, ready for upload
+     */
+    public static VKHTTPRequest fileUploadRequest(@NonNull String uploadUrl, File... files) {
+        VKHTTPRequest request = new VKHTTPRequest(uploadUrl);
+        request.entity = new VKMultipartEntity(files);
+        return request;
+    }
+
+    /**
+     * Prepares new request with multipart boundary for uploading document
+     *
+     * @param uploadUrl String url received with some of *.getUploadServer method
+     * @param file      File to upload
+     * @return prepared HTTP request, ready for upload
+     */
+    public static VKHTTPRequest docUploadRequest(@NonNull String uploadUrl, File file) {
+        VKHTTPRequest request = new VKHTTPRequest(uploadUrl);
+        request.entity = new VKMultipartEntity(new File[]{file}, VKAttachments.TYPE_DOC);
+        return request;
+    }
+
+    /**
+     * Returns map of default headers for any request
+     *
+     * @return Map of default headers
+     */
+    private static Map<String, String> getDefaultHeaders() {
+        return new HashMap<String, String>() {
+            /**
+             *
+             */
+            private static final long serialVersionUID = 200199014417610665L;
+
+            {
+                put("Accept-Encoding", "gzip");
+            }
+        };
+    }
+
+    /**
+     * Executor for performing requests in background
+     */
+    private static final ExecutorService mBackgroundExecutor = Executors.newFixedThreadPool(3);
+    private static final ExecutorService mResponseService = Executors.newSingleThreadExecutor();
+
+    /**
+     * Starts operation in the one of network threads
+     *
+     * @param operation Operation to start
+     */
+    public static void enqueueOperation(final VKAbstractOperation operation) {
+        mBackgroundExecutor.execute(new Runnable() {
+            @Override
+            public void run() {
+                operation.start(mResponseService);
+            }
+        });
+    }
+
+    /**
+     * Cancel http operation request on background thread (to prevent exception)
+     *
+     * @param operation executing http operation
+     */
+    public static void cancelHttpOperation(final VKHttpOperation operation) {
+        mBackgroundExecutor.execute(new Runnable() {
+            @Override
+            public void run() {
+                operation.getUriRequest().abort();
+            }
+        });
+    }
+
+    public static VKHttpResponse execute(VKHTTPRequest request) throws IOException {
+        CookieHandler.setDefault(new CookieManager(null, CookiePolicy.ACCEPT_ALL));
+
+        VKHttpResponse response = new VKHttpResponse(request.createConnection(), null);
+        if (request.isAborted) {
+            return null;
+        }
+        return response;
+    }
+
+    /**
+     * Class for managing http request at VK API
+     */
+    public static class VKHTTPRequest {
+        public URL methodUrl = null;
+        public int timeout = 20000;
+        public List<Pair<String, String>> parameters = null;
+        public VKMultipartEntity entity = null;
+        public Map<String, String> headers = null;
+        public boolean isAborted = false;
+        public HttpURLConnection connection;
+
+        public VKHTTPRequest(@Nullable String url) {
+            if (url != null) {
+                try {
+                    this.methodUrl = new URL(url);
+                } catch (MalformedURLException e) {
+                    if (VKSdk.DEBUG) {
+                        e.printStackTrace();
+                    }
+                }
+            }
+        }
+
+        /**
+         * Write this request params to provided output stream
+         *
+         * @param os Output stream for parameters
+         * @throws IOException
+         */
+        void writeParams(@NonNull OutputStream os) throws IOException {
+            if (this.entity != null) {
+                this.entity.writeTo(os);
+            } else {
+                String query = getQuery();
+                if (query != null && query.length() > 0) {
+                    BufferedWriter writer = new BufferedWriter(
+                            new OutputStreamWriter(os, "UTF-8"));
+                    writer.write(query);
+                    writer.flush();
+                    writer.close();
+                }
+            }
+        }
+
+        /**
+         * Serialize VKParameters map into http query parameters list
+         *
+         * @param params parameters map
+         */
+        void setVkParameters(VKParameters params) {
+            ArrayList<Pair<String, String>> pairs = new ArrayList<>(params.size());
+            for (Map.Entry<String, Object> entry : params.entrySet()) {
+                Object value = entry.getValue();
+                if (value instanceof VKAttachments) {
+                    pairs.add(new Pair<>(entry.getKey(), ((VKAttachments) value).toAttachmentsString()));
+                } else if (value instanceof Collection) {
+                    Collection<?> values = (Collection<?>) value;
+                    //VK style
+                    pairs.add(new Pair<>(entry.getKey(), TextUtils.join(",", values)));
+                } else {
+                    pairs.add(new Pair<>(entry.getKey(), value == null ? null : String.valueOf(value)));
+                }
+            }
+            this.parameters = pairs;
+        }
+
+        /**
+         * Returns prepared http query like k1=v1&k2=v2...
+         *
+         * @return string presentation of http query
+         * @throws UnsupportedEncodingException
+         */
+        public String getQuery() throws UnsupportedEncodingException {
+            if (this.parameters == null) {
+                return null;
+            }
+            ArrayList<String> params = new ArrayList<>(this.parameters.size());
+            for (Pair<String, String> pair : this.parameters) {
+                params.add(String.format("%s=%s", URLEncoder.encode(pair.first, "UTF-8"), URLEncoder.encode(pair.second, "UTF-8")));
+            }
+            return TextUtils.join("&", params);
+        }
+
+        /**
+         * Stops current operation
+         */
+        public void abort() {
+            if (this.connection != null) {
+                this.connection.disconnect();
+            }
+            isAborted = true;
+        }
+
+
+        HttpURLConnection createConnection() throws IOException {
+            URL url = this.methodUrl;
+            this.connection = (HttpURLConnection) url.openConnection();
+
+            this.connection.setReadTimeout(this.timeout);
+            this.connection.setConnectTimeout(this.timeout + 5000);
+            this.connection.setRequestMethod("POST");
+            this.connection.setUseCaches(false);
+            this.connection.setDoInput(true);
+            this.connection.setDoOutput(true);
+
+            try {
+                Context ctx = VKUIHelper.getApplicationContext();
+                if (ctx != null) {
+                    PackageManager packageManager = ctx.getPackageManager();
+                    if (packageManager != null) {
+                        PackageInfo info = packageManager.getPackageInfo(ctx.getPackageName(), 0);
+                        this.connection.setRequestProperty("User-Agent",
+                                String.format(Locale.US,
+                                        "%s/%s (%s; Android %d; Scale/%.2f; VK SDK %s; %s)",
+                                        VKUtil.getApplicationName(ctx), info.versionName,
+                                        Build.MODEL, Build.VERSION.SDK_INT,
+                                        ctx.getResources().getDisplayMetrics().density,
+                                        VKSdkVersion.SDK_VERSION,
+                                        info.packageName));
+                    }
+                }
+            } catch (Exception ignored) {
+            }
+
+            this.connection.setRequestProperty("Connection", "Keep-Alive");
+            if (this.headers != null) {
+                for (Map.Entry<String, String> entry : this.headers.entrySet()) {
+                    this.connection.addRequestProperty(entry.getKey(), entry.getValue());
+                }
+            }
+
+            if (this.entity != null) {
+                this.connection.addRequestProperty("Content-length", this.entity.getContentLength() + "");
+                Pair<String, String> contentType = this.entity.getContentType();
+                this.connection.addRequestProperty(contentType.first, contentType.second);
+            }
+
+            OutputStream os = this.connection.getOutputStream();
+            this.writeParams(os);
+            os.close();
+
+            this.connection.connect();
+
+            return this.connection;
+        }
+    }
+
+    /**
+     * Class for representing http response from VK API
+     */
+    public static class VKHttpResponse {
+
+        public final int statusCode;
+        public final long contentLength;
+        public Map<String, String> responseHeaders = null;
+        public final byte[] responseBytes;
+
+        public VKHttpResponse(HttpURLConnection connection, VKHttpProgressCallback progress) throws IOException {
+            this.statusCode = connection.getResponseCode();
+            this.contentLength = connection.getContentLength();
+
+            if (connection.getHeaderFields() != null) {
+                responseHeaders = new HashMap<>();
+                for (Map.Entry<String, List<String>> header : connection.getHeaderFields().entrySet()) {
+                    responseHeaders.put(header.getKey(), TextUtils.join(",", header.getValue()));
+                }
+            }
+
+            InputStream inputStream = connection.getInputStream();
+            if (responseHeaders != null) {
+                String contentEncoding = responseHeaders.get("Content-Encoding");
+                if (contentEncoding != null && contentEncoding.equalsIgnoreCase("gzip")) {
+                    inputStream = new GZIPInputStream(inputStream);
+                }
+            }
+
+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
+            byte[] buffer = new byte[1024];
+            int bytesRead;
+            long totalBytesRead = 0;
+
+            if (this.contentLength <= 0) {
+                progress = null;
+            }
+
+            while ((bytesRead = inputStream.read(buffer)) != -1) {
+                outputStream.write(buffer, 0, bytesRead);
+                totalBytesRead += bytesRead;
+                if (progress != null) {
+                    progress.onProgress(totalBytesRead, this.contentLength);
+                }
+            }
+            inputStream.close();
+            outputStream.flush();
+
+            responseBytes = outputStream.toByteArray();
+            outputStream.close();
+        }
+    }
+
+    public interface VKHttpProgressCallback {
+        void onProgress(long current, long total);
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiOwner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiOwner.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiOwner.java	(revision )
@@ -0,0 +1,106 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * Owner.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 18.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * This class represents owner of some VK object.
+ */
+@SuppressWarnings("unused")
+public class VKApiOwner extends VKApiModel implements Identifiable, android.os.Parcelable {
+
+    /**
+     * User or group ID.
+     * If ID is positive, owner is user.
+     * If ID is negative, owner is community.
+     */
+    public int id;
+
+    /**
+     * Creates an owner with empty ID.
+     */
+    public VKApiOwner() {
+
+    }
+	public VKApiOwner(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills an owner from JSONObject
+     */
+    public VKApiOwner parse(JSONObject from) {
+        fields = from;
+        id = from.optInt("id");
+        return this;
+    }
+
+    /**
+     * Creates according with given ID.
+     */
+    public VKApiOwner(int id) {
+        this.id = id;
+    }
+
+    /**
+     * Creates an owner from Parcel.
+     */
+    public VKApiOwner(Parcel in) {
+        this.id = in.readInt();
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+    }
+
+    public static Creator<VKApiOwner> CREATOR = new Creator<VKApiOwner>() {
+        public VKApiOwner createFromParcel(Parcel source) {
+            return new VKApiOwner(source);
+        }
+
+        public VKApiOwner[] newArray(int size) {
+            return new VKApiOwner[size];
+        }
+    };
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPhotoSize.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPhotoSize.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPhotoSize.java	(revision )
@@ -0,0 +1,361 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * PhotoSize.java
+ * VK Dev
+ *
+ * Created by Babichev Vitaly on 03.10.13.
+ * Copyright (c) 2013 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.text.TextUtils;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Describes an photo info in <a href="http://vk.com/dev/photo_sizes">special format<a/>.
+ *
+ * Some methods returns information about copies of the original image in different sizes,
+ * Represented as an array of sizes, containing a description of the objects of this class.
+ *
+ * <b>Sizes value example:</b>
+ *
+ * Original photo — https://pp.vk.me/c323930/v323930021/53fb/1VrEC2eSkZQ.jpg,1280x856px,
+ * "width/height" ratio is 1.495327102803738
+ *
+ * <code>
+ sizes: [{
+    src: http://cs323930.vk.me/v323930021/53f7/OwV0l2YFJ7s.jpg
+    width: 75,
+    height: 50,
+    type: 's'
+    }, {
+    src: http://cs323930.vk.me/v323930021/53f8/qX8MRNyUPqg.jpg,
+    width: 130,
+    height: 87,
+    type: 'm'
+    }, {
+    src: http://cs323930.vk.me/v323930021/53f9/7fBJyr9OHMA.jpg,
+    width: 604,
+    height: 404,
+    type: 'x'
+    }, {
+    src: http://cs323930.vk.me/v323930021/53fa/bskHpsuH6sM.jpg,
+    width: 807,
+    height: 540,
+    type: 'y'
+    }, {
+    src: http://cs323930.vk.me/v323930021/53fb/1VrEC2eSkZQ.jpg,
+    width: 1280,
+    height: 856,
+    type: 'z'
+    }, {
+    src: http://cs323930.vk.me/v323930021/53fc/iAl-TIHfRDY.jpg,
+    width: 130,
+    height: 87,
+    type: 'o'
+    }, {
+    src: http://cs323930.vk.me/v323930021/53fd/qjD0fbHkgmI.jpg,
+    width: 200,
+    height: 134,
+    type: 'p'
+    }, {
+    src: http://cs323930.vk.me/v323930021/53fe/3d2nCvvKQfw.jpg,
+    width: 320,
+    height: 214,
+    type: 'q'
+    }, {
+    src: http://cs323930.vk.me/v323930021/53ff/uK_Nj34SIY8.jpg,
+    width: 510,
+    height: 341,
+    type: 'r'
+    }]
+ * </code>
+ *
+ */
+public class VKApiPhotoSize extends VKApiModel implements Comparable<VKApiPhotoSize>, Parcelable, Identifiable {
+
+    /**
+     * Proportional copy with 75px max width
+     */
+    public final static char S = 's';
+
+    /**
+     *  Proportional copy with 130px max width
+     */
+    public final static char M = 'm';
+
+    /**
+     * Proportional copy with 604px max width
+     */
+    public final static char X = 'x';
+
+    /**
+     * Proportional copy with 807px max width
+     */
+    public final static char Y = 'y';
+
+    /**
+     * If original image's "width/height" ratio is less or equal to 3:2, then proportional
+     * copy with 130px max width. If original image's "width/height" ratio is more than 3:2,
+     * then copy of cropped by left side image with 130px max width and 3:2 sides ratio.
+     */
+    public final static char O = 'o';
+
+    /**
+     * If original image's "width/height" ratio is less or equal to 3:2, then proportional
+     * copy with 200px max width. If original image's "width/height" ratio is more than 3:2,
+     * then copy of cropped by left side image with 200px max width and 3:2 sides ratio.
+     */
+    public final static char P = 'p';
+
+    /**
+     * If original image's "width/height" ratio is less or equal to 3:2, then proportional
+     * copy with 320px max width. If original image's "width/height" ratio is more than 3:2,
+     * then copy of cropped by left side image with 320px max width and 3:2 sides ratio.
+     */
+    public final static char Q = 'q';
+
+    /**
+     * Proportional copy with 1280x1024px max size
+     */
+    public final static char Z = 'z';
+
+    /**
+     * Proportional copy with 2560x2048px max size
+     */
+    public final static char W = 'w';
+
+    /**
+     * Url of image
+     */
+    public String src;
+
+    /**
+     * Width of image in pixels
+     */
+    public int width;
+
+    /**
+     * Height of image in pixels
+     */
+    public int height;
+
+    /**
+     * Designation of size and proportions copy, @see {{@link #S}, {@link #M}, {@link #X}, {@link #O}, {@link #P}, {@link #Q}, {@link #Y}, {@link #Z}, {@link #W}}
+     */
+    public char type;
+
+    private VKApiPhotoSize() {
+
+    }
+
+    private VKApiPhotoSize(Parcel in) {
+        this.src = in.readString();
+        this.width = in.readInt();
+        this.height = in.readInt();
+        this.type = (char) in.readInt();
+    }
+
+    @Override
+    public int compareTo(VKApiPhotoSize another) {
+        // Так как основной превалирующий элемент в фотографиях именно ширина и все фотографии пропорциональны,
+        // то сравниваем именно по ней
+        return this.width < another.width ? -1 : (this.width == another.width ? 0 : 1);
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeString(this.src);
+        dest.writeInt(this.width);
+        dest.writeInt(this.height);
+        dest.writeInt((int)this.type);
+    }
+
+    @Override
+    public int getId() {
+        return 0;
+    }
+
+    public static Creator<VKApiPhotoSize> CREATOR = new Creator<VKApiPhotoSize>() {
+        public VKApiPhotoSize createFromParcel(Parcel source) {
+            return new VKApiPhotoSize(source);
+        }
+
+        public VKApiPhotoSize[] newArray(int size) {
+            return new VKApiPhotoSize[size];
+        }
+    };
+
+	public VKApiPhotoSize(JSONObject from) throws JSONException
+	{
+		parse(from, 0, 0);
+	}
+    /**
+     * Creates dimension from {@code source}. Used in parsing.
+     * If size is not specified copies calculates them based on internal algorithms.
+     * @param source object in format, returned VK API, which is generated from the dimension
+     * @param originalWidth original image width in pixels
+     * @param originalHeight original image height in pixels
+     */
+    public static VKApiPhotoSize parse(JSONObject source, int originalWidth, int originalHeight) {
+        VKApiPhotoSize result = new VKApiPhotoSize();
+        result.src = source.optString("src");
+        result.width = source.optInt("width");
+        result.height = source.optInt("height");
+        String type = source.optString("type");
+        if(!TextUtils.isEmpty(type)) {
+            result.type = type.charAt(0);
+        }
+        // Казалось бы, теперь можно с чистой советью закончить метод.
+        // Но нет, оказывается, width и height не просчитывается на некоторых серверах ВК.
+        // Приходится гадать на кофейной гуще.
+        if(result.width == 0 || result.height == 0) {
+            fillDimensions(result, originalWidth, originalHeight);
+        }
+        return result;
+    }
+
+    /*
+     * Устанавливает размерность исходя из размеров оригинала и типа изображения.
+     */
+    private static void fillDimensions(VKApiPhotoSize result, int originalWidth, int originalHeight) {
+        float ratio = (float) originalWidth / originalHeight;
+        switch (result.type) {
+            case S: {
+                fillDimensionSMXY(result, ratio, Math.min(originalWidth, 75));
+            } break;
+            case M: {
+                fillDimensionSMXY(result, ratio, Math.min(originalWidth, 130));
+            } break;
+            case X: {
+                fillDimensionSMXY(result, ratio, Math.min(originalWidth, 604));
+            } break;
+            case Y: {
+                fillDimensionSMXY(result, ratio, Math.min(originalWidth, 807));
+            } break;
+            case O: {
+                fillDimensionOPQ(result, ratio, Math.min(originalWidth, 130));
+            } break;
+            case P: {
+                fillDimensionOPQ(result, ratio, Math.min(originalWidth, 200));
+            } break;
+            case Q: {
+                fillDimensionOPQ(result, ratio, Math.min(originalWidth, 320));
+            } break;
+            case Z: {
+                fillDimensionZW(result, ratio, Math.min(originalWidth, 1280), Math.min(originalHeight, 1024));
+            } break;
+            case W: {
+                fillDimensionZW(result, ratio, Math.min(originalWidth, 2560), Math.min(originalHeight, 2048));
+            } break;
+        }
+    }
+
+    /*
+     * Про S, M, X, Y известно, про копия обязательно пропорциональна, а ширина не должна превышать заданную.
+     * Это значит, что для всех случаев(кроме тех, когда ширина картинки меньше указанной) соотношения
+     * сторон картинка впишется пропорционально по ширине.
+     */
+    private static void fillDimensionSMXY(VKApiPhotoSize result, float ratio, int width) {
+        result.width = width;
+        result.height = (int) Math.ceil(result.width / ratio);
+    }
+
+    /*
+     * Пропорциональная ширина. В принципе, все, что было сказано к предыдущему, верно и здесь,
+     * за исключением того, что высота здесь не может превышать ширину * 1,5f
+     */
+    private static void fillDimensionOPQ(VKApiPhotoSize result, float ratio, int width) {
+        fillDimensionSMXY(result, Math.min(1.5f, ratio), width);
+    }
+
+    /*
+     * А здесь просто берем одну сторону за фактическую и исходя из нее вычисляем другую.
+     */
+    private static void fillDimensionZW(VKApiPhotoSize result, float ratio, int allowedWidth, int allowedHeight) {
+        if(ratio > 1) { // ширина больше высоты
+            result.width = allowedWidth;
+            result.height = (int) (result.width / ratio);
+        } else {
+            result.height = allowedHeight;
+            result.width = (int) (result.height * ratio);
+        }
+    }
+
+    /**
+     * Creates a dimension with explicit dimensions.
+     * Can be helpful if the dimensions are exactly known.
+     */
+    public static VKApiPhotoSize create(String url, int width, int height) {
+        VKApiPhotoSize result = new VKApiPhotoSize();
+        result.src = url;
+        result.width = width;
+        result.height = height;
+        float ratio = width / (float) height ;
+        if(width <= 75) {
+            result.type = S;
+        } else if(width <= 130) {
+            result.type = ratio <= 1.5f ? O : M;
+        } else if(width <= 200 && ratio <= 1.5f) {
+            result.type = P;
+        } else if(width <= 320 && ratio <= 1.5f) {
+            result.type = Q;
+        } else if(width <= 604 ) {
+            result.type = X;
+        } else if(width <= 807) {
+            result.type = Y;
+        } else if(width <= 1280 && height <= 1024) {
+            result.type = Z;
+        } else if(width <= 2560 && height <= 2048) {
+            result.type = W;
+        }
+        return result;
+    }
+
+    /**
+     * Creates a dimension type and size of the original.
+     */
+    public static VKApiPhotoSize create(String url, char type, int originalWidth, int originalHeight) {
+        VKApiPhotoSize result = new VKApiPhotoSize();
+        result.src = url;
+        result.type = type;
+        fillDimensions(result, originalWidth, originalHeight);
+        return result;
+    }
+
+    /**
+     * Creates a square dimension type and size of the original.
+     */
+    public static VKApiPhotoSize create(String url, int dimension) {
+        return create(url, dimension, dimension);
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/photo/VKUploadWallPhotoRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/photo/VKUploadWallPhotoRequest.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/photo/VKUploadWallPhotoRequest.java	(revision )
@@ -0,0 +1,87 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.photo;
+
+import com.vk.sdk.api.VKApi;
+import com.vk.sdk.api.VKApiConst;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.util.VKJsonHelper;
+import com.vk.sdk.util.VKUtil;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.File;
+
+/**
+ * Special request for upload single photo to user wall
+ */
+public class VKUploadWallPhotoRequest extends VKUploadPhotoBase {
+	private static final long serialVersionUID = 4732771149932923938L;
+
+	public VKUploadWallPhotoRequest(File image, long userId, int groupId) {
+        super();
+        mUserId = userId;
+        mGroupId = groupId;
+        mImages = new File[]{image};
+    }
+
+    public VKUploadWallPhotoRequest(VKUploadImage image, long userId, int groupId) {
+        super();
+        mUserId = userId;
+        mGroupId = groupId;
+        mImages = new File[]{image.getTmpFile()};
+    }
+    public VKUploadWallPhotoRequest(VKUploadImage[] images, long userId, int groupId) {
+        super();
+        mUserId = userId;
+        mGroupId = groupId;
+        mImages = new File[images.length];
+        for (int i = 0; i < images.length; i++) {
+            mImages[i] = images[i].getTmpFile();
+        }
+    }
+
+    @Override
+    protected VKRequest getServerRequest() {
+        if (mGroupId != 0)
+            return VKApi.photos().getWallUploadServer(mGroupId);
+        else
+            return VKApi.photos().getWallUploadServer();
+    }
+
+    @Override
+    protected VKRequest getSaveRequest(JSONObject response) {
+        VKRequest saveRequest;
+        try {
+            saveRequest = VKApi.photos().saveWallPhoto(new VKParameters(VKJsonHelper.toMap(response)));
+        } catch (JSONException e) {
+            return null;
+        }
+        if (mUserId != 0)
+            saveRequest.addExtraParameters(VKUtil.paramsFrom(VKApiConst.USER_ID, mUserId));
+        if (mGroupId != 0)
+            saveRequest.addExtraParameters(VKUtil.paramsFrom(VKApiConst.GROUP_ID, mGroupId));
+        return saveRequest;
+    }
+}
Index: app/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/styles.xml	(revision )
+++ app/src/main/res/values/styles.xml	(revision )
@@ -0,0 +1,31 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+
+
+    <style name="AppTheme.NoActionBar">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+    </style>
+
+    <style name="AppTheme.AppBarOverlay" parent="ThemeOverlay.AppCompat.Dark.ActionBar" />
+
+    <style name="AppTheme.PopupOverlay" parent="ThemeOverlay.AppCompat.Light" />
+
+    <style name="ImageTheme" parent="AppTheme">
+        <!-- Set AppCompat’s color theming attrs -->
+        <item name="colorPrimary">@color/vk_black</item>
+        <item name="colorPrimaryDark">@color/vk_black</item>
+
+        <!-- Other attributes -->
+    </style>
+</resources>
+
+
Index: vksdk_library/src/main/java/com/vk/sdk/api/VKParameters.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/VKParameters.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/VKParameters.java	(revision )
@@ -0,0 +1,55 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api;
+
+import com.vk.sdk.util.VKUtil;
+
+import java.io.Serializable;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+/**
+ * Class for operate with parameters
+ */
+public class VKParameters extends LinkedHashMap<String, Object> implements Serializable {
+	private static final long serialVersionUID = -7183150344504033644L;
+	public VKParameters() {
+        super();
+    }
+
+    /**
+     * Initializes parameters from map
+     * @param fromMap Map with parameters
+     */
+    public VKParameters(Map<String, Object> fromMap) {
+        super(fromMap);
+    }
+
+    /**
+     * The method creates key-value pairs with a variable list of a input data
+     * @param params Objects presented as key-value pairs, which possible to cast to string
+     * @return Instance of parameters object
+     */
+    public static VKParameters from(Object... params) {
+        return VKUtil.paramsFrom(params);
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKList.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKList.java	(revision )
@@ -0,0 +1,470 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import com.vk.sdk.VKSdk;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.lang.reflect.Constructor;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.ListIterator;
+import java.util.regex.Pattern;
+
+/**
+ * Universal data list for VK API.
+ * This class is not thread-safe.
+ * @param <T> type of stored values.
+ * @see <a href="http://vk.com/dev/list">http://vk.com/dev/list</a>
+ */
+@SuppressWarnings({"unchecked", "UnusedDeclaration"})
+public class VKList<T extends VKApiModel & Parcelable & Identifiable> extends VKApiModel implements java.util.List<T>,Parcelable {
+
+    /**
+     * The server did not return the count field.
+     */
+    private final static int NO_COUNT = -1;
+
+    /**
+     * Decorated list
+     */
+    private ArrayList<T> items = new ArrayList<T>();
+
+    /**
+     * Field {@code count} which returned by server.
+     */
+    private int count = NO_COUNT;
+
+    /**
+     * Creates empty list.
+     */
+    public VKList() {
+
+    }
+
+    /**
+     * Creates list and fills it according with given data.
+     */
+    public VKList(java.util.List<? extends T> data) {
+        assert data != null;
+        items = new ArrayList<T>(data);
+    }
+
+    /**
+     * Creates list and fills it according with data in {@code from}.
+     * @param from an object that represents a list adopted in accordance with VK API format. You can use null.
+     * @param clazz class represents a model that has a public constructor with {@link org.json.JSONObject} argument.
+     */
+    public VKList(JSONObject from, Class<? extends T> clazz) {
+        fill(from, clazz);
+    }
+
+    /**
+     * Creates list and fills it according with data in {@code from}.
+     * @param from an array of items in the list. You can use null.
+     * @param clazz class represents a model that has a public constructor with {@link org.json.JSONObject} argument.
+     */
+    public VKList(JSONArray from, Class<? extends T> clazz) {
+        fill(from, clazz);
+    }
+
+    /**
+     * Creates list and fills it according with data in {@code from}.
+     * @param from an object that represents a list adopted in accordance with VK API format. You can use null.
+     * @param creator interface implementation to parse objects.
+     */
+    public VKList(JSONObject from, Parser<T> creator) {
+
+        fill(from, creator);
+    }
+
+    /**
+     * Creates list and fills it according with data in {@code from}.
+     * @param from an array of items in the list. You can use null.
+     * @param creator interface implementation to parse objects.
+     */
+    public VKList(JSONArray from, Parser<T> creator) {
+
+        fill(from, creator);
+    }
+
+    /**
+     * Fills list according with data in {@code from}.
+     * @param from an object that represents a list adopted in accordance with VK API format. You can use null.
+     * @param clazz class represents a model that has a public constructor with {@link org.json.JSONObject} argument.
+     */
+    public void fill(JSONObject from, Class<? extends T> clazz) {
+        if (from.has("response")) {
+            JSONArray array = from.optJSONArray("response");
+            if (array != null) {
+                fill(array, clazz);
+            }
+            else {
+                fill(from.optJSONObject("response"), clazz);
+            }
+        } else {
+            fill(from, new ReflectParser<T>(clazz));
+        }
+    }
+
+    /**
+     * Creates list and fills it according with data in {@code from}.
+     * @param from an array of items in the list. You can use null.
+     * @param clazz class represents a model that has a public constructor with {@link org.json.JSONObject} argument.
+     */
+    public void fill(JSONArray from, Class<? extends T> clazz) {
+        fill(from, new ReflectParser<T>(clazz));
+    }
+
+    /**
+     * Fills list according with data in {@code from}.
+     * @param from an object that represents a list adopted in accordance with VK API format. You can use null.
+     * @param creator interface implementation to parse objects.
+     */
+    public void fill(JSONObject from, Parser<? extends T> creator) {
+        if(from != null) {
+            fill(from.optJSONArray("items"), creator);
+            count = from.optInt("count", count);
+        }
+    }
+
+    /**
+     * Fills list according with data in {@code from}.
+     * @param from an array of items in the list. You can use null.
+     * @param creator interface implementation to parse objects.
+     */
+    public void fill(JSONArray from, Parser<? extends T> creator) {
+        if(from != null) {
+            for(int i = 0; i < from.length(); i++) {
+                try {
+                    T object = creator.parseObject(from.getJSONObject(i));
+                    if(object != null) {
+                        items.add(object);
+                    }
+                } catch (Exception e) {
+                    if (VKSdk.DEBUG)
+                        e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    /**
+     * Adds the element before the element with the specified id.
+     * If an element with the specified id is not found, adds an element to the end of the list.
+     * @param id element identifier to add element before it.
+     * @param data element to add
+     */
+    public void addBefore(int id, T data) {
+        int size = size();
+        for(int i = 0; i < size; i++)  {
+            if(get(i).getId() > id || i == size - 1) {
+                add(i, data);
+                break;
+            }
+        }
+    }
+
+    /**
+     * Adds the element after the element with the specified id.
+     * If an element with the specified id is not found, adds an element to the end of the list.
+     * @param id element identifier to add element after it.
+     * @param data element to add
+     */
+    public void addAfter(int id, T data) {
+        int size = size();
+        for(int i = 0; i < size; i++)  {
+            if(get(i).getId() > id || i == size - 1) {
+                add(i + 1, data);
+                break;
+            }
+        }
+    }
+
+    /**
+     * Returns element according with id.
+     * If nothing found, returns null.
+     */
+    public T getById(int id) {
+        for(T item: this) {
+            if(item.getId() == id) {
+                return item;
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Searches through the list of available items. <br />
+     * <br />
+     * The search will be carried out not by the content of characters per line, and the content of them in separate words. <br />
+     * <br />
+     * Search is not case sensitive.  <br />
+     * <br />
+     * To support search class {@code T} must have overridden method {@link #toString()},
+     * search will be carried out exactly according to the result of calling this method. <br />
+     * <br />
+     * <br />
+     * Suppose there are elements in the list of contents:
+     * <code><pre>
+     * - Hello world
+     * - Hello test
+     * </pre></code>
+     * In this case, the matches will be on search phrases {@code 'Hel'}, {@code 'Hello'}, {@code 'test'}, but not on {@code 'llo'}, {@code 'llo world'}
+     *
+     * @param query search query can not be equal to {@code null}, but can be an empty string.
+     * @return created based on the search results new list. If no matches are found, the list will be empty.
+     */
+    public VKList<T> search(String query) {
+        VKList<T> result = new VKList<T>();
+        final Pattern pattern = Pattern.compile("(?i).*\\b" + query + ".*");
+        for (T item : this) {
+            if (pattern.matcher(item.toString()).find()) {
+                result.add(item);
+            }
+        }
+        return result;
+    }
+
+    /**
+     * Returns the return value of the field VK API {@code count}, if it has been returned, and the size of the list, if not.
+     */
+    public int getCount() {
+        return count != NO_COUNT ? count : size();
+    }
+
+    @Override
+    public void add(int location, T object) {
+        items.add(location, object);
+    }
+
+    @Override
+    public boolean add(T object) {
+        return items.add(object);
+    }
+
+    @Override
+    public boolean addAll(int location, Collection<? extends T> collection) {
+        return items.addAll(location, collection);
+    }
+
+    @Override
+    public boolean addAll(Collection<? extends T> collection) {
+        return items.addAll(collection);
+    }
+
+    @Override
+    public void clear() {
+        items.clear();
+    }
+
+    @Override
+    public boolean contains(Object object) {
+        return items.contains(object);
+    }
+
+    @Override
+    public boolean containsAll(Collection<?> collection) {
+        assert collection != null;
+        return items.containsAll(collection);
+    }
+
+    @Override
+    public boolean equals(Object object) {
+        return ((Object) this).getClass().equals(object.getClass()) && items.equals(object);
+    }
+
+    @Override
+    public T get(int location) {
+        return items.get(location);
+    }
+
+    @Override
+    public int indexOf(Object object) {
+        return items.indexOf(object);
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return items.isEmpty();
+    }
+
+    @Override
+    public Iterator<T> iterator() {
+        return items.iterator();
+    }
+
+    @Override
+    public int lastIndexOf(Object object) {
+        return items.lastIndexOf(object);
+    }
+
+
+    @Override
+    public ListIterator<T> listIterator() {
+        return items.listIterator();
+    }
+
+    @Override
+    public ListIterator<T> listIterator(int location) {
+        return items.listIterator(location);
+    }
+
+    @Override
+    public T remove(int location) {
+        return items.remove(location);
+    }
+
+    @Override
+    public boolean remove(Object object) {
+        return items.remove(object);
+    }
+
+    @Override
+    public boolean removeAll(Collection<?> collection) {
+        assert collection != null;
+        return items.removeAll(collection);
+    }
+
+    @Override
+    public boolean retainAll(Collection<?> collection) {
+        return items.retainAll(collection);
+    }
+
+    @Override
+    public T set(int location, T object) {
+        return items.set(location, object);
+    }
+
+    @Override
+    public int size() {
+        return items.size();
+    }
+
+    @Override
+    public java.util.List<T> subList(int start, int end) {
+        return items.subList(start, end);
+    }
+
+    @Override
+    public Object[] toArray() {
+        return items.toArray();
+    }
+
+    @Override
+    public <T1> T1[] toArray(T1[] array) {
+        assert array != null;
+        return items.toArray(array);
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(items.size());
+        for(T item: this) {
+            dest.writeParcelable(item, flags);
+        }
+        dest.writeInt(this.count);
+    }
+
+    /**
+     * Creates list from Parcel
+     */
+    public VKList(Parcel in) {
+        int size = in.readInt();
+        for(int i = 0; i < size; i++) {
+            items.add( ((T) in.readParcelable(((Object) this).getClass().getClassLoader())));
+        }
+        this.count = in.readInt();
+    }
+
+    public static Creator<VKList> CREATOR = new Creator<VKList>() {
+        public VKList createFromParcel(Parcel source) {
+            return new VKList(source);
+        }
+
+        public VKList[] newArray(int size) {
+            return new VKList[size];
+        }
+    };
+
+    /**
+     * Used when parsing the list objects as interator created from {@link org.json.JSONArray} a instances of items of the list.
+     * @param <D> list item type.
+     */
+    public static interface Parser<D> {
+
+        /**
+         * Creates a list item of its representation return VK API from {@link org.json.JSONArray}
+         * @param source representation of the object in the format returned by VK API.
+         * @return created element to add to the list.
+         * @throws Exception if the exception is thrown, the element iterated this method will not be added to the list.
+         */
+        D parseObject(JSONObject source) throws Exception;
+    }
+
+    /**
+     * Parser list items using reflection mechanism.
+     * To use an object class must have a public constructor that accepts {@link org.json.JSONObject}.
+     * If, during the creation of the object constructor will throw any exception, the element will not be added to the list.
+     * @param <D> list item type.
+     */
+    public final static class ReflectParser<D extends VKApiModel> implements Parser<D> {
+
+        private final Class<? extends D> clazz;
+
+        public ReflectParser(Class<? extends D> clazz) {
+            this.clazz = clazz;
+        }
+
+        @Override
+        public D parseObject(JSONObject source) throws Exception {
+	        try
+	        {
+		        Constructor<? extends D> jsonConstructor = clazz.getConstructor(JSONObject.class);
+		        if (jsonConstructor != null) {
+			        return jsonConstructor.newInstance(source);
+		        }
+	        } catch (Exception ignored) {
+		        //Ignored. Try default constructor
+	        }
+
+	        return (D) clazz.newInstance().parse(source);
+        }
+    }
+
+    @Override
+    public VKApiModel parse(JSONObject response) throws JSONException {
+        throw new JSONException("Operation is not supported while class is generic");
+    }
+}
\ No newline at end of file
Index: app/src/main/res/drawable-v21/ic_folder_open_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_folder_open_black_24dp.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_folder_open_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M20,6h-8l-2,-2L4,4c-1.1,0 -1.99,0.9 -1.99,2L2,18c0,1.1 0.9,2 2,2h16c1.1,0 2,-0.9 2,-2L22,8c0,-1.1 -0.9,-2 -2,-2zM20,18L4,18L4,8h16v10z"/>
+</vector>
Index: vksdk_library/src/main/java/com/vk/sdk/api/photo/VKUploadImage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/photo/VKUploadImage.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/photo/VKUploadImage.java	(revision )
@@ -0,0 +1,105 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.photo;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import com.vk.sdk.VKObject;
+import com.vk.sdk.VKSdk;
+import com.vk.sdk.VKUIHelper;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.Serializable;
+
+/**
+ * Contains image data with image description
+ */
+public class VKUploadImage extends VKObject implements Parcelable {
+    /**
+     * Bitmap representation of image
+     */
+    public final Bitmap mImageData;
+    /**
+     * Image basic info
+     */
+    public final VKImageParameters mParameters;
+
+    public VKUploadImage(Bitmap data, VKImageParameters params) {
+        mImageData = data;
+        mParameters = params;
+    }
+
+    public File getTmpFile() {
+        Context ctx = VKUIHelper.getApplicationContext();
+        File outputDir = null;
+        if (ctx != null) {
+            outputDir = ctx.getExternalCacheDir();
+            if (outputDir == null || !outputDir.canWrite())
+                outputDir = ctx.getCacheDir();
+        }
+        File tmpFile = null;
+        try {
+            tmpFile = File.createTempFile("tmpImg", String.format(".%s", mParameters.fileExtension()), outputDir);
+            FileOutputStream fos = new FileOutputStream(tmpFile);
+            if (mParameters.mImageType == VKImageParameters.VKImageType.Png)
+                mImageData.compress(Bitmap.CompressFormat.PNG, 100, fos);
+            else
+                mImageData.compress(Bitmap.CompressFormat.JPEG, (int) (mParameters.mJpegQuality * 100), fos);
+            fos.close();
+        } catch (IOException ignored) {
+            if (VKSdk.DEBUG)
+                ignored.printStackTrace();
+        }
+        return tmpFile;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeParcelable(this.mImageData, 0);
+        dest.writeParcelable(this.mParameters, 0);
+    }
+
+    private VKUploadImage(Parcel in) {
+        this.mImageData = in.readParcelable(Bitmap.class.getClassLoader());
+        this.mParameters = in.readParcelable(VKImageParameters.class.getClassLoader());
+    }
+
+    public static final Parcelable.Creator<VKUploadImage> CREATOR = new Parcelable.Creator<VKUploadImage>() {
+        public VKUploadImage createFromParcel(Parcel source) {
+            return new VKUploadImage(source);
+        }
+
+        public VKUploadImage[] newArray(int size) {
+            return new VKUploadImage[size];
+        }
+    };
+}
Index: vksdk_library/src/main/lint.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/lint.xml	(revision )
+++ vksdk_library/src/main/lint.xml	(revision )
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<lint>
+</lint>
\ No newline at end of file
Index: vksdk_library/src/main/res/values-ru/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/values-ru/strings.xml	(revision )
+++ vksdk_library/src/main/res/values-ru/strings.xml	(revision )
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="vk_name">ВКонтакте</string>
+    <string name="vk_enter_captcha_text">Введите текст с картинки</string>
+    <string name="vk_retry">Повторить</string>
+    <string name="vk_send">ОТПРАВИТЬ</string>
+    <string name="vk_share">Поделиться</string>
+    <string name="vk_new_message_text">Введите текст сообщения..</string>
+    <string name="vk_new_post_settings">Настройки записи</string>
+</resources>
Index: vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiBase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiBase.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiBase.java	(revision )
@@ -0,0 +1,58 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.methods;
+
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKParser;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.model.VKApiModel;
+
+import java.util.Locale;
+
+/**
+ * Basic class for all API-requests builders (parts)
+ */
+public abstract class VKApiBase {
+    /**
+     * Selected methods group
+     */
+
+    protected abstract String getMethodsGroup();
+
+    protected VKRequest prepareRequest(String methodName, VKParameters methodParameters) {
+        return new VKRequest(String.format(Locale.US, "%s.%s", getMethodsGroup(), methodName), methodParameters, null);
+    }
+
+    protected VKRequest prepareRequest(String methodName, VKParameters methodParameters,
+                                       Class<? extends VKApiModel> modelClass) {
+        return new VKRequest(String.format(Locale.US, "%s.%s", getMethodsGroup(), methodName), methodParameters, modelClass);
+    }
+
+    protected VKRequest prepareRequest(String methodName, VKParameters methodParameters,
+                                       VKParser responseParser) {
+        VKRequest result = new VKRequest(String.format(Locale.US, "%s.%s", getMethodsGroup(), methodName), methodParameters);
+        result.setResponseParser(responseParser);
+        return result;
+    }
+
+
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/dialogs/VKShareDialogDelegate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/dialogs/VKShareDialogDelegate.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/dialogs/VKShareDialogDelegate.java	(revision )
@@ -0,0 +1,433 @@
+//
+//  Copyright (c) 2015 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.dialogs;
+
+import android.app.Activity;
+import android.app.Dialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.Point;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.util.Log;
+import android.view.Display;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.HorizontalScrollView;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.vk.sdk.R;
+import com.vk.sdk.VKSdk;
+import com.vk.sdk.VKUIHelper;
+import com.vk.sdk.api.VKApi;
+import com.vk.sdk.api.VKApiConst;
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.VKResponse;
+import com.vk.sdk.api.httpClient.VKHttpClient;
+import com.vk.sdk.api.httpClient.VKImageOperation;
+import com.vk.sdk.api.model.VKApiLink;
+import com.vk.sdk.api.model.VKApiPhoto;
+import com.vk.sdk.api.model.VKAttachments;
+import com.vk.sdk.api.model.VKPhotoArray;
+import com.vk.sdk.api.model.VKWallPostResult;
+import com.vk.sdk.api.photo.VKUploadImage;
+import com.vk.sdk.api.photo.VKUploadWallPhotoRequest;
+import com.vk.sdk.dialogs.VKShareDialogBuilder.VKShareDialogListener;
+import com.vk.sdk.util.VKStringJoiner;
+import com.vk.sdk.util.VKUtil;
+
+import java.util.ArrayList;
+
+class VKShareDialogDelegate {
+
+	public interface DialogFragmentI {
+		Activity getActivity();
+
+		Resources getResources();
+
+		void dismissAllowingStateLoss();
+
+		Dialog getDialog();
+	}
+
+	static private final String SHARE_TEXT_KEY = "ShareText";
+	static private final String SHARE_LINK_KEY = "ShareLink";
+	static private final String SHARE_IMAGES_KEY = "ShareImages";
+	static private final String SHARE_UPLOADED_IMAGES_KEY = "ShareUploadedImages";
+
+	static private final int SHARE_PHOTO_HEIGHT = 100;
+	static private final int SHARE_PHOTO_CORNER_RADIUS = 3;
+	static private final int SHARE_PHOTO_MARGIN_LEFT = 10;
+
+	private EditText mShareTextField;
+	private Button mSendButton;
+	private ProgressBar mSendProgress;
+	private LinearLayout mPhotoLayout;
+	private HorizontalScrollView mPhotoScroll;
+
+	private UploadingLink mAttachmentLink;
+	private VKUploadImage[] mAttachmentImages;
+	private VKPhotoArray mExistingPhotos;
+	private CharSequence mAttachmentText;
+
+	private VKShareDialogListener mListener;
+	private final DialogFragmentI dialogFragmentI;
+
+	public VKShareDialogDelegate(DialogFragmentI dialogFragmentI) {
+		this.dialogFragmentI = dialogFragmentI;
+	}
+
+	public void setAttachmentImages(VKUploadImage[] images) {
+		mAttachmentImages = images;
+	}
+
+	public void setText(CharSequence textToPost) {
+		mAttachmentText = textToPost;
+	}
+
+	public void setAttachmentLink(String linkTitle, String linkUrl) {
+		mAttachmentLink = new UploadingLink(linkTitle, linkUrl);
+	}
+
+	public void setUploadedPhotos(VKPhotoArray photos) {
+		mExistingPhotos = photos;
+	}
+
+	public void setShareDialogListener(VKShareDialogListener listener) {
+		mListener = listener;
+	}
+
+	public Dialog onCreateDialog(Bundle savedInstanceState) {
+		Context context = dialogFragmentI.getActivity();
+		View mInternalView = View.inflate(context, R.layout.vk_share_dialog, null);
+
+		assert mInternalView != null;
+
+		mSendButton = (Button) mInternalView.findViewById(R.id.sendButton);
+		mSendProgress = (ProgressBar) mInternalView.findViewById(R.id.sendProgress);
+		mPhotoLayout = (LinearLayout) mInternalView.findViewById(R.id.imagesContainer);
+		mShareTextField = (EditText) mInternalView.findViewById(R.id.shareText);
+		mPhotoScroll = (HorizontalScrollView) mInternalView.findViewById(R.id.imagesScrollView);
+
+		LinearLayout mAttachmentLinkLayout = (LinearLayout) mInternalView.findViewById(R.id.attachmentLinkLayout);
+
+		mSendButton.setOnClickListener(sendButtonPress);
+
+		//Attachment text
+		if (savedInstanceState != null) {
+			mShareTextField.setText(savedInstanceState.getString(SHARE_TEXT_KEY));
+			mAttachmentLink = savedInstanceState.getParcelable(SHARE_LINK_KEY);
+			mAttachmentImages = (VKUploadImage[]) savedInstanceState.getParcelableArray(SHARE_IMAGES_KEY);
+			mExistingPhotos = savedInstanceState.getParcelable(SHARE_UPLOADED_IMAGES_KEY);
+		} else if (mAttachmentText != null) {
+			mShareTextField.setText(mAttachmentText);
+		}
+
+		//Attachment photos
+		mPhotoLayout.removeAllViews();
+		if (mAttachmentImages != null) {
+			for (VKUploadImage mAttachmentImage : mAttachmentImages) {
+				addBitmapToPreview(mAttachmentImage.mImageData);
+			}
+			mPhotoLayout.setVisibility(View.VISIBLE);
+		}
+
+		if (mExistingPhotos != null) {
+			processExistingPhotos();
+		}
+		if (mExistingPhotos == null && mAttachmentImages == null) {
+			mPhotoLayout.setVisibility(View.GONE);
+		}
+
+		//Attachment link
+		if (mAttachmentLink != null) {
+			TextView linkTitle = (TextView) mAttachmentLinkLayout.findViewById(R.id.linkTitle),
+					linkHost = (TextView) mAttachmentLinkLayout.findViewById(R.id.linkHost);
+
+			linkTitle.setText(mAttachmentLink.linkTitle);
+			linkHost.setText(VKUtil.getHost(mAttachmentLink.linkUrl));
+			mAttachmentLinkLayout.setVisibility(View.VISIBLE);
+		} else {
+			mAttachmentLinkLayout.setVisibility(View.GONE);
+		}
+		Dialog result = new Dialog(context);
+		result.requestWindowFeature(Window.FEATURE_NO_TITLE);
+		result.setContentView(mInternalView);
+		result.setCancelable(true);
+		result.setOnCancelListener(new DialogInterface.OnCancelListener() {
+			@Override
+			public void onCancel(DialogInterface dialogInterface) {
+				if (mListener != null) {
+					mListener.onVkShareCancel();
+				}
+				dialogFragmentI.dismissAllowingStateLoss();
+			}
+		});
+
+
+		return result;
+	}
+
+	public void onStart() {
+		int width = WindowManager.LayoutParams.WRAP_CONTENT;
+
+		if (Build.VERSION.SDK_INT >= 13) {
+			WindowManager wm = (WindowManager) dialogFragmentI.getActivity().getSystemService(Context.WINDOW_SERVICE);
+			Display display = wm.getDefaultDisplay();
+			Point size = new Point();
+			display.getSize(size);
+			width = size.x - dialogFragmentI.getResources().getDimensionPixelSize(R.dimen.vk_share_dialog_view_padding) * 2;
+		}
+
+		WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
+		lp.copyFrom(dialogFragmentI.getDialog().getWindow().getAttributes());
+		lp.height = WindowManager.LayoutParams.WRAP_CONTENT;
+		lp.width = width;
+		dialogFragmentI.getDialog().getWindow().setAttributes(lp);
+	}
+
+	public void onSaveInstanceState(Bundle outState) {
+		outState.putString(SHARE_TEXT_KEY, mShareTextField.getText().toString());
+		if (mAttachmentLink != null)
+			outState.putParcelable(SHARE_LINK_KEY, mAttachmentLink);
+		if (mAttachmentImages != null)
+			outState.putParcelableArray(SHARE_IMAGES_KEY, mAttachmentImages);
+		if (mExistingPhotos != null)
+			outState.putParcelable(SHARE_UPLOADED_IMAGES_KEY, mExistingPhotos);
+	}
+
+	private void setIsLoading(boolean loading) {
+		if (loading) {
+			mSendButton.setVisibility(View.GONE);
+			mSendProgress.setVisibility(View.VISIBLE);
+			mShareTextField.setEnabled(false);
+			mPhotoLayout.setEnabled(false);
+		} else {
+			mSendButton.setVisibility(View.VISIBLE);
+			mSendProgress.setVisibility(View.GONE);
+			mShareTextField.setEnabled(true);
+			mPhotoLayout.setEnabled(true);
+		}
+	}
+
+	private void processExistingPhotos() {
+		ArrayList<String> photosToLoad = new ArrayList<>(mExistingPhotos.size());
+		for (VKApiPhoto photo : mExistingPhotos) {
+			photosToLoad.add("" + photo.owner_id + '_' + photo.id);
+		}
+		VKRequest photosById = new VKRequest("photos.getById",
+				VKParameters.from(VKApiConst.PHOTO_SIZES, 1, VKApiConst.PHOTOS, VKStringJoiner.join(photosToLoad, ",")), VKPhotoArray.class);
+		photosById.executeWithListener(new VKRequest.VKRequestListener() {
+			@Override
+			public void onComplete(VKResponse response) {
+				VKPhotoArray photos = (VKPhotoArray) response.parsedModel;
+				for (VKApiPhoto photo : photos) {
+					if (photo.src.getByType('q') != null) {
+						loadAndAddPhoto(photo.src.getByType('q'));
+					} else if (photo.src.getByType('p') != null) {
+						loadAndAddPhoto(photo.src.getByType('p'));
+					} else if (photo.src.getByType('m') != null) {
+						loadAndAddPhoto(photo.src.getByType('m'));
+					}
+					//else ignore that strange photo
+				}
+			}
+
+			@Override
+			public void onError(VKError error) {
+				if (VKSdk.DEBUG) {
+					Log.w(VKSdk.SDK_TAG, "Cannot load photos for share: " + error.toString());
+				}
+				if (mListener != null) {
+					mListener.onVkShareError(error);
+				}
+			}
+		});
+	}
+
+	private void loadAndAddPhoto(final String photoUrl) {
+		loadAndAddPhoto(photoUrl, 0);
+	}
+
+	private void loadAndAddPhoto(final String photoUrl, final int attempt) {
+		if (attempt > 10) return;
+		VKImageOperation op = new VKImageOperation(photoUrl);
+		op.setImageOperationListener(new VKImageOperation.VKImageOperationListener() {
+			@Override
+			public void onComplete(VKImageOperation operation, Bitmap image) {
+				if (image == null) {
+					new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
+						@Override
+						public void run() {
+							loadAndAddPhoto(photoUrl, attempt + 1);
+						}
+					}, 1000);
+					return;
+				}
+				addBitmapToPreview(image);
+			}
+
+			@Override
+			public void onError(VKImageOperation operation, VKError error) {
+				// todo method body
+			}
+		});
+		VKHttpClient.enqueueOperation(op);
+	}
+
+	private void addBitmapToPreview(Bitmap sourceBitmap) {
+		if (dialogFragmentI.getActivity() == null) return;
+		Bitmap b = VKUIHelper.getRoundedCornerBitmap(sourceBitmap, SHARE_PHOTO_HEIGHT, SHARE_PHOTO_CORNER_RADIUS);
+		if (b == null) return;
+		ImageView iv = new ImageView(dialogFragmentI.getActivity());
+		iv.setImageBitmap(b);
+		iv.setAdjustViewBounds(true);
+
+		LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
+		params.setMargins(mPhotoLayout.getChildCount() > 0 ? SHARE_PHOTO_MARGIN_LEFT : 0, 0, 0, 0);
+
+		mPhotoLayout.addView(iv, params);
+		mPhotoLayout.invalidate();
+		mPhotoScroll.invalidate();
+	}
+
+	private void makePostWithAttachments(VKAttachments attachments) {
+
+		if (attachments == null) {
+			attachments = new VKAttachments();
+		}
+		if (mExistingPhotos != null) {
+			attachments.addAll(mExistingPhotos);
+		}
+		if (mAttachmentLink != null) {
+			attachments.add(new VKApiLink(mAttachmentLink.linkUrl));
+		}
+		String message = mShareTextField.getText().toString();
+
+		final Long userId = Long.parseLong(VKSdk.getAccessToken().userId);
+		VKRequest wallPost = VKApi.wall().post(VKParameters.from(VKApiConst.OWNER_ID, userId, VKApiConst.MESSAGE, message, VKApiConst.ATTACHMENTS, attachments.toAttachmentsString()));
+		wallPost.executeWithListener(new VKRequest.VKRequestListener() {
+			@Override
+			public void onError(VKError error) {
+				setIsLoading(false);
+				if (mListener != null) {
+					mListener.onVkShareError(error);
+				}
+			}
+
+			@Override
+			public void onComplete(VKResponse response) {
+				setIsLoading(false);
+				VKWallPostResult res = (VKWallPostResult) response.parsedModel;
+				if (mListener != null) {
+					mListener.onVkShareComplete(res.post_id);
+				}
+				dialogFragmentI.dismissAllowingStateLoss();
+			}
+		});
+	}
+
+	View.OnClickListener sendButtonPress = new View.OnClickListener() {
+		@Override
+		public void onClick(View view) {
+			setIsLoading(true);
+			if (mAttachmentImages != null && VKSdk.getAccessToken() != null) {
+				final Long userId = Long.parseLong(VKSdk.getAccessToken().userId);
+				VKUploadWallPhotoRequest photoRequest = new VKUploadWallPhotoRequest(mAttachmentImages, userId, 0);
+				photoRequest.executeWithListener(new VKRequest.VKRequestListener() {
+					@Override
+					public void onComplete(VKResponse response) {
+						VKPhotoArray photos = (VKPhotoArray) response.parsedModel;
+						VKAttachments attachments = new VKAttachments(photos);
+						makePostWithAttachments(attachments);
+					}
+
+					@Override
+					public void onError(VKError error) {
+						setIsLoading(false);
+						if (mListener != null) {
+							mListener.onVkShareError(error);
+						}
+					}
+				});
+			} else {
+				makePostWithAttachments(null);
+			}
+		}
+	};
+
+	public void onCancel(DialogInterface dialog) {
+		if (mListener != null) {
+			mListener.onVkShareCancel();
+		}
+	}
+
+	static private class UploadingLink implements Parcelable {
+		public String linkTitle, linkUrl;
+
+		public UploadingLink(String title, String url) {
+			linkTitle = title;
+			linkUrl = url;
+		}
+
+		@Override
+		public int describeContents() {
+			return 0;
+		}
+
+		@Override
+		public void writeToParcel(Parcel dest, int flags) {
+			dest.writeString(this.linkTitle);
+			dest.writeString(this.linkUrl);
+		}
+
+		private UploadingLink(Parcel in) {
+			this.linkTitle = in.readString();
+			this.linkUrl = in.readString();
+		}
+
+		public static final Parcelable.Creator<UploadingLink> CREATOR = new Parcelable.Creator<UploadingLink>() {
+			public UploadingLink createFromParcel(Parcel source) {
+				return new UploadingLink(source);
+			}
+
+			public UploadingLink[] newArray(int size) {
+				return new UploadingLink[size];
+			}
+		};
+	}
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/photo/VKImageParameters.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/photo/VKImageParameters.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/photo/VKImageParameters.java	(revision )
@@ -0,0 +1,126 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.photo;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import com.vk.sdk.VKObject;
+
+import java.io.Serializable;
+
+/**
+ * Parameters used for uploading image into VK servers
+ */
+public class VKImageParameters extends VKObject implements Parcelable {
+    /**
+     * Describes image representation type
+     */
+    enum VKImageType {
+        /// Sets jpeg representation of image
+        Jpg,
+        /// Sets png representation of image
+        Png
+    }
+
+    /**
+     * Type of image compression. Can be <b>VKImageType.Jpg</b> or <b>VKImageType.Png</b>.
+     */
+    public VKImageType mImageType = VKImageType.Png;
+    /**
+     * Quality used for jpg compression. From 0.0 to 1.0
+     */
+    public float mJpegQuality;
+
+    public static VKImageParameters pngImage() {
+        VKImageParameters result = new VKImageParameters();
+        result.mImageType = VKImageType.Png;
+        return result;
+    }
+
+    public static VKImageParameters jpgImage(float quality) {
+        VKImageParameters result = new VKImageParameters();
+        result.mImageType = VKImageType.Jpg;
+        result.mJpegQuality = quality;
+        return result;
+    }
+
+    /**
+     * Returns the file extension for specified parameters
+     * @return "jpg", "png" or "file" if unknown
+     */
+    public String fileExtension() {
+        switch (mImageType) {
+            case Jpg:
+                return "jpg";
+            case Png:
+                return "png";
+            default:
+                return "file";
+        }
+    }
+
+    /**
+     * Returns the mime type for specified parameters
+     * @return "mage/jpeg", "mage/png" or "application/octet-stream"
+     */
+    public String mimeType() {
+        switch (mImageType) {
+            case Jpg:
+                return "image/jpeg";
+            case Png:
+                return "image/png";
+            default:
+                return "application/octet-stream";
+        }
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.mImageType == null ? -1 : this.mImageType.ordinal());
+        dest.writeFloat(this.mJpegQuality);
+    }
+
+    public VKImageParameters() {
+    }
+
+    private VKImageParameters(Parcel in) {
+        int tmpMImageType = in.readInt();
+        this.mImageType = tmpMImageType == -1 ? null : VKImageType.values()[tmpMImageType];
+        this.mJpegQuality = in.readFloat();
+    }
+
+    public static final Parcelable.Creator<VKImageParameters> CREATOR = new Parcelable.Creator<VKImageParameters>() {
+        public VKImageParameters createFromParcel(Parcel source) {
+            return new VKImageParameters(source);
+        }
+
+        public VKImageParameters[] newArray(int size) {
+            return new VKImageParameters[size];
+        }
+    };
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiGetDialogResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiGetDialogResponse.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiGetDialogResponse.java	(revision )
@@ -0,0 +1,94 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import org.json.JSONObject;
+
+public class VKApiGetDialogResponse extends VKApiModel implements android.os.Parcelable {
+    /**
+     * Number of messages to return
+     */
+    public int count;
+    /**
+     * Number of unread dialogs
+     */
+    public int unread_dialogs;
+    /**
+     * List dialogs
+     */
+    public VKList<VKApiDialog> items;
+
+    public VKApiGetDialogResponse(JSONObject from) {
+        this.parse(from);
+    }
+
+    /**
+     * Fills an object from server response.
+     */
+    public VKApiGetDialogResponse parse(JSONObject source) {
+        JSONObject response = source.optJSONObject("response");
+        this.count = response.optInt("count");
+        this.unread_dialogs = response.optInt("unread_dialogs");
+        this.items = new VKList<>(response.optJSONArray("items"), VKApiDialog.class);
+        return this;
+    }
+
+    /**
+     * Creates an DialogResponse instance from Parcel.
+     */
+    public VKApiGetDialogResponse(Parcel in) {
+        this.count = in.readInt();
+        this.unread_dialogs = in.readInt();
+        this.items = in.readParcelable(VKList.class.getClassLoader());
+    }
+
+    /**
+     * Creates empty DialogResponse instance.
+     */
+    public VKApiGetDialogResponse() {
+
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.count);
+        dest.writeInt(this.unread_dialogs);
+        dest.writeParcelable(this.items, flags);
+    }
+
+    public static Parcelable.Creator<VKApiGetDialogResponse> CREATOR = new Parcelable.Creator<VKApiGetDialogResponse>() {
+        public VKApiGetDialogResponse createFromParcel(Parcel source) {
+            return new VKApiGetDialogResponse(source);
+        }
+
+        public VKApiGetDialogResponse[] newArray(int size) {
+            return new VKApiGetDialogResponse[size];
+        }
+    };
+}
Index: app/src/main/res/menu/drawer_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/drawer_menu.xml	(revision )
+++ app/src/main/res/menu/drawer_menu.xml	(revision )
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android">
+
+            <item
+                android:id="@+id/nav_new_doc"
+                android:icon="@drawable/ic_plus_white_24dp"
+                android:title="Новый документ" />
+            <item
+                android:id="@+id/nav_find_doc"
+                android:icon="@drawable/ic_search_white_24dp"
+                android:title="Найти документ" />
+            <item
+                android:id="@+id/nav_downloads_docs"
+                android:icon="@drawable/ic_file_download_white_24dp"
+                android:title="Загуженые документы" />
+            <item
+                android:id="@+id/nav_exit_account"
+                android:icon="@android:drawable/btn_default"
+                android:title="Выйти" />
+            <item
+                android:id="@+id/nav_settings_account"
+                android:icon="@android:drawable/ic_menu_preferences"
+                android:title="Настройки" />
+
+</menu>
Index: app/src/main/res/drawable-v21/ic_cloud_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_cloud_black_24dp.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_cloud_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M19.35,10.04C18.67,6.59 15.64,4 12,4 9.11,4 6.6,5.64 5.35,8.04 2.34,8.36 0,10.91 0,14c0,3.31 2.69,6 6,6h13c2.76,0 5,-2.24 5,-5 0,-2.64 -2.05,-4.78 -4.65,-4.96z"/>
+</vector>
Index: vksdk_library/src/main/java/com/vk/sdk/payments/VKIInAppBillingService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/payments/VKIInAppBillingService.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/payments/VKIInAppBillingService.java	(revision )
@@ -0,0 +1,487 @@
+//
+//  Copyright (c) 2015 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.payments;
+
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.ServiceConnection;
+import android.os.Bundle;
+import android.os.IBinder;
+import android.os.Looper;
+import android.os.RemoteException;
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.vk.sdk.VKUIHelper;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+
+public final class VKIInAppBillingService {
+
+    private static final String RECEIPT_DATA = "receipt_data";
+    private static final String RECEIPT_VALUE = "price_value";
+    private static final String RECEIPT_CURRENCY = "currency";
+    private static final String RECEIPT_QUANTITY = "quantity";
+
+    private static class Receipt {
+        String receiptData;// native android receipt data
+        float priceValue;// price of in-app
+        String currency;// ISO 4217
+        int quantity; // count of in-app
+
+        String toJson() throws JSONException {
+            JSONObject object = new JSONObject();
+
+            if (!TextUtils.isEmpty(receiptData)) {
+                object.put(RECEIPT_DATA, receiptData);
+            }
+            object.put(RECEIPT_VALUE, priceValue);
+
+            if (!TextUtils.isEmpty(currency)) {
+                object.put(RECEIPT_CURRENCY, currency);
+            }
+
+            object.put(RECEIPT_QUANTITY, quantity);
+            return object.toString();
+        }
+    }
+
+    private static class PurchaseData {
+        String purchaseData = null;
+        boolean hasError = false;
+    }
+
+    private static class SyncServiceConnection implements ServiceConnection {
+
+        final Object syncObj = new Object();
+        volatile boolean isFinish = false;
+
+        @Override
+        public final void onServiceConnected(ComponentName name, IBinder service) {
+            synchronized (this.syncObj) {
+                try {
+                    onServiceConnectedImpl(name, service);
+                } catch (Exception e) {
+                    // nothing
+                }
+                isFinish = true;
+                syncObj.notifyAll();
+            }
+        }
+
+        @Override
+        public final void onServiceDisconnected(ComponentName name) {
+            synchronized (this.syncObj) {
+                try {
+                    onServiceDisconnectedImpl(name);
+                } catch (Exception e) {
+                    // nothing
+                }
+                isFinish = true;
+                syncObj.notifyAll();
+            }
+        }
+
+        public void onServiceConnectedImpl(ComponentName name, IBinder service) {
+        }
+
+        public void onServiceDisconnectedImpl(ComponentName name) {
+        }
+    }
+
+    private static final String PARAMS_ARE_NOT_VALID_ERROR = "params of constructor don't implement com.android.vending.billing.IInAppBillingService";
+
+    // some fields on the getSkuDetails response bundle
+    private static final String GET_SKU_DETAILS_ITEM_LIST = "ITEM_ID_LIST";
+    private static final String RESPONSE_GET_SKU_DETAILS_LIST = "DETAILS_LIST";
+    private static final String RESPONSE_INAPP_PURCHASE_DATA_LIST = "INAPP_PURCHASE_DATA_LIST";
+    private static final String PRODUCT_ID = "productId";
+
+    private static final String SKU_DETAIL_AMOUNT_MICROS = "price_amount_micros";
+    private static final String SKU_DETAIL_PRICE_CURRENCY_CODE = "price_currency_code";
+    private static final String PURCHASE_DETAIL_TOKEN = "token";
+    private static final String PURCHASE_DETAIL_PURCHASE_TOKEN = "purchaseToken";
+
+    private final Object mIInAppBillingService;
+
+    private static final Method sMethodIsBillingSupported;
+    private static final Method sMethodGetSkuDetails;
+    private static final Method sMethodGetBuyIntent;
+    private static final Method sMethodGetPurchases;
+    private static final Method sMethodConsumePurchase;
+
+    static {
+        Class<?> mIInAppBillingServiceClass;
+        try {
+            mIInAppBillingServiceClass = Class.forName("com.android.vending.billing.IInAppBillingService");
+
+            sMethodIsBillingSupported = mIInAppBillingServiceClass.getMethod("isBillingSupported", int.class, String.class, String.class);
+            sMethodGetSkuDetails = mIInAppBillingServiceClass.getMethod("getSkuDetails", int.class, String.class, String.class, Bundle.class);
+            sMethodGetBuyIntent = mIInAppBillingServiceClass.getMethod("getBuyIntent", int.class, String.class, String.class, String.class, String.class);
+            sMethodGetPurchases = mIInAppBillingServiceClass.getMethod("getPurchases", int.class, String.class, String.class, String.class);
+            sMethodConsumePurchase = mIInAppBillingServiceClass.getMethod("consumePurchase", int.class, String.class, String.class);
+        } catch (ClassNotFoundException e) {
+            throw new RuntimeException(PARAMS_ARE_NOT_VALID_ERROR);
+        } catch (NoSuchMethodException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    /**
+     * @param iInAppBillingService implementation of com.android.vending.billing.IInAppBillingService
+     */
+    public VKIInAppBillingService(@NonNull Object iInAppBillingService) {
+        this.mIInAppBillingService = iInAppBillingService;
+
+        Class<?> mIInAppBillingServiceClass;
+        try {
+            mIInAppBillingServiceClass = Class.forName("com.android.vending.billing.IInAppBillingService");
+            mIInAppBillingServiceClass.cast(mIInAppBillingService);
+        } catch (ClassNotFoundException e) {
+            throw new RuntimeException(PARAMS_ARE_NOT_VALID_ERROR);
+        }
+    }
+
+    /**
+     * Checks support for the requested billing API version, package and in-app type.
+     * Minimum API version supported by this interface is 3.
+     *
+     * @param apiVersion  the billing version which the app is using
+     * @param packageName the package name of the calling app
+     * @param type        type of the in-app item being purchased "inapp" for one-time purchases
+     *                    and "subs" for subscription.
+     * @return RESULT_OK(0) on success, corresponding result code on failures
+     */
+    public int isBillingSupported(final int apiVersion,
+                                  @NonNull final String packageName,
+                                  @NonNull final String type) throws android.os.RemoteException {
+        try {
+            return (Integer) sMethodIsBillingSupported.invoke(mIInAppBillingService, apiVersion, packageName, type);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    /**
+     * Provides details of a list of SKUs
+     * Given a list of SKUs of a valid type in the skusBundle, this returns a bundle
+     * with a list JSON strings containing the productId, price, title and description.
+     * This API can be called with a maximum of 20 SKUs.
+     *
+     * @param apiVersion  billing API version that the Third-party is using
+     * @param packageName the package name of the calling app
+     * @param skusBundle  bundle containing a StringArrayList of SKUs with key "ITEM_ID_LIST"
+     * @return Bundle containing the following key-value pairs
+     * "RESPONSE_CODE" with int value, RESULT_OK(0) if success, other response codes on
+     * failure as listed above.
+     * "DETAILS_LIST" with a StringArrayList containing purchase information
+     * in JSON format similar to:
+     * '{ "productId" : "exampleSku", "type" : "inapp", "price" : "$5.00",
+     * "title : "Example Title", "description" : "This is an example description" }'
+     */
+    public Bundle getSkuDetails(final int apiVersion,
+                                @NonNull final String packageName,
+                                @NonNull final String type,
+                                @NonNull final Bundle skusBundle) throws android.os.RemoteException {
+        return getSkuDetails(mIInAppBillingService, apiVersion, packageName, type, skusBundle);
+    }
+
+    private static Bundle getSkuDetails(@NonNull final Object iInAppBillingService,
+                                        final int apiVersion,
+                                        @NonNull final String packageName,
+                                        @NonNull final String type,
+                                        @NonNull final Bundle skusBundle) throws android.os.RemoteException {
+        try {
+            return (Bundle) sMethodGetSkuDetails.invoke(iInAppBillingService, apiVersion, packageName, type, skusBundle);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    /**
+     * Returns a pending intent to launch the purchase flow for an in-app item by providing a SKU,
+     * the type, a unique purchase token and an optional developer payload.
+     *
+     * @param apiVersion       billing API version that the app is using
+     * @param packageName      package name of the calling app
+     * @param sku              the SKU of the in-app item as published in the developer console
+     * @param type             the type of the in-app item ("inapp" for one-time purchases
+     *                         and "subs" for subscription).
+     * @param developerPayload optional argument to be sent back with the purchase information
+     * @return Bundle containing the following key-value pairs
+     * "RESPONSE_CODE" with int value, RESULT_OK(0) if success, other response codes on
+     * failure as listed above.
+     * "BUY_INTENT" - PendingIntent to start the purchase flow
+     * The Pending intent should be launched with startIntentSenderForResult. When purchase flow
+     * has completed, the onActivityResult() will give a resultCode of OK or CANCELED.
+     * If the purchase is successful, the result data will contain the following key-value pairs
+     * "RESPONSE_CODE" with int value, RESULT_OK(0) if success, other response codes on
+     * failure as listed above.
+     * "INAPP_PURCHASE_DATA" - String in JSON format similar to
+     * '{"orderId":"12999763169054705758.1371079406387615",
+     * "packageName":"com.example.app",
+     * "productId":"exampleSku",
+     * "purchaseTime":1345678900000,
+     * "purchaseToken" : "122333444455555",
+     * "developerPayload":"example developer payload" }'
+     * "INAPP_DATA_SIGNATURE" - String containing the signature of the purchase data that
+     * was signed with the private key of the developer
+     */
+    public Bundle getBuyIntent(final int apiVersion,
+                               @NonNull final String packageName,
+                               @NonNull final String sku,
+                               @NonNull final String type,
+                               @NonNull String developerPayload) throws android.os.RemoteException {
+        try {
+            return (Bundle) sMethodGetBuyIntent.invoke(mIInAppBillingService, apiVersion, packageName, sku, type, developerPayload);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    /**
+     * Returns the current SKUs owned by the user of the type and package name specified along with
+     * purchase information and a signature of the data to be validated.
+     * This will return all SKUs that have been purchased in V3 and managed items purchased using
+     * V1 and V2 that have not been consumed.
+     *
+     * @param apiVersion        billing API version that the app is using
+     * @param packageName       package name of the calling app
+     * @param type              the type of the in-app items being requested
+     *                          ("inapp" for one-time purchases and "subs" for subscription).
+     * @param continuationToken to be set as null for the first call, if the number of owned
+     *                          skus are too many, a continuationToken is returned in the response bundle.
+     *                          This method can be called again with the continuation token to get the next set of
+     *                          owned skus.
+     * @return Bundle containing the following key-value pairs
+     * "RESPONSE_CODE" with int value, RESULT_OK(0) if success, other response codes on
+     * failure as listed above.
+     * "INAPP_PURCHASE_ITEM_LIST" - StringArrayList containing the list of SKUs
+     * "INAPP_PURCHASE_DATA_LIST" - StringArrayList containing the purchase information
+     * "INAPP_DATA_SIGNATURE_LIST"- StringArrayList containing the signatures
+     * of the purchase information
+     * "INAPP_CONTINUATION_TOKEN" - String containing a continuation token for the
+     * next set of in-app purchases. Only set if the
+     * user has more owned skus than the current list.
+     */
+    public Bundle getPurchases(final int apiVersion,
+                               @NonNull final String packageName,
+                               @NonNull final String type,
+                               @NonNull final String continuationToken) throws android.os.RemoteException {
+        return getPurchases(mIInAppBillingService, apiVersion, packageName, type, continuationToken);
+    }
+
+    private static Bundle getPurchases(@NonNull final Object iInAppBillingService,
+                                       final int apiVersion,
+                                       @NonNull final String packageName,
+                                       @NonNull final String type,
+                                       @NonNull final String continuationToken) throws android.os.RemoteException {
+        try {
+            return (Bundle) sMethodGetPurchases.invoke(iInAppBillingService, apiVersion, packageName, type, continuationToken);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    /**
+     * Consume the last purchase of the given SKU. This will result in this item being removed
+     * from all subsequent responses to getPurchases() and allow re-purchase of this item.
+     *
+     * @param apiVersion    billing API version that the app is using
+     * @param packageName   package name of the calling app
+     * @param purchaseToken token in the purchase information JSON that identifies the purchase
+     *                      to be consumed
+     * @return 0 if consumption succeeded. Appropriate error values for failures.
+     */
+    public int consumePurchase(final int apiVersion,
+                               @NonNull final String packageName,
+                               @NonNull final String purchaseToken) throws android.os.RemoteException {
+        String purchaseData = !VKPaymentsServerSender.isNotVkUser() //
+                ? getPurchaseData(mIInAppBillingService, apiVersion, packageName, purchaseToken) //
+                : null;
+
+        int result;
+        try {
+            result = (Integer) sMethodConsumePurchase.invoke(mIInAppBillingService, apiVersion, packageName, purchaseToken);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+
+        final Context ctx = VKUIHelper.getApplicationContext();
+        if (!TextUtils.isEmpty(purchaseData) && ctx != null) {
+            VKPaymentsServerSender.getInstance(ctx).saveTransaction(purchaseData);
+        }
+
+        return result;
+    }
+
+    // ---------- STATIC METHODS ----------
+
+    /**
+     * Method for save transaction if you can't use
+     * VKIInAppBillingService mService = new VKIInAppBillingService(IInAppBillingService.Stub.asInterface(service));
+     * WARNING!!! this method must call before consume google and is it returned true
+     *
+     * @param apiVersion - version google apis
+     * @param purchaseToken - purchase token
+     * @return true is send is ok
+     * @throws android.os.RemoteException
+     */
+    public static boolean consumePurchaseToVk(final int apiVersion,
+                                              @NonNull final String purchaseToken) throws android.os.RemoteException {
+        if (Looper.getMainLooper().equals(Looper.myLooper())) {
+            throw new RuntimeException("Network on main thread");
+        }
+        final Context ctx = VKUIHelper.getApplicationContext();
+        if (ctx == null) {
+            return false;
+        }
+
+        final PurchaseData purchaseData = new PurchaseData();
+
+        if (!VKPaymentsServerSender.isNotVkUser()) {
+            final SyncServiceConnection serviceConnection = new SyncServiceConnection() {
+                @Override
+                public void onServiceConnectedImpl(ComponentName name, IBinder service) {
+                    Object iInAppBillingService = null;
+
+                    final Class<?> iInAppBillingServiceClassStub;
+                    try {
+                        iInAppBillingServiceClassStub = Class.forName("com.android.vending.billing.IInAppBillingService$Stub");
+                        Method asInterface = iInAppBillingServiceClassStub.getMethod("asInterface", android.os.IBinder.class);
+                        iInAppBillingService = asInterface.invoke(iInAppBillingServiceClassStub, service);
+                    } catch (ClassNotFoundException e) {
+                        throw new RuntimeException(PARAMS_ARE_NOT_VALID_ERROR);
+                    } catch (Exception e) {
+                        throw new RuntimeException(e);
+                    }
+
+                    try {
+                        purchaseData.purchaseData = getPurchaseData(iInAppBillingService, apiVersion, ctx.getPackageName(), purchaseToken);
+                    } catch (Exception e) {
+                        Log.e("VKSDK", "error", e);
+                        purchaseData.hasError = true;
+                    }
+                }
+
+                @Override
+                public void onServiceDisconnectedImpl(ComponentName name) {
+
+                }
+            };
+
+            Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
+            serviceIntent.setPackage("com.android.vending");
+            if (!ctx.getPackageManager().queryIntentServices(serviceIntent, 0).isEmpty()) {
+                // bind
+                ctx.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE);
+                // wait bind
+                synchronized (serviceConnection.syncObj) {
+                    while (!serviceConnection.isFinish) {
+                        try {
+                            serviceConnection.syncObj.wait();
+                        } catch (InterruptedException e) {
+                            e.printStackTrace();
+                        }
+                    }
+                }
+                // unbind
+                ctx.unbindService(serviceConnection);
+            } else {
+                return false;
+            }
+        } else {
+            return true;
+        }
+
+        if (purchaseData.hasError) {
+            return false;
+        } else if (!TextUtils.isEmpty(purchaseData.purchaseData)) {
+            VKPaymentsServerSender.getInstance(ctx).saveTransaction(purchaseData.purchaseData);
+        }
+
+        return true;
+    }
+
+    // ---------- PRIVATE METHODS ----------
+
+    private static String getPurchaseData(@NonNull final Object iInAppBillingService,
+                                          final int apiVersion,
+                                          @NonNull final String packageName,
+                                          @NonNull final String purchaseToken) throws RemoteException {
+        Bundle ownedItems = getPurchases(iInAppBillingService, apiVersion, packageName, "inapp", purchaseToken);
+        ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST);
+        if (purchaseDataList != null) {
+            for (int i = 0; i < purchaseDataList.size(); ++i) {
+                String purchaseDataLocal = purchaseDataList.get(i);
+                try {
+                    JSONObject o = new JSONObject(purchaseDataLocal);
+                    String token = o.optString(PURCHASE_DETAIL_TOKEN, o.optString(PURCHASE_DETAIL_PURCHASE_TOKEN));
+                    if (TextUtils.equals(purchaseToken, token)) {
+                        return getReceipt(iInAppBillingService, apiVersion, packageName, purchaseDataLocal).toJson();
+                    }
+                } catch (JSONException e) {
+                    // nothing
+                }
+            }
+        }
+        return null;
+    }
+
+    private static Receipt getReceipt(@NonNull final Object iInAppBillingService,
+                                      final int apiVersion,
+                                      @NonNull final String packageName,
+                                      @NonNull final String receiptOriginal) throws JSONException, RemoteException {
+        JSONObject objectReceipt = new JSONObject(receiptOriginal);
+
+        Receipt receipt = new Receipt();
+        receipt.receiptData = receiptOriginal;
+        receipt.quantity = 1;
+
+        String sku = objectReceipt.getString(PRODUCT_ID);
+
+        ArrayList<String> skuList = new ArrayList<>();
+        skuList.add(sku);
+
+        Bundle queryBundle = new Bundle();
+        queryBundle.putStringArrayList(GET_SKU_DETAILS_ITEM_LIST, skuList);
+        Bundle responseBundle = getSkuDetails(iInAppBillingService, apiVersion, packageName, "inapp", queryBundle);
+
+        ArrayList<String> responseList = responseBundle.getStringArrayList(RESPONSE_GET_SKU_DETAILS_LIST);
+        if (responseList != null && !responseList.isEmpty()) {
+            try {
+                JSONObject object = new JSONObject(responseList.get(0));
+                receipt.priceValue = Float.parseFloat(object.optString(SKU_DETAIL_AMOUNT_MICROS)) / 1000000f;
+                receipt.currency = object.optString(SKU_DETAIL_PRICE_CURRENCY_CODE);
+            } catch (JSONException e) {
+                // nothing
+            }
+        }
+        return receipt;
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiGetMessagesResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiGetMessagesResponse.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiGetMessagesResponse.java	(revision )
@@ -0,0 +1,88 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import org.json.JSONObject;
+
+public class VKApiGetMessagesResponse extends VKApiModel implements Parcelable {
+    /**
+     * Number of messages
+     */
+    public int count;
+    /**
+     * List messages
+     */
+    public VKList<VKApiMessage> items;
+
+    public VKApiGetMessagesResponse(JSONObject from) {
+        this.parse(from);
+    }
+
+    /**
+     * Fills an object from server response.
+     */
+    public VKApiGetMessagesResponse parse(JSONObject source) {
+        JSONObject response = source.optJSONObject("response");
+        this.count = response.optInt("count");
+        this.items = new VKList<>(response.optJSONArray("items"), VKApiMessage.class);
+        return this;
+    }
+
+    /**
+     * Creates an MessagesResponse instance from Parcel.
+     */
+    public VKApiGetMessagesResponse(Parcel in) {
+        this.count = in.readInt();
+        this.items = in.readParcelable(VKList.class.getClassLoader());
+    }
+
+    /**
+     * Creates empty MessagesResponse instance.
+     */
+    public VKApiGetMessagesResponse() {
+
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.count);
+        dest.writeParcelable(this.items, flags);
+    }
+
+    public static Creator<VKApiGetMessagesResponse> CREATOR = new Creator<VKApiGetMessagesResponse>() {
+        public VKApiGetMessagesResponse createFromParcel(Parcel source) {
+            return new VKApiGetMessagesResponse(source);
+        }
+
+        public VKApiGetMessagesResponse[] newArray(int size) {
+            return new VKApiGetMessagesResponse[size];
+        }
+    };
+}
Index: vksdk_library/src/main/res/layout/vk_captcha_dialog.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/layout/vk_captcha_dialog.xml	(revision )
+++ vksdk_library/src/main/res/layout/vk_captcha_dialog.xml	(revision )
@@ -0,0 +1,43 @@
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    tools:context=".VKCaptchaActivity$PlaceholderFragment"
+    android:background="@color/vk_grey_color"
+    android:padding="20dp">
+
+    <RelativeLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_centerHorizontal="true"
+        android:id="@+id/captcha_container">
+
+        <ProgressBar
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerInParent="true"
+            android:id="@+id/progressBar"/>
+
+        <ImageView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:id="@+id/imageView"
+            android:layout_alignParentTop="true"
+            android:visibility="gone"
+            android:contentDescription="@string/vk_enter_captcha_text"/>
+
+    </RelativeLayout>
+
+    <EditText
+        android:id="@+id/captchaAnswer"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/captcha_container"
+        android:hint="@string/vk_enter_captcha_text"
+        android:gravity="center"
+        android:textColor="@color/vk_color"
+        android:textColorHint="@color/vk_light_color"
+        android:imeOptions="actionSend"
+        android:inputType="textFilter|textNoSuggestions|textVisiblePassword"/>
+</RelativeLayout>
Index: app/src/main/res/menu/menu_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/menu_main.xml	(revision )
+++ app/src/main/res/menu/menu_main.xml	(revision )
@@ -0,0 +1,15 @@
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    tools:context=".Activitys.MainActivity" >
+    <item android:id="@+id/action_settings"
+        android:title="@string/action_settings"
+        android:orderInCategory="100"
+        app:showAsAction="never" />
+    <item
+        android:id="@+id/action_search"
+        android:icon="@drawable/ic_search_white_24dp"
+        app:showAsAction="always"
+        app:actionViewClass="android.support.v7.widget.SearchView"
+        android:title="Search"/>
+</menu>
Index: vksdk_library/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/AndroidManifest.xml	(revision )
+++ vksdk_library/src/main/AndroidManifest.xml	(revision )
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest package="com.vk.sdk"
+          xmlns:android="http://schemas.android.com/apk/res/android"
+          android:versionCode="1"
+          android:versionName="1.0">
+
+    <application>
+
+        <receiver
+            android:name=".payments.VKPaymentsReceiver"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.net.conn.CONNECTIVITY_CHANGE"/>
+            </intent-filter>
+            <intent-filter>
+                <action android:name="com.android.vending.INSTALL_REFERRER"/>
+            </intent-filter>
+        </receiver>
+    </application>
+</manifest>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiCommunityArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiCommunityArray.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiCommunityArray.java	(revision )
@@ -0,0 +1,16 @@
+package com.vk.sdk.api.model;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Array of VKGroup
+ * Created by alex_xpert on 28.01.14.
+ */
+public class VKApiCommunityArray extends VKList<VKApiCommunityFull> {
+    @Override
+    public VKApiModel parse(JSONObject response) throws JSONException {
+        fill(response, VKApiCommunityFull.class);
+        return this;
+    }
+}
Index: vksdk_library/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/build.gradle	(revision )
+++ vksdk_library/build.gradle	(revision )
@@ -0,0 +1,114 @@
+apply plugin: 'com.android.library'
+apply plugin: 'maven'
+apply plugin: 'signing'
+
+android {
+    compileSdkVersion 23
+    buildToolsVersion '23.0.1'
+
+    defaultConfig {
+        minSdkVersion 9
+        targetSdkVersion 22
+    }
+}
+
+configurations {
+    // Used for correct javadoc generation
+    javadocDeps
+}
+
+dependencies {
+    javadocDeps 'com.android.support:support-annotations:23.0.0'
+    compile 'com.android.support:support-v4:23.0.0'
+}
+
+if (project.hasProperty('officialBuild')) {
+    def String releaseRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
+    def String snapshotRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : 'https://oss.sonatype.org/content/repositories/snapshots/'
+    def String repositoryUsername = hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ''
+    def String repositoryPassword = hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ''
+
+    uploadArchives {
+        repositories {
+            mavenDeployer {
+                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+
+                pom.project {
+                    artifactId = 'androidsdk'
+                    name = 'VK API library'
+                    packaging = 'aar'
+                    description = 'Main VK Android API library'
+                    url = 'https://github.com/VKCOM/vk-android-sdk'
+                    scm {
+                        url 'https://github.com/VKCOM/vk-android-sdk'
+                        connection 'scm:git:git://github.com/VKCOM/vk-android-sdk.git'
+                        developerConnection 'scm:git:git://github.com/VKCOM/vk-android-sdk.git'
+                    }
+                    licenses {
+                        license {
+                            name "MIT License"
+                            url 'https://github.com/VKCOM/vk-android-sdk/raw/master/LICENSE'
+                            distribution 'repo'
+                        }
+                    }
+                    developers {
+                        developer {
+                            id 'dreddik'
+                            name 'Roman Truba'
+                            email 'roman@vk.com'
+                            url 'http://vk.com'
+                            organization 'VK'
+                            organizationUrl 'http://vk.com'
+                            roles {
+                                role 'developer'
+                            }
+                            timezone '+4'
+                        }
+                    }
+                }
+
+                repository(url: releaseRepositoryUrl) {
+                    authentication(userName: repositoryUsername, password: repositoryPassword)
+                }
+                snapshotRepository(url: snapshotRepositoryUrl) {
+                    authentication(userName: repositoryUsername, password: repositoryPassword)
+                }
+            }
+        }
+    }
+
+    task sourcesJar(type: Jar) {
+        from android.sourceSets.main.java.srcDirs
+        classifier = 'sources'
+    }
+
+    task javadoc(type: Javadoc) {
+        source = android.sourceSets.main.java.srcDirs
+        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+        classpath += configurations.javadocDeps
+    }
+
+    task javadocJar(type: Jar, dependsOn: javadoc) {
+        classifier = 'javadoc'
+        from javadoc.destinationDir
+    }
+
+    artifacts {
+        archives javadocJar
+        archives sourcesJar
+    }
+
+    signing {
+        required true
+        sign configurations.archives
+    }
+
+    //Turn off javadoc errors
+    if (JavaVersion.current().isJava8Compatible()) {
+        allprojects {
+            tasks.withType(Javadoc) {
+                options.addStringOption('Xdoclint:none', '-quiet')
+            }
+        }
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiAudio.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiAudio.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiAudio.java	(revision )
@@ -0,0 +1,204 @@
+package com.vk.sdk.api.methods;
+
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.model.VkAudioArray;
+
+/**
+ * Builds requests for API.audio part
+ */
+public class VKApiAudio extends VKApiBase {
+    /*
+     * https://vk.com/dev/audio.get
+     */
+    public VKRequest get() {
+        return get(null);
+    }
+
+    /*
+     * https://vk.com/dev/audio.get
+     */
+    public VKRequest get(VKParameters params) {
+        return prepareRequest("get", params, VkAudioArray.class);
+    }
+
+    /*
+     * https://vk.com/dev/audio.getById
+     */
+    public VKRequest getById(VKParameters params) {
+        return prepareRequest("getById", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.getLyrics
+     */
+    public VKRequest getLyrics(VKParameters params) {
+        return prepareRequest("getLyrics", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.search
+     */
+    public VKRequest search(VKParameters params) {
+        return prepareRequest("search", params, VkAudioArray.class);
+    }
+
+    /*
+     * https://vk.com/dev/audio.getUploadServer
+     */
+    public VKRequest getUploadServer() {
+        return getUploadServer(null);
+    }
+
+    /*
+     * https://vk.com/dev/audio.getUploadServer
+     */
+    public VKRequest getUploadServer(VKParameters params) {
+        return prepareRequest("getUploadServer", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.save
+     */
+    public VKRequest save(VKParameters params) {
+        return prepareRequest("save", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.add
+     */
+    public VKRequest add(VKParameters params) {
+        return prepareRequest("add", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.delete
+     */
+    public VKRequest delete(VKParameters params) {
+        return prepareRequest("delete", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.edit
+     */
+    public VKRequest edit(VKParameters params) {
+        return prepareRequest("edit", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.reorder
+     */
+    public VKRequest reorder(VKParameters params) {
+        return prepareRequest("reorder", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.restore
+     */
+    public VKRequest restore(VKParameters params) {
+        return prepareRequest("restore", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.getAlbums
+     */
+    public VKRequest getAlbums() {
+        return getAlbums(null);
+    }
+
+    /*
+     * https://vk.com/dev/audio.getAlbums
+     */
+    public VKRequest getAlbums(VKParameters params) {
+        return prepareRequest("getAlbums", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.addAlbum
+     */
+    public VKRequest addAlbum(VKParameters params) {
+        return prepareRequest("addAlbum", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.editAlbum
+     */
+    public VKRequest editAlbum(VKParameters params) {
+        return prepareRequest("editAlbum", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.deleteAlbum
+     */
+    public VKRequest deleteAlbum(VKParameters params) {
+        return prepareRequest("deleteAlbum", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.moveToAlbum
+     */
+    public VKRequest moveToAlbum(VKParameters params) {
+        return prepareRequest("moveToAlbum", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.setBroadcast
+     */
+    public VKRequest setBroadcast(VKParameters params) {
+        return prepareRequest("setBroadcast", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.getBroadcastList
+     */
+    public VKRequest getBroadcastList() {
+        return getBroadcastList(null);
+    }
+
+    /*
+     * https://vk.com/dev/audio.getBroadcastList
+     */
+    public VKRequest getBroadcastList(VKParameters params) {
+        return prepareRequest("getBroadcastList", params);
+    }
+
+    /*
+     * https://vk.com/dev/audio.getRecommendations
+     */
+    public VKRequest getRecommendations() {
+        return getRecommendations(null);
+    }
+
+    /*
+     * https://vk.com/dev/audio.getRecommendations
+     */
+    public VKRequest getRecommendations(VKParameters params) {
+        return prepareRequest("getRecommendations", params, VkAudioArray.class);
+    }
+
+    /*
+     * https://vk.com/dev/audio.getPopular
+     */
+    public VKRequest getPopular() {
+        return getPopular(null);
+    }
+
+    /*
+     * https://vk.com/dev/audio.getPopular
+     */
+    public VKRequest getPopular(VKParameters params) {
+        return prepareRequest("getPopular", params, VkAudioArray.class);
+    }
+
+    /*
+     * https://vk.com/dev/audio.getCount
+     */
+    public VKRequest getCount(VKParameters params) {
+        return prepareRequest("getCount", params);
+    }
+
+    @Override
+    protected String getMethodsGroup() {
+        return "audio";
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiDocument.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiDocument.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiDocument.java	(revision )
@@ -0,0 +1,220 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.text.TextUtils;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+import static com.vk.sdk.api.model.VKAttachments.*;
+
+/**
+ * A document object describes a document file.
+ */
+@SuppressWarnings("unused")
+public class VKApiDocument extends VKApiAttachment implements Parcelable, Identifiable {
+
+    /**
+     * Document ID.
+     */
+    public int id;
+
+    /**
+     * ID of the user or group who uploaded the document.
+     */
+    public int owner_id;
+
+    /**
+     * Document title.
+     */
+    public String title;
+
+    /**
+     * Document size (in bytes).
+     */
+    public long size;
+
+    /**
+     * Document extension.
+     */
+    public String ext;
+
+    /**
+     * Document URL for downloading.
+     */
+    public String url;
+
+    /**
+     * Document size (in bytes).
+     */
+    public long date;
+    /**
+     * URL of the 100x75px image (if the file is graphical).
+     */
+    public String photo_100;
+
+    /**
+     * URL of the 130x100px image (if the file is graphical).
+     */
+    public String photo_130;
+
+    /**
+     * Array of all photos.
+     */
+    public VKPhotoSizes photo = new VKPhotoSizes();
+
+    /**
+     * An access key using for get information about hidden objects.
+     */
+    public String access_key;
+
+    private boolean mIsGif;
+    private boolean mIsImage;
+
+	public VKApiDocument(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills a Doc instance from JSONObject.
+     */
+    public VKApiDocument parse(JSONObject jo) {
+        id = jo.optInt("id");
+        owner_id = jo.optInt("owner_id");
+        title = jo.optString("title");
+        size = jo.optLong("size");
+        ext = jo.optString("ext");
+        url = jo.optString("url");
+        date = jo.optLong("date");
+        access_key = jo.optString("access_key");
+
+        photo_100 = jo.optString("photo_100");
+        if(!TextUtils.isEmpty(photo_100)) {
+            photo.add(VKApiPhotoSize.create(photo_100, 100, 75));
+        }
+        photo_130 = jo.optString("photo_130");
+        if(!TextUtils.isEmpty(photo_130)) {
+            photo.add(VKApiPhotoSize.create(photo_130, 130, 100));
+        }
+        photo.sort();
+        return this;
+    }
+
+    /**
+     * Creates a Doc instance from Parcel.
+     */
+    public VKApiDocument(Parcel in) {
+        this.id = in.readInt();
+        this.owner_id = in.readInt();
+        this.title = in.readString();
+        this.size = in.readLong();
+        this.ext = in.readString();
+        this.url = in.readString();
+        this.date = in.readLong();
+        this.photo_100 = in.readString();
+        this.photo_130 = in.readString();
+        this.photo = in.readParcelable(VKPhotoSizes.class.getClassLoader());
+        this.access_key = in.readString();
+        this.mIsImage = in.readByte() != 0;
+        this.mIsGif = in.readByte() != 0;
+    }
+
+    /**
+     * Creates empty Doc instance.
+     */
+    public VKApiDocument() {
+
+    }
+
+    public boolean isImage() {
+        mIsImage = mIsImage ||
+                "jpg".equals(ext) ||
+                "jpeg".equals(ext) ||
+                "png".equals(ext) ||
+                "bmp".equals(ext);
+        return mIsImage;
+    }
+
+    public boolean isGif() {
+        mIsGif = mIsGif || "gif".equals(ext);
+        return mIsGif;
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public String toString() {
+        return title;
+    }
+
+    @Override
+    public CharSequence toAttachmentString() {
+        StringBuilder result = new StringBuilder(TYPE_DOC).append(owner_id).append('_').append(id);
+        if(!TextUtils.isEmpty(access_key)) {
+            result.append('_');
+            result.append(access_key);
+        }
+        return result;
+    }
+
+    @Override
+    public String getType() {
+        return TYPE_DOC;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeInt(this.owner_id);
+        dest.writeString(this.title);
+        dest.writeLong(this.size);
+        dest.writeString(this.ext);
+        dest.writeString(this.url);
+        dest.writeLong(this.date);
+        dest.writeString(this.photo_100);
+        dest.writeString(this.photo_130);
+        dest.writeParcelable(this.photo, flags);
+        dest.writeString(this.access_key);
+        dest.writeByte(mIsImage ? (byte) 1 : (byte) 0);
+        dest.writeByte(mIsGif ? (byte) 1 : (byte) 0);
+    }
+
+    public static Creator<VKApiDocument> CREATOR = new Creator<VKApiDocument>() {
+        public VKApiDocument createFromParcel(Parcel source) {
+            return new VKApiDocument(source);
+        }
+
+        public VKApiDocument[] newArray(int size) {
+            return new VKApiDocument[size];
+        }
+    };
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiUser.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiUser.java	(revision )
@@ -0,0 +1,257 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * User.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 18.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.text.TextUtils;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * User object describes a user profile.
+ */
+@SuppressWarnings("unused")
+public class VKApiUser extends VKApiOwner implements android.os.Parcelable {
+
+    /**
+     * Field name for {@link #online} param.
+     */
+    public final static String FIELD_ONLINE = "online";
+
+    /**
+     * Field name for {@link #online_mobile} param.
+     */
+    public final static String FIELD_ONLINE_MOBILE = "online_mobile";
+
+    /**
+     * Field name for {@link #photo_50} param.
+     */
+    public final static String FIELD_PHOTO_50 = "photo_50";
+
+    /**
+     * Field name for {@link #photo_100} param.
+     */
+    public final static String FIELD_PHOTO_100 = "photo_100";
+
+    /**
+     * Field name for {@link #photo_200} param.
+     */
+    public final static String FIELD_PHOTO_200 = "photo_200";
+
+	/**
+	 * Field name for {@link #photo_400_orig} param.
+	 */
+	public final static String FIELD_PHOTO_400_ORIGIN = "photo_400_orig";
+
+	/**
+	 * Field name for {@link #photo_max} param.
+	 */
+	public final static String FIELD_PHOTO_MAX = "photo_max";
+
+	/**
+	 * Field name for {@link #photo_max_orig} param.
+	 */
+	public final static String FIELD_PHOTO_MAX_ORIGIN = "photo_max_orig";
+
+	/**
+	 * Field name for {@link #photo_big} param.
+	 */
+	public final static String FIELD_PHOTO_BIG = "photo_big";
+
+    /**
+     * All required for fill all fields.
+     */
+    public final static String FIELDS_DEFAULT = TextUtils.join(",", new String[]{FIELD_ONLINE, FIELD_ONLINE_MOBILE, FIELD_PHOTO_50, FIELD_PHOTO_100, FIELD_PHOTO_200});
+
+    /**
+     * First name of user.
+     */
+    public String first_name = "DELETED";
+
+    /**
+     * Last name of user.
+     */
+    public String last_name = "DELETED";
+
+    /**
+     * Information whether the user is online.
+     */
+    public boolean online;
+
+    /**
+     * If user utilizes a mobile application or site mobile version, it returns online_mobile as additional.
+     */
+    public boolean online_mobile;
+
+    /**
+     * URL of default square photo of the user with 50 pixels in width.
+     */
+    public String photo_50 = "http://vk.com/images/camera_c.gif";
+
+    /**
+     * URL of default square photo of the user with 100 pixels in width.
+     */
+    public String photo_100 = "http://vk.com/images/camera_b.gif";
+
+    /**
+     * URL of default square photo of the user with 200 pixels in width.
+     */
+    public String photo_200 = "http://vk.com/images/camera_a.gif";
+
+	/**
+	 * URL of default photo of the user with 200 pixels in width.
+	 */
+	public String photo_200_orig = "http://vk.com/images/camera_a.gif";
+
+	/**
+	 * URL of default photo of the user with 400 pixels in width.
+	 */
+	public String photo_400_orig = "";
+
+	public String photo_max = "http://vk.com/images/camera_b.gif";
+
+	public String photo_max_orig = "http://vk.com/images/camera_a.gif";
+
+	public String photo_big = "";
+
+    /**
+     * {@link #photo_50}, {@link #photo_100}, {@link #photo_200} included here in Photo Sizes format.
+     */
+    public VKPhotoSizes photo = new VKPhotoSizes();
+
+	public VKApiUser(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills an user object from server response.
+     */
+    public VKApiUser parse(JSONObject from) {
+        super.parse(from);
+        first_name = from.optString("first_name", first_name);
+        last_name = from.optString("last_name", last_name);
+        online = ParseUtils.parseBoolean(from, FIELD_ONLINE);
+        online_mobile = ParseUtils.parseBoolean(from, FIELD_ONLINE_MOBILE);
+
+	    photo_50 = addSquarePhoto(from.optString(FIELD_PHOTO_50, photo_50), 50);
+	    photo_100 = addSquarePhoto(from.optString(FIELD_PHOTO_100, photo_100), 100);
+	    photo_200 = addSquarePhoto(from.optString(FIELD_PHOTO_200, photo_200), 200);
+
+	    photo_400_orig = from.optString(FIELD_PHOTO_400_ORIGIN, photo_400_orig);
+	    photo_max = from.optString(FIELD_PHOTO_MAX, photo_max);
+	    photo_max_orig = from.optString(FIELD_PHOTO_MAX_ORIGIN, photo_max_orig);
+	    photo_big = from.optString(FIELD_PHOTO_BIG, photo_big);
+
+        photo.sort();
+        return this;
+    }
+
+	protected String addSquarePhoto(String photoUrl, int size) {
+		if(!TextUtils.isEmpty(photoUrl)) {
+			photo.add(VKApiPhotoSize.create(photoUrl, size));
+		}
+		return photoUrl;
+	}
+
+    /**
+     * Creates an User instance from Parcel.
+     */
+    public VKApiUser(Parcel in) {
+        super(in);
+        this.first_name = in.readString();
+        this.last_name = in.readString();
+        this.online = in.readByte() != 0;
+        this.online_mobile = in.readByte() != 0;
+        this.photo_50 = in.readString();
+        this.photo_100 = in.readString();
+        this.photo_200 = in.readString();
+        this.photo = in.readParcelable(VKPhotoSizes.class.getClassLoader());
+        this.full_name = in.readString();
+
+	    this.photo_400_orig = in.readString();
+	    this.photo_max = in.readString();
+	    this.photo_max_orig = in.readString();
+	    this.photo_big = in.readString();
+    }
+
+    /**
+     * Creates empty User instance.
+     */
+    public VKApiUser() {
+
+    }
+
+    private String full_name;
+
+    /**
+     * @return full user name
+     */
+    @Override
+    public String toString() {
+        if(full_name == null) {
+            full_name = first_name + ' ' + last_name;
+        }
+        return full_name;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        super.writeToParcel(dest, flags);
+        dest.writeString(this.first_name);
+        dest.writeString(this.last_name);
+        dest.writeByte(online ? (byte) 1 : (byte) 0);
+        dest.writeByte(online_mobile ? (byte) 1 : (byte) 0);
+        dest.writeString(this.photo_50);
+        dest.writeString(this.photo_100);
+        dest.writeString(this.photo_200);
+        dest.writeParcelable(this.photo, flags);
+        dest.writeString(this.full_name);
+
+	    dest.writeString(this.photo_400_orig);
+	    dest.writeString(this.photo_max);
+	    dest.writeString(this.photo_max_orig);
+	    dest.writeString(this.photo_big);
+    }
+
+    public static Creator<VKApiUser> CREATOR = new Creator<VKApiUser>() {
+        public VKApiUser createFromParcel(Parcel source) {
+            return new VKApiUser(source);
+        }
+
+        public VKApiUser[] newArray(int size) {
+            return new VKApiUser[size];
+        }
+    };
+}
Index: app/src/main/res/menu/example.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/example.xml	(revision )
+++ app/src/main/res/menu/example.xml	(revision )
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+    <item
+        android:id="@+id/action_settings"
+        android:orderInCategory="100"
+        android:title="@string/action_settings"
+        app:showAsAction="never" />
+</menu>
Index: vksdk_library/src/main/java/com/vk/sdk/util/VKUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/util/VKUtil.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/util/VKUtil.java	(revision )
@@ -0,0 +1,285 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.util;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.content.pm.Signature;
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.vk.sdk.VKSdk;
+import com.vk.sdk.api.VKParameters;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.math.BigInteger;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.security.spec.InvalidParameterSpecException;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Various useful functions
+ */
+public class VKUtil {
+    /**
+     * Breaks key=value&key=value string to map
+     *
+     * @param queryString string to explode
+     * @return Key-value map of passed string
+     */
+    @Nullable
+    public static Map<String, String> explodeQueryString(@Nullable String queryString) {
+        if (queryString == null) {
+            return null;
+        }
+        String[] keyValuePairs = queryString.split("&");
+        HashMap<String, String> parameters = new HashMap<>(keyValuePairs.length);
+
+        for (String keyValueString : keyValuePairs) {
+            String[] keyValueArray = keyValueString.split("=");
+            parameters.put(keyValueArray[0], keyValueArray[1]);
+        }
+        return parameters;
+    }
+
+    /**
+     * Reads content of file, and returns result as string
+     *
+     * @param filename path to file
+     * @return Contents of file
+     * @throws IOException
+     */
+    public static String fileToString(String filename) throws IOException {
+        BufferedReader reader = new BufferedReader(new FileReader(filename));
+        StringBuilder builder = new StringBuilder();
+        String line;
+
+        // For every line in the file, append it to the string builder
+        while ((line = reader.readLine()) != null) {
+            builder.append(line);
+        }
+        reader.close();
+
+        return builder.toString();
+    }
+
+    /**
+     * Saves passed string to file
+     *
+     * @param filename      path to file
+     * @param stringToWrite string to save
+     */
+    public static void stringToFile(String filename, String stringToWrite) {
+        try {
+            BufferedWriter writer = new BufferedWriter(new FileWriter(filename));
+            writer.write(stringToWrite);
+            writer.flush();
+            writer.close();
+        } catch (Exception ignored) {
+        }
+    }
+
+    /**
+     * Returns md5 hash of string
+     *
+     * @param s string to hash
+     * @return md5 hash
+     */
+    public static String md5(final String s) {
+        try {
+            // Create MD5 Hash
+            MessageDigest digest = MessageDigest.getInstance("MD5");
+            digest.update(s.getBytes());
+            byte messageDigest[] = digest.digest();
+
+            // Create Hex String
+            StringBuilder hexString = new StringBuilder();
+            for (byte aMessageDigest : messageDigest) {
+                String h = Integer.toHexString(0xFF & aMessageDigest);
+                while (h.length() < 2)
+                    h = "0" + h;
+                hexString.append(h);
+            }
+            return hexString.toString();
+
+        } catch (NoSuchAlgorithmException e) {
+            if (VKSdk.DEBUG)
+                e.printStackTrace();
+        }
+        return "";
+    }
+
+    /**
+     * Get current certificate fingerprint
+     *
+     * @param ctx         context of application
+     * @param packageName your package name
+     * @return Base64 packed SHA fingerprint of your packet certificate
+     */
+    public static String[] getCertificateFingerprint(Context ctx, String packageName) {
+        try {
+	        if (ctx == null || ctx.getPackageManager() == null)
+		        return null;
+            @SuppressLint("PackageManagerGetSignatures")
+            PackageInfo info = ctx.getPackageManager().getPackageInfo(
+                    packageName,
+                    PackageManager.GET_SIGNATURES);
+	        assert info.signatures != null;
+	        String[] result = new String[info.signatures.length];
+            int i = 0;
+            for (Signature signature : info.signatures) {
+                MessageDigest md = MessageDigest.getInstance("SHA");
+                md.update(signature.toByteArray());
+                result[i++] = toHex(md.digest());
+            }
+            return result;
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    private static String toHex(byte[] bytes) {
+        BigInteger bi = new BigInteger(1, bytes);
+        return String.format("%0" + (bytes.length << 1) + "X", bi);
+    }
+
+    /**
+     * Builds map from list of strings
+     *
+     * @param args key-value pairs for build a map. Must be a multiple of 2
+     * @return Result map. If args not multiple of 2, last argument will be ignored
+     */
+    public static Map<String, Object> mapFrom(Object... args) {
+        if (args.length % 2 != 0) {
+            if (VKSdk.DEBUG)
+                Log.w("VKUtil", "Params must be paired. Last one is ignored");
+        }
+        LinkedHashMap<String, Object> result = new LinkedHashMap<>(args.length / 2);
+        for (int i = 0; i + 1 < args.length; i += 2) {
+            if (args[i] == null || args[i + 1] == null || !(args[i] instanceof String)) {
+                if (VKSdk.DEBUG)
+                    Log.e("VK SDK", "Error while using mapFrom", new InvalidParameterSpecException("Key and value must be specified. Key must be string"));
+                continue;
+            }
+            result.put((String) args[i], args[i + 1]);
+        }
+        return result;
+    }
+
+    public static VKParameters paramsFrom(Object... args) {
+        return new VKParameters(mapFrom(args));
+    }
+
+    /**
+     * Check if package installed
+     *
+     * @param context Context of current app
+     * @param uri Package of application to check
+     * @return true if passed package installed
+     */
+    public static boolean isAppInstalled(Context context, String uri) {
+        PackageManager pm = context.getPackageManager();
+        boolean appInstalled;
+        try {
+            assert pm != null;
+            pm.getPackageInfo(uri, PackageManager.GET_ACTIVITIES);
+            appInstalled = true;
+        } catch (PackageManager.NameNotFoundException e) {
+            appInstalled = false;
+        }
+        return appInstalled;
+    }
+    /**
+     * Check if action available installed
+     *
+     * @param context Context of current app
+     * @param action Package of application to check
+     * @return true if passed package installed
+     */
+    public static boolean isIntentAvailable(Context context, String action) {
+        final PackageManager packageManager = context.getPackageManager();
+        final Intent intent = new Intent(action);
+        assert packageManager != null;
+        List<ResolveInfo> list =
+                packageManager.queryIntentActivities(intent,
+                        PackageManager.MATCH_DEFAULT_ONLY);
+        return list.size() > 0;
+    }
+
+    /**
+     * Finds current application name
+     * @param ctx context of application
+     * @return Name of current application
+     */
+    public static String getApplicationName(Context ctx) {
+        ApplicationInfo ai;
+        try {
+            Context appContext = ctx.getApplicationContext();
+            assert appContext != null;
+            final PackageManager pm = appContext.getPackageManager();
+            assert pm != null;
+            ai = pm.getApplicationInfo(ctx.getPackageName(), 0);
+            return (String) (ai != null ? pm.getApplicationLabel(ai) : "(unknown)");
+        } catch (Exception ignored) {
+        }
+        return null;
+    }
+
+    /**
+     * Will take a url such as http://www.stackoverflow.com and return www.stackoverflow.com
+     * Author: aioobe http://stackoverflow.com/a/4826122/1271424
+     *
+     * @param url url need to find host
+     * @return host name of given url
+     */
+    public static String getHost(String url){
+        if(url == null || url.length() == 0)
+            return "";
+
+        int doubleslash = url.indexOf("//");
+        if(doubleslash == -1)
+            doubleslash = 0;
+        else
+            doubleslash += 2;
+
+        int end = url.indexOf('/', doubleslash);
+        end = end >= 0 ? end : url.length();
+
+        int port = url.indexOf(':', doubleslash);
+        end = (port > 0 && port < end) ? port : end;
+
+        return url.substring(doubleslash, end);
+    }
+}
Index: app/src/main/res/layout/progress_bar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/progress_bar.xml	(revision )
+++ app/src/main/res/layout/progress_bar.xml	(revision )
@@ -0,0 +1,11 @@
+<ProgressBar
+    android:id="@+id/progressBar"
+    style="?android:attr/progressBarStyleHorizontal"
+    android:layout_width="150dp"
+    android:layout_height="150dp"
+    android:layout_alignParentBottom="true"
+    android:layout_centerHorizontal="true"
+    android:max="100"
+    android:progress="0"
+    android:progressDrawable="@drawable/progres_bar"
+    xmlns:android="http://schemas.android.com/apk/res/android" />
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/payments/VKPaymentsCallback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/payments/VKPaymentsCallback.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/payments/VKPaymentsCallback.java	(revision )
@@ -0,0 +1,33 @@
+//
+//  Copyright (c) 2015 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.payments;
+
+import android.content.Context;
+
+public abstract class VKPaymentsCallback {
+
+    public static void requestUserState(Context ctx, VKPaymentsCallback callback) {
+        VKPaymentsServerSender.getInstance(ctx).requestUserState(callback);
+    }
+
+    public abstract void onUserState(boolean userIsVk);
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPhoto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPhoto.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPhoto.java	(revision )
@@ -0,0 +1,305 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.text.TextUtils;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import static com.vk.sdk.api.model.ParseUtils.parseBoolean;
+import static com.vk.sdk.api.model.ParseUtils.parseInt;
+import static com.vk.sdk.api.model.VKAttachments.*;
+
+/**
+ * Describes a photo object from VK.
+ */
+public class VKApiPhoto extends VKAttachments.VKApiAttachment implements Parcelable, Identifiable {
+
+    /**
+     * Photo ID, positive number
+     */
+    public int id;
+
+    /**
+     * Photo album ID.
+     */
+    public int album_id;
+
+    /**
+     * ID of the user or community that owns the photo.
+     */
+    public int owner_id;
+
+    /**
+     * Width (in pixels) of the original photo.
+     */
+    public int width;
+
+    /**
+     * Height (in pixels) of the original photo.
+     */
+    public int height;
+
+    /**
+     * Text describing the photo.
+     */
+    public String text;
+
+    /**
+     * Date (in Unix time) the photo was added.
+     */
+    public long date;
+
+    /**
+     * URL of image with maximum size 75x75px.
+     */
+    public String photo_75;
+
+    /**
+     * URL of image with maximum size 130x130px.
+     */
+    public String photo_130;
+
+    /**
+     * URL of image with maximum size 604x604px.
+     */
+    public String photo_604;
+
+    /**
+     * URL of image with maximum size 807x807px.
+     */
+    public String photo_807;
+
+    /**
+     * URL of image with maximum size 1280x1024px.
+     */
+    public String photo_1280;
+
+    /**
+     * URL of image with maximum size 2560x2048px.
+     */
+    public String photo_2560;
+
+    /**
+     * All photo thumbs in photo sizes.
+     * It has data even if server returned them without {@code PhotoSizes} format.
+     */
+    public VKPhotoSizes src = new VKPhotoSizes();
+
+    /**
+     * Information whether the current user liked the photo.
+     */
+    public boolean user_likes;
+
+    /**
+     * Whether the current user can comment on the photo
+     */
+    public boolean can_comment;
+
+    /**
+     * Number of likes on the photo.
+     */
+    public int likes;
+
+    /**
+     * Number of comments on the photo.
+     */
+    public int comments;
+
+    /**
+     * Number of tags on the photo.
+     */
+    public int tags;
+
+    /**
+     * An access key using for get information about hidden objects.
+     */
+    public String access_key;
+
+	public VKApiPhoto(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills a Photo instance from JSONObject.
+     */
+    public VKApiPhoto parse(JSONObject from) {
+        album_id = from.optInt("album_id");
+        date = from.optLong("date");
+        height = from.optInt("height");
+        width = from.optInt("width");
+        owner_id = from.optInt("owner_id");
+        id = from.optInt("id");
+        text = from.optString("text");
+        access_key = from.optString("access_key");
+
+        photo_75 = from.optString("photo_75");
+        photo_130 = from.optString("photo_130");
+        photo_604 = from.optString("photo_604");
+        photo_807 = from.optString("photo_807");
+        photo_1280 = from.optString("photo_1280");
+        photo_2560 = from.optString("photo_2560");
+
+        JSONObject likes = from.optJSONObject("likes");
+        this.likes = ParseUtils.parseInt(likes, "count");
+        this.user_likes = ParseUtils.parseBoolean(likes, "user_likes");
+        comments = parseInt(from.optJSONObject("comments"), "count");
+        tags = parseInt(from.optJSONObject("tags"), "count");
+        can_comment = parseBoolean(from, "can_comment");
+
+        src.setOriginalDimension(width, height);
+        JSONArray photo_sizes = from.optJSONArray("sizes");
+        if(photo_sizes != null) {
+            src.fill(photo_sizes);
+        } else {
+            if(!TextUtils.isEmpty(photo_75)) {
+                src.add(VKApiPhotoSize.create(photo_75, VKApiPhotoSize.S, width, height));
+            }
+            if(!TextUtils.isEmpty(photo_130)) {
+                src.add(VKApiPhotoSize.create(photo_130, VKApiPhotoSize.M, width, height));
+            }
+            if(!TextUtils.isEmpty(photo_604)) {
+                src.add(VKApiPhotoSize.create(photo_604, VKApiPhotoSize.X, width, height));
+            }
+            if(!TextUtils.isEmpty(photo_807)) {
+                src.add(VKApiPhotoSize.create(photo_807, VKApiPhotoSize.Y, width, height));
+            }
+            if(!TextUtils.isEmpty(photo_1280)) {
+                src.add(VKApiPhotoSize.create(photo_1280, VKApiPhotoSize.Z, width, height));
+            }
+            if(!TextUtils.isEmpty(photo_2560)) {
+                src.add(VKApiPhotoSize.create(photo_2560, VKApiPhotoSize.W, width, height));
+            }
+            src.sort();
+        }
+        return this;
+    }
+
+    /**
+     * Creates a Photo instance from Parcel.
+     */
+    public VKApiPhoto(Parcel in) {
+        this.id = in.readInt();
+        this.album_id = in.readInt();
+        this.owner_id = in.readInt();
+        this.width = in.readInt();
+        this.height = in.readInt();
+        this.text = in.readString();
+        this.date = in.readLong();
+        this.src = in.readParcelable(VKPhotoSizes.class.getClassLoader());
+        this.photo_75 = in.readString();
+        this.photo_130 = in.readString();
+        this.photo_604 = in.readString();
+        this.photo_807 = in.readString();
+        this.photo_1280 = in.readString();
+        this.photo_2560 = in.readString();
+        this.user_likes = in.readByte() != 0;
+        this.can_comment = in.readByte() != 0;
+        this.likes = in.readInt();
+        this.comments = in.readInt();
+        this.tags = in.readInt();
+        this.access_key = in.readString();
+    }
+
+    /**
+     * Init photo object with attachment string like photo45898586_334180483
+     * @param photoAttachmentString string of format photo[OWNER_ID]_[PHOTO_ID]
+     */
+    public VKApiPhoto(String photoAttachmentString) {
+        if (photoAttachmentString.startsWith(TYPE_PHOTO)) {
+            photoAttachmentString = photoAttachmentString.substring(TYPE_PHOTO.length());
+            String[] ids  = photoAttachmentString.split("_");
+            this.owner_id = Integer.parseInt(ids[0]);
+            this.id       = Integer.parseInt(ids[1]);
+        }
+    }
+
+    /**
+     * Creates empty Photo instance.
+     */
+    public VKApiPhoto() {
+
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public CharSequence toAttachmentString() {
+        StringBuilder result = new StringBuilder(TYPE_PHOTO).append(owner_id).append('_').append(id);
+        if(!TextUtils.isEmpty(access_key)) {
+            result.append('_');
+            result.append(access_key);
+        }
+        return result;
+    }
+
+    @Override
+    public String getType() {
+        return TYPE_PHOTO;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeInt(this.album_id);
+        dest.writeInt(this.owner_id);
+        dest.writeInt(this.width);
+        dest.writeInt(this.height);
+        dest.writeString(this.text);
+        dest.writeLong(this.date);
+        dest.writeParcelable(this.src, flags);
+        dest.writeString(this.photo_75);
+        dest.writeString(this.photo_130);
+        dest.writeString(this.photo_604);
+        dest.writeString(this.photo_807);
+        dest.writeString(this.photo_1280);
+        dest.writeString(this.photo_2560);
+        dest.writeByte(user_likes ? (byte) 1 : (byte) 0);
+        dest.writeByte(can_comment ? (byte) 1 : (byte) 0);
+        dest.writeInt(this.likes);
+        dest.writeInt(this.comments);
+        dest.writeInt(this.tags);
+        dest.writeString(this.access_key);
+    }
+
+    public static Creator<VKApiPhoto> CREATOR = new Creator<VKApiPhoto>() {
+        public VKApiPhoto createFromParcel(Parcel source) {
+            return new VKApiPhoto(source);
+        }
+
+        public VKApiPhoto[] newArray(int size) {
+            return new VKApiPhoto[size];
+        }
+    };
+
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiUserFull.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiUserFull.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiUserFull.java	(revision )
@@ -0,0 +1,931 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import static com.vk.sdk.api.model.ParseUtils.parseBoolean;
+import static com.vk.sdk.api.model.ParseUtils.parseLong;
+
+/**
+ * Represents full user profile.
+ */
+@SuppressWarnings("unused")
+public class VKApiUserFull extends VKApiUser implements android.os.Parcelable {
+
+    /**
+     * Filed last_seen from VK fields set
+     */
+    public static final String LAST_SEEN = "last_seen";
+
+    /**
+     * Filed bdate from VK fields set
+     */
+    public static final String BDATE = "bdate";
+
+    /**
+     * Filed city from VK fields set
+     */
+    public static final String CITY = "city";
+
+    /**
+     * Filed country from VK fields set
+     */
+    public static final String COUNTRY = "country";
+
+    /**
+     * Filed universities from VK fields set
+     */
+    public static final String UNIVERSITIES = "universities";
+
+    /**
+     * Filed schools from VK fields set
+     */
+    public static final String SCHOOLS = "schools";
+
+    /**
+     * Filed activity from VK fields set
+     */
+    public static final String ACTIVITY = "activity";
+
+    /**
+     * Filed personal from VK fields set
+     */
+    public static final String PERSONAL = "personal";
+
+    /**
+     * Filed sex from VK fields set
+     */
+    public static final String SEX = "sex";
+
+    /**
+     * Filed site from VK fields set
+     */
+    public static final String SITE = "site";
+
+    /**
+     * Filed contacts from VK fields set
+     */
+    public static final String CONTACTS = "contacts";
+
+    /**
+     * Filed can_post from VK fields set
+     */
+    public static final String CAN_POST = "can_post";
+
+    /**
+     * Filed can_see_all_posts from VK fields set
+     */
+    public static final String CAN_SEE_ALL_POSTS = "can_see_all_posts";
+
+    /**
+     * Filed can_write_private_message from VK fields set
+     */
+    public static final String CAN_WRITE_PRIVATE_MESSAGE = "can_write_private_message";
+
+    /**
+     * Filed relation from VK fields set
+     */
+    public static final String RELATION = "relation";
+
+    /**
+     * Filed counters from VK fields set
+     */
+    public static final String COUNTERS = "counters";
+
+    /**
+     * Filed occupation from VK fields set
+     */
+    public static final String OCCUPATION = "occupation";
+
+    /**
+     * Filed activities from VK fields set
+     */
+    public static final String ACTIVITIES = "activities";
+
+    /**
+     * Filed interests from VK fields set
+     */
+    public static final String INTERESTS = "interests";
+
+    /**
+     * Filed movies from VK fields set
+     */
+    public static final String MOVIES = "movies";
+
+    /**
+     * Filed tv from VK fields set
+     */
+    public static final String TV = "tv";
+
+    /**
+     * Filed books from VK fields set
+     */
+    public static final String BOOKS = "books";
+
+    /**
+     * Filed games from VK fields set
+     */
+    public static final String GAMES = "games";
+
+    /**
+     * Filed about from VK fields set
+     */
+    public static final String ABOUT = "about";
+
+    /**
+     * Filed quotes from VK fields set
+     */
+    public static final String QUOTES = "quotes";
+
+    /**
+     * Filed connections from VK fields set
+     */
+    public static final String CONNECTIONS = "connections";
+
+    /**
+     * Filed relatives from VK fields set
+     */
+    public static final String RELATIVES = "relatives";
+
+    /**
+     * Filed wall_default from VK fields set
+     */
+    public static final String WALL_DEFAULT = "wall_default";
+
+    /**
+     * Filed verified from VK fields set
+     */
+    public static final String VERIFIED = "verified";
+
+    /**
+     * Filed screen_name from VK fields set
+     */
+    public static final String SCREEN_NAME = "screen_name";
+
+    /**
+     * Filed blacklisted_by_me from VK fields set
+     */
+    public static final String BLACKLISTED_BY_ME = "blacklisted_by_me";
+
+    /**
+     * Text of user status.
+     */
+    public String activity;
+
+    /**
+     * Audio which broadcasting to status.
+     */
+    public VKApiAudio status_audio;
+
+    /**
+     * User's date of birth.  Returned as DD.MM.YYYY or DD.MM (if birth year is hidden).
+     */
+    public String bdate;
+
+    /**
+     * City specified on user's page in "Contacts" section.
+     */
+    public VKApiCity city;
+
+    /**
+     * Country specified on user's page in "Contacts" section.
+     */
+    public VKApiCountry country;
+
+    /**
+     * Last visit date(in Unix time).
+     */
+    public long last_seen;
+
+    /**
+     * List of user's universities
+     */
+    public VKList<VKApiUniversity> universities;
+
+    /**
+     * List of user's schools
+     */
+    public VKList<VKApiSchool> schools;
+
+    /**
+     * Views on smoking.
+     * @see Attitude
+     */
+    public int smoking;
+
+    /**
+     * Views on alcohol.
+     * @see Attitude
+     */
+    public int alcohol;
+
+    /**
+     * Views on policy.
+     * @see Political
+     */
+    public int political;
+
+    /**
+     * Life main stuffs.
+     * @see LifeMain
+     */
+    public int life_main;
+
+    /**
+     * People main stuffs.
+     * @see PeopleMain
+     */
+    public int people_main;
+
+    /**
+     * Stuffs that inspire the user.
+     */
+    public String inspired_by;
+
+    /**
+     * List of user's languages
+     */
+    public String[] langs;
+
+    /**
+     * Religion of user
+     */
+    public String religion;
+
+    /**
+     * Name of user's account in Facebook
+     */
+    public String facebook;
+
+    /**
+     * ID of user's facebook
+     */
+    public String facebook_name;
+
+    /**
+     * Name of user's account in LiveJournal
+     */
+    public String livejournal;
+
+    /**
+     * Name of user's account in Skype
+     */
+    public String skype;
+
+    /**
+     * URL of user's site
+     */
+    public String site;
+
+    /**
+     * Name of user's account in Twitter
+     */
+    public String twitter;
+
+    /**
+     * Name of user's account in Instagram
+     */
+    public String instagram;
+
+    /**
+     * User's mobile phone number
+     */
+    public String mobile_phone;
+
+    /**
+     * User's home phone number
+     */
+    public String home_phone;
+
+    /**
+     * Page screen name.
+     */
+    public String screen_name;
+
+    /**
+     * Nickname of user.
+     */
+    public String nickname;
+
+    /**
+     * User's activities
+     */
+    public String activities;
+
+    /**
+     * User's interests
+     */
+    public String interests;
+
+    /**
+     * User's favorite movies
+     */
+    public String movies;
+
+    /**
+     * User's favorite TV Shows
+     */
+    public String tv;
+
+    /**
+     * User's favorite books
+     */
+    public String books;
+
+    /**
+     * User's favorite games
+     */
+    public String games;
+
+    /**
+     * User's about information
+     */
+    public String about;
+
+    /**
+     * User's favorite quotes
+     */
+    public String quotes;
+
+    /**
+     * Information whether others can posts on user's wall.
+     */
+    public boolean can_post;
+
+    /**
+     * Information whether others' posts on user's wall can be viewed
+     */
+    public boolean can_see_all_posts;
+
+    /**
+     * Information whether private messages can be sent to this user.
+     */
+    public boolean can_write_private_message;
+
+    /**
+     * Information whether user can comment wall posts.
+     */
+    public boolean wall_comments;
+
+    /**
+     * Information whether the user is banned in VK.
+     */
+    public boolean is_banned;
+
+    /**
+     * Information whether the user is deleted in VK.
+     */
+    public boolean is_deleted;
+
+    /**
+     * Information whether the user's post of wall shows by default.
+     */
+    public boolean wall_default_owner;
+
+    /**
+     * Information whether the user has a verified page in VK
+     */
+    public boolean verified;
+
+    /**
+     * User sex.
+     * @see Sex
+     */
+    public int sex;
+
+    /**
+     * Set of user's counters.
+     */
+    public Counters counters;
+
+    /**
+     * Set of user's counters.
+     */
+    public Occupation occupation;
+
+    /**
+     * Relationship status.
+     * @see Relation
+     */
+    public int relation;
+
+    /**
+     * List of user's relatives
+     */
+    public VKList<Relative> relatives;
+
+    /**
+     * Information whether the current user has add this user to the blacklist.
+     */
+    public boolean blacklisted_by_me;
+
+	public VKApiUserFull(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    public VKApiUserFull parse(JSONObject user) {
+        super.parse(user);
+
+        // general
+        last_seen = parseLong(user.optJSONObject(LAST_SEEN), "time");
+        bdate = user.optString(BDATE);
+
+        JSONObject city = user.optJSONObject(CITY);
+        if(city != null) {
+            this.city = new VKApiCity().parse(city);
+        }
+        JSONObject country = user.optJSONObject(COUNTRY);
+        if(country != null) {
+            this.country = new VKApiCountry().parse(country);
+        }
+
+        // education
+        universities = new VKList<VKApiUniversity>(user.optJSONArray(UNIVERSITIES), VKApiUniversity.class);
+        schools = new VKList<VKApiSchool>(user.optJSONArray(SCHOOLS), VKApiSchool.class);
+
+        // status
+        activity = user.optString(ACTIVITY);
+
+        JSONObject status_audio = user.optJSONObject("status_audio");
+        if(status_audio != null) this.status_audio = new VKApiAudio().parse(status_audio);
+
+        // personal views
+        JSONObject personal = user.optJSONObject(PERSONAL);
+        if (personal != null) {
+            smoking = personal.optInt("smoking");
+            alcohol = personal.optInt("alcohol");
+            political = personal.optInt("political");
+            life_main = personal.optInt("life_main");
+            people_main = personal.optInt("people_main");
+            inspired_by = personal.optString("inspired_by");
+            religion = personal.optString("religion");
+            if (personal.has("langs")) {
+                JSONArray langs = personal.optJSONArray("langs");
+                if (langs != null) {
+                    this.langs = new String[langs.length()];
+                    for (int i = 0; i < langs.length(); i++) {
+                        this.langs[i] = langs.optString(i);
+                    }
+                }
+            }
+        }
+
+        // contacts
+        facebook = user.optString("facebook");
+        facebook_name = user.optString("facebook_name");
+        livejournal = user.optString("livejournal");
+        site = user.optString(SITE);
+        screen_name = user.optString("screen_name", "id" + id);
+        skype = user.optString("skype");
+        mobile_phone = user.optString("mobile_phone");
+        home_phone = user.optString("home_phone");
+        twitter = user.optString("twitter");
+        instagram = user.optString("instagram");
+
+        // personal info
+        about = user.optString(ABOUT);
+        activities = user.optString(ACTIVITIES);
+        books = user.optString(BOOKS);
+        games = user.optString(GAMES);
+        interests = user.optString(INTERESTS);
+        movies = user.optString(MOVIES);
+        quotes = user.optString(QUOTES);
+        tv = user.optString(TV);
+
+        // settings
+        nickname = user.optString("nickname", null);
+        can_post = parseBoolean(user, CAN_POST);
+        can_see_all_posts = parseBoolean(user, CAN_SEE_ALL_POSTS);
+        blacklisted_by_me = parseBoolean(user, BLACKLISTED_BY_ME);
+        can_write_private_message = parseBoolean(user, CAN_WRITE_PRIVATE_MESSAGE);
+        wall_comments = parseBoolean(user, WALL_DEFAULT);
+        String deactivated = user.optString("deactivated");
+        is_deleted = "deleted".equals(deactivated);
+        is_banned = "banned".equals(deactivated);
+        wall_default_owner = "owner".equals(user.optString(WALL_DEFAULT));
+        verified = parseBoolean(user, VERIFIED);
+
+        // other
+        sex = user.optInt(SEX);
+
+        JSONObject counters = user.optJSONObject(COUNTERS);
+        if (counters != null) this.counters = new Counters(counters);
+
+        JSONObject occupation = user.optJSONObject(OCCUPATION);
+        if (occupation != null) this.occupation = new Occupation(occupation);
+
+        relation = user.optInt(RELATION);
+
+        if (user.has(RELATIVES)) {
+            if (relatives == null) {
+                relatives = new VKList<Relative>();
+            }
+            relatives.fill(user.optJSONArray(RELATIVES), Relative.class);
+        }
+        return this;
+    }
+
+    public static class Relative extends VKApiModel implements android.os.Parcelable, Identifiable {
+
+        public int id;
+        public String name;
+
+        @Override
+        public int getId() {
+            return id;
+        }
+
+        @Override
+        public Relative parse(JSONObject response) {
+            id = response.optInt("id");
+            name = response.optString("name");
+            return this;
+        }
+
+
+        @Override
+        public int describeContents() {
+            return 0;
+        }
+
+        @Override
+        public void writeToParcel(Parcel dest, int flags) {
+            dest.writeInt(this.id);
+            dest.writeString(this.name);
+        }
+
+        private Relative(Parcel in) {
+            this.id = in.readInt();
+            this.name = in.readString();
+        }
+
+        public static Creator<Relative> CREATOR = new Creator<Relative>() {
+            public Relative createFromParcel(Parcel source) {
+                return new Relative(source);
+            }
+
+            public Relative[] newArray(int size) {
+                return new Relative[size];
+            }
+        };
+    }
+
+    public static class Counters implements android.os.Parcelable {
+        /**
+         * Count was not in server response.
+         */
+        public final static int NO_COUNTER = -1;
+
+        public int albums = NO_COUNTER;
+        public int videos = NO_COUNTER;
+        public int audios = NO_COUNTER;
+        public int notes = NO_COUNTER;
+        public int friends = NO_COUNTER;
+        public int photos = NO_COUNTER;
+        public int groups = NO_COUNTER;
+        public int online_friends = NO_COUNTER;
+        public int mutual_friends = NO_COUNTER;
+        public int user_videos = NO_COUNTER;
+        public int followers = NO_COUNTER;
+        public int subscriptions = NO_COUNTER;
+        public int pages = NO_COUNTER;
+
+        Counters(JSONObject counters) {
+            albums = counters.optInt("albums", albums);
+            audios = counters.optInt("audios", audios);
+            followers = counters.optInt("followers", followers);
+            photos = counters.optInt("photos", photos);
+            friends = counters.optInt("friends", friends);
+            groups = counters.optInt("groups", groups);
+            mutual_friends = counters.optInt("mutual_friends", mutual_friends);
+            notes = counters.optInt("notes", notes);
+            online_friends = counters.optInt("online_friends", online_friends);
+            user_videos = counters.optInt("user_videos", user_videos);
+            videos = counters.optInt("videos", videos);
+            subscriptions = counters.optInt("subscriptions", subscriptions);
+            pages = counters.optInt("pages", pages);
+        }
+
+
+        @Override
+        public int describeContents() {
+            return 0;
+        }
+
+        @Override
+        public void writeToParcel(Parcel dest, int flags) {
+            dest.writeInt(this.albums);
+            dest.writeInt(this.videos);
+            dest.writeInt(this.audios);
+            dest.writeInt(this.notes);
+            dest.writeInt(this.friends);
+            dest.writeInt(this.photos);
+            dest.writeInt(this.groups);
+            dest.writeInt(this.online_friends);
+            dest.writeInt(this.mutual_friends);
+            dest.writeInt(this.user_videos);
+            dest.writeInt(this.followers);
+            dest.writeInt(this.subscriptions);
+            dest.writeInt(this.pages);
+        }
+
+        private Counters(Parcel in) {
+            this.albums = in.readInt();
+            this.videos = in.readInt();
+            this.audios = in.readInt();
+            this.notes = in.readInt();
+            this.friends = in.readInt();
+            this.photos = in.readInt();
+            this.groups = in.readInt();
+            this.online_friends = in.readInt();
+            this.mutual_friends = in.readInt();
+            this.user_videos = in.readInt();
+            this.followers = in.readInt();
+            this.subscriptions = in.readInt();
+            this.pages = in.readInt();
+        }
+
+        public static Creator<Counters> CREATOR = new Creator<Counters>() {
+            public Counters createFromParcel(Parcel source) {
+                return new Counters(source);
+            }
+
+            public Counters[] newArray(int size) {
+                return new Counters[size];
+            }
+        };
+    }
+
+    public static class Occupation implements android.os.Parcelable {
+        /**
+         * Count was not in server response.
+         */
+        public final static int NO_COUNTER = -1;
+
+        public String type;
+        public int id = NO_COUNTER;
+        public String name;
+
+        Occupation(JSONObject occupation) {
+            type = occupation.optString("type");
+            id = occupation.optInt("id",id);
+            name = occupation.optString("name");
+        }
+
+        @Override
+        public int describeContents() {
+            return 0;
+        }
+
+        @Override
+        public void writeToParcel(Parcel dest, int flags) {
+            dest.writeString(this.type);
+            dest.writeInt(this.id);
+            dest.writeString(this.name);
+        }
+
+        private Occupation (Parcel in) {
+            this.type = in.readString();
+            this.id = in.readInt();
+            this.name = in.readString();
+        }
+
+        public static Creator<Occupation> CREATOR = new Creator<Occupation>() {
+            public Occupation createFromParcel(Parcel source) {
+                return new Occupation(source);
+            }
+
+            public Occupation[] newArray(int size) {
+                return new Occupation[size];
+            }
+        };
+    }
+
+    public static class Sex {
+        private Sex() {
+        }
+
+        public static final int FEMALE = 1;
+        public static final int MALE = 2;
+    }
+
+    public static class Relation {
+        private Relation() {
+        }
+
+        public static final int SINGLE = 1;
+        public static final int RELATIONSHIP = 2;
+        public static final int ENGAGED = 3;
+        public static final int MARRIED = 4;
+        public static final int COMPLICATED = 5;
+        public static final int SEARCHING = 6;
+        public static final int IN_LOVE = 7;
+    }
+
+    public static class Attitude {
+        private Attitude() {
+        }
+
+        public static final int VERY_NEGATIVE = 1;
+        public static final int NEGATIVE = 2;
+        public static final int COMPROMISABLE = 3;
+        public static final int NEUTRAL = 4;
+        public static final int POSITIVE = 5;
+    }
+
+    public static class Political {
+        private Political() {
+        }
+
+        public static final int COMMUNNIST = 1;
+        public static final int SOCIALIST = 2;
+        public static final int CENTRIST = 3;
+        public static final int LIBERAL = 4;
+        public static final int CONSERVATIVE = 5;
+        public static final int MONARCHIST = 6;
+        public static final int ULTRACONSERVATIVE = 7;
+        public static final int LIBERTARIAN = 8;
+        public static final int APATHETIC = 9;
+    }
+
+    public static class LifeMain {
+        private LifeMain() {
+        }
+
+        public static final int FAMILY_AND_CHILDREN = 1;
+        public static final int CAREER_AND_MONEY = 2;
+        public static final int ENTERTAINMENT_AND_LEISURE = 3;
+        public static final int SCIENCE_AND_RESEARCH = 4;
+        public static final int IMPROOVING_THE_WORLD = 5;
+        public static final int PERSONAL_DEVELOPMENT = 6;
+        public static final int BEAUTY_AND_ART = 7;
+        public static final int FAME_AND_INFLUENCE = 8;
+    }
+
+    public static class PeopleMain {
+        private PeopleMain() {
+        }
+
+        public static final int INTELLECT_AND_CREATIVITY = 1;
+        public static final int KINDNESS_AND_HONESTLY = 2;
+        public static final int HEALTH_AND_BEAUTY = 3;
+        public static final int WEALTH_AND_POWER = 4;
+        public static final int COURAGE_AND_PERSISTENCE = 5;
+        public static final int HUMOR_AND_LOVE_FOR_LIFE = 6;
+    }
+
+    public static class RelativeType {
+        private RelativeType() {
+        }
+
+        public static final String PARTNER = "partner";
+        public static final String GRANDCHILD = "grandchild";
+        public static final String GRANDPARENT = "grandparent";
+        public static final String CHILD = "child";
+        public static final String SUBLING = "sibling";
+        public static final String PARENT = "parent";
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        super.writeToParcel(dest, flags);
+        dest.writeString(this.activity);
+        dest.writeParcelable(this.status_audio, flags);
+        dest.writeString(this.bdate);
+        dest.writeParcelable(this.city, flags);
+        dest.writeParcelable(this.country, flags);
+        dest.writeLong(this.last_seen);
+        dest.writeParcelable(this.universities, flags);
+        dest.writeParcelable(this.schools, flags);
+        dest.writeInt(this.smoking);
+        dest.writeInt(this.alcohol);
+        dest.writeInt(this.political);
+        dest.writeInt(this.life_main);
+        dest.writeInt(this.people_main);
+        dest.writeString(this.inspired_by);
+        dest.writeStringArray(this.langs);
+        dest.writeString(this.religion);
+        dest.writeString(this.facebook);
+        dest.writeString(this.facebook_name);
+        dest.writeString(this.livejournal);
+        dest.writeString(this.skype);
+        dest.writeString(this.site);
+        dest.writeString(this.twitter);
+        dest.writeString(this.instagram);
+        dest.writeString(this.mobile_phone);
+        dest.writeString(this.home_phone);
+        dest.writeString(this.screen_name);
+        dest.writeString(this.activities);
+        dest.writeString(this.interests);
+        dest.writeString(this.movies);
+        dest.writeString(this.tv);
+        dest.writeString(this.books);
+        dest.writeString(this.games);
+        dest.writeString(this.about);
+        dest.writeString(this.quotes);
+        dest.writeByte(can_post ? (byte) 1 : (byte) 0);
+        dest.writeByte(can_see_all_posts ? (byte) 1 : (byte) 0);
+        dest.writeByte(can_write_private_message ? (byte) 1 : (byte) 0);
+        dest.writeByte(wall_comments ? (byte) 1 : (byte) 0);
+        dest.writeByte(is_banned ? (byte) 1 : (byte) 0);
+        dest.writeByte(is_deleted ? (byte) 1 : (byte) 0);
+        dest.writeByte(wall_default_owner ? (byte) 1 : (byte) 0);
+        dest.writeByte(verified ? (byte) 1 : (byte) 0);
+        dest.writeInt(this.sex);
+        dest.writeParcelable(this.counters, flags);
+        dest.writeParcelable(this.occupation, flags);
+        dest.writeInt(this.relation);
+        dest.writeParcelable(this.relatives, flags);
+        dest.writeByte(blacklisted_by_me ? (byte) 1 : (byte) 0);
+    }
+    public VKApiUserFull() {}
+    public VKApiUserFull(Parcel in) {
+        super(in);
+        this.activity = in.readString();
+        this.status_audio = in.readParcelable(VKApiAudio.class.getClassLoader());
+        this.bdate = in.readString();
+        this.city = in.readParcelable(VKApiCity.class.getClassLoader());
+        this.country = in.readParcelable(VKApiCountry.class.getClassLoader());
+        this.last_seen = in.readLong();
+        this.universities = in.readParcelable(VKList.class.getClassLoader());
+        this.schools = in.readParcelable(VKList.class.getClassLoader());
+        this.smoking = in.readInt();
+        this.alcohol = in.readInt();
+        this.political = in.readInt();
+        this.life_main = in.readInt();
+        this.people_main = in.readInt();
+        this.inspired_by = in.readString();
+        this.langs = in.createStringArray();
+        this.religion = in.readString();
+        this.facebook = in.readString();
+        this.facebook_name = in.readString();
+        this.livejournal = in.readString();
+        this.skype = in.readString();
+        this.site = in.readString();
+        this.twitter = in.readString();
+        this.instagram = in.readString();
+        this.mobile_phone = in.readString();
+        this.home_phone = in.readString();
+        this.screen_name = in.readString();
+        this.activities = in.readString();
+        this.interests = in.readString();
+        this.movies = in.readString();
+        this.tv = in.readString();
+        this.books = in.readString();
+        this.games = in.readString();
+        this.about = in.readString();
+        this.quotes = in.readString();
+        this.can_post = in.readByte() != 0;
+        this.can_see_all_posts = in.readByte() != 0;
+        this.can_write_private_message = in.readByte() != 0;
+        this.wall_comments = in.readByte() != 0;
+        this.is_banned = in.readByte() != 0;
+        this.is_deleted = in.readByte() != 0;
+        this.wall_default_owner = in.readByte() != 0;
+        this.verified = in.readByte() != 0;
+        this.sex = in.readInt();
+        this.counters = in.readParcelable(Counters.class.getClassLoader());
+        this.occupation = in.readParcelable(Occupation.class.getClassLoader());
+        this.relation = in.readInt();
+        this.relatives = in.readParcelable(VKList.class.getClassLoader());
+        this.blacklisted_by_me = in.readByte() != 0;
+    }
+
+    public static Creator<VKApiUserFull> CREATOR = new Creator<VKApiUserFull>() {
+        public VKApiUserFull createFromParcel(Parcel source) {
+            return new VKApiUserFull(source);
+        }
+
+        public VKApiUserFull[] newArray(int size) {
+            return new VKApiUserFull[size];
+        }
+    };
+}
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Activitys/ImageLoadedCallback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Activitys/ImageLoadedCallback.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Activitys/ImageLoadedCallback.java	(revision )
@@ -0,0 +1,26 @@
+package com.vkdocs.oceanminded.vkdocs.Activitys;
+
+import android.widget.ProgressBar;
+
+import com.squareup.picasso.Callback;
+
+/**
+ * Created by josh on 28.01.16.
+ */
+public class ImageLoadedCallback implements Callback {
+    ProgressBar progressBar;
+
+    public  ImageLoadedCallback(ProgressBar progBar){
+        progressBar = progBar;
+    }
+
+    @Override
+    public void onSuccess() {
+
+    }
+
+    @Override
+    public void onError() {
+
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/payments/VKPaymentsReceiver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/payments/VKPaymentsReceiver.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/payments/VKPaymentsReceiver.java	(revision )
@@ -0,0 +1,94 @@
+//
+//  Copyright (c) 2015 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.payments;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.support.annotation.Nullable;
+
+import com.vk.sdk.VKAccessToken;
+import com.vk.sdk.VKAccessTokenTracker;
+import com.vk.sdk.VKSdk;
+import com.vk.sdk.VKUIHelper;
+
+
+public class VKPaymentsReceiver extends BroadcastReceiver {
+
+    private static VKAccessTokenTracker tracker = new VKAccessTokenTracker() {
+        @Override
+        public void onVKAccessTokenChanged(@Nullable VKAccessToken oldToken, @Nullable VKAccessToken newToken) {
+            checkUserInstall(VKUIHelper.getApplicationContext(), false);
+        }
+    };
+
+    @Override
+    public void onReceive(final Context ctx, Intent intent) {
+        onReceiveStatic(ctx, isNeedForceOurUser(intent));
+    }
+
+    public static void onReceiveStatic(final Context ctx) {
+        onReceiveStatic(ctx, false);
+    }
+
+    private static void onReceiveStatic(final Context ctx, boolean forceOurUser) {
+        if (isActiveNetwork(ctx) && VKSdk.isIsPaymentsEnable()) {
+            if (VKAccessToken.currentToken() == null && !tracker.isTracking()) {
+                tracker.startTracking();
+            }
+            checkUserInstall(ctx, forceOurUser);
+        }
+    }
+
+    private static boolean isNeedForceOurUser(@Nullable final Intent intent) {
+        String referrerStr = intent == null ? null : intent.getStringExtra("referrer");
+        return intent != null && "com.android.vending.INSTALL_REFERRER".equals(intent.getAction()) &&
+                referrerStr != null && referrerStr.startsWith("utm_source=vk");
+    }
+
+    private static void checkUserInstall(@Nullable final Context ctx, boolean force) {
+        if (ctx != null) {
+            VKPaymentsServerSender.getInstance(ctx).checkUserInstall(force);
+        }
+    }
+
+    // ---------- UTILS METHOD ----------
+
+    private static boolean isActiveNetwork(Context ctx) {
+        if (checkAccessNetworkStatePermission(ctx)) {
+            ConnectivityManager cm = (ConnectivityManager) ctx.getSystemService(Context.CONNECTIVITY_SERVICE);
+            NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
+            return activeNetwork != null && activeNetwork.isConnectedOrConnecting();
+        } else {
+            return true;
+        }
+    }
+
+    private static boolean checkAccessNetworkStatePermission(Context ctx) {
+        String permission = "android.permission.ACCESS_NETWORK_STATE";
+        int res = ctx.checkCallingOrSelfPermission(permission);
+        return (res == PackageManager.PERMISSION_GRANTED);
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKWallPostResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKWallPostResult.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKWallPostResult.java	(revision )
@@ -0,0 +1,41 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+
+/**
+ * Specified wall post result
+ */
+public class VKWallPostResult extends VKApiModel {
+    public int post_id;
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.post_id);
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/VKAccessToken.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/VKAccessToken.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/VKAccessToken.java	(revision )
@@ -0,0 +1,331 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Build;
+import android.preference.PreferenceManager;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.util.VKStringJoiner;
+import com.vk.sdk.util.VKUtil;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Presents VK API access token that used for loading API methods and other stuff.
+ */
+public class VKAccessToken {
+    public static final String ACCESS_TOKEN = "access_token";
+    public static final String EXPIRES_IN = "expires_in";
+    public static final String USER_ID = "user_id";
+    public static final String SECRET = "secret";
+    public static final String HTTPS_REQUIRED = "https_required";
+    public static final String CREATED = "created";
+    public static final String SUCCESS = "success";
+	public static final String EMAIL = "email";
+    public static final String SCOPE = "scope";
+
+    /**
+     * String token for use in request parameters
+     */
+    public String accessToken = null;
+    /**
+     * Time when token expires
+     */
+    public int expiresIn = 0;
+    /**
+     * Current user id for this token
+     */
+    public String userId = null;
+    /**
+     * User secret to sign requests (if nohttps used)
+     */
+    public String secret = null;
+    /**
+     * If user sets "Always use HTTPS" setting in his profile, it will be true
+     */
+    public boolean httpsRequired = false;
+
+    /**
+     * Indicates time of token creation
+     */
+    public long created = 0;
+
+	/**
+	 * User email
+	 */
+	public String email = null;
+
+    /**
+     * Token scope
+     */
+    private Map<String, Boolean> scope = null;
+
+    /**
+     * Save token into specified file
+     *
+     * @param filePath path to file with saved token
+     */
+    public void saveTokenToFile(String filePath) {
+        VKUtil.stringToFile(filePath, serialize());
+    }
+
+    /**
+     * Save token into shared preferences with key
+     *
+     * @param ctx      Context for preferences
+     * @param tokenKey Key for saving settings
+     */
+    public void saveTokenToSharedPreferences(Context ctx, String tokenKey) {
+        if (ctx == null) {
+            return;
+        }
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctx);
+        SharedPreferences.Editor edit = prefs.edit();
+        edit.putString(tokenKey, serialize());
+        edit.apply();
+    }
+
+    /**
+     * Removes token from preferences with specified key
+     * @param ctx      Context for preferences
+     * @param tokenKey Key for saving settings
+     */
+    public static void removeTokenAtKey(Context ctx, String tokenKey) {
+        if (ctx == null) {
+            return;
+        }
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctx);
+        SharedPreferences.Editor edit = prefs.edit();
+        edit.remove(tokenKey);
+        edit.apply();
+    }
+
+    private VKAccessToken() {
+    }
+
+    /**
+     * Serialize token to VKParameters
+     * @return serialized VKParameters value
+     */
+    protected Map<String, String> tokenParams() {
+        Map<String, String> params = new HashMap<>();
+        params.put(ACCESS_TOKEN, accessToken);
+        params.put(EXPIRES_IN, "" + expiresIn);
+        params.put(USER_ID, userId);
+        params.put(CREATED, "" + created);
+        if (scope != null) {
+            params.put(SCOPE, TextUtils.join(",", scope.keySet()));
+        }
+
+        if (secret != null) {
+            params.put(SECRET, secret);
+        }
+        if (httpsRequired) {
+            params.put(HTTPS_REQUIRED, "1");
+        }
+        if (email != null) {
+            params.put(EMAIL, email);
+        }
+        return params;
+    }
+
+    /**
+     * Serialize token into string
+     *
+     * @return Serialized token string as query-string
+     */
+    protected String serialize() {
+        return VKStringJoiner.joinParams(tokenParams());
+    }
+
+    /**
+     * Retrieve token from key-value query string
+     *
+     * @param urlString string that contains URL-query part with token. E.g. access_token=eee&expires_in=0...
+     * @return parsed token
+     */
+    public static VKAccessToken tokenFromUrlString(String urlString) {
+        if (urlString == null)
+            return null;
+        Map<String, String> parameters = VKUtil.explodeQueryString(urlString);
+
+        return tokenFromParameters(parameters);
+    }
+
+    /**
+     * Retrieve token from key-value map
+     *
+     * @param parameters map that contains token info
+     * @return Parsed token
+     */
+    public static VKAccessToken tokenFromParameters(@Nullable Map<String, String> parameters) {
+        if (parameters == null || parameters.size() == 0) {
+            return null;
+        }
+        VKAccessToken token = new VKAccessToken();
+        try {
+            token.accessToken = parameters.get(ACCESS_TOKEN);
+            token.userId = parameters.get(USER_ID);
+            token.secret = parameters.get(SECRET);
+            token.email = parameters.get(EMAIL);
+            token.httpsRequired = false;
+            if (parameters.get(EXPIRES_IN) != null) { token.expiresIn = Integer.parseInt(parameters.get(EXPIRES_IN)); }
+
+            String scope = parameters.get(SCOPE);
+            if (scope != null) {
+                HashMap<String, Boolean> scopeMap = new HashMap<>();
+                for (String s : scope.split(",")) {
+                    scopeMap.put(s, true);
+                }
+                token.scope = scopeMap;
+            }
+
+            if (parameters.containsKey(HTTPS_REQUIRED)) {
+                token.httpsRequired = parameters.get(HTTPS_REQUIRED).equals("1");
+            } else if (token.secret == null) {
+                token.httpsRequired = true;
+            }
+
+            if (parameters.containsKey(CREATED)) {
+                token.created = Long.parseLong(parameters.get(CREATED));
+            } else {
+                token.created = System.currentTimeMillis();
+            }
+
+            return token.accessToken != null ? token : null;
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    /**
+     * Retrieves token from shared preferences
+     *
+     * @param ctx Context for preferences
+     * @param key Key for retrieve token
+     * @return Previously saved token or null
+     */
+    public static VKAccessToken tokenFromSharedPreferences(Context ctx, String key) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctx);
+        return tokenFromUrlString(prefs.getString(key, null));
+    }
+
+    /**
+     * Retrieve token from file. Token must be saved into file with saveTokenToFile method
+     *
+     * @param filePath path to file with saved token
+     * @return Previously saved token or null
+     */
+    public static VKAccessToken tokenFromFile(String filePath) {
+        try {
+            String data = VKUtil.fileToString(filePath);
+            return tokenFromUrlString(data);
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    /**
+     * Checks expiration time of token and returns result.
+     *
+     * @return true if token has expired, false otherwise.
+     */
+    public boolean isExpired() {
+        return expiresIn > 0 && expiresIn * 1000 + created < System.currentTimeMillis();
+    }
+
+    private static final String VK_SDK_ACCESS_TOKEN_PREF_KEY = "VK_SDK_ACCESS_TOKEN_PLEASE_DONT_TOUCH";
+
+    private volatile static VKAccessToken sCurrentToken;
+
+    /**
+     * @return Returns shared instance of current access token
+     */
+    public static VKAccessToken currentToken() {
+        if (sCurrentToken == null) {
+            synchronized (VKAccessToken.class) {
+                if (sCurrentToken == null) {
+                    sCurrentToken = VKAccessToken.tokenFromSharedPreferences(VKUIHelper.getApplicationContext(), VK_SDK_ACCESS_TOKEN_PREF_KEY);
+                }
+            }
+        }
+        return sCurrentToken;
+    }
+
+    /**
+     * Replaces token with new token, and saves it to shared preferences of application
+     * @param newToken New access token to set. If null, removes old token from preferences
+     * @return old value of access token
+     */
+    static VKAccessToken replaceToken(@NonNull Context ctx, @Nullable VKAccessToken newToken) {
+        VKAccessToken oldToken = sCurrentToken;
+        sCurrentToken = newToken;
+        if (sCurrentToken != null) {
+            sCurrentToken.save();
+        } else {
+            removeTokenAtKey(ctx, VK_SDK_ACCESS_TOKEN_PREF_KEY);
+        }
+        return oldToken;
+    }
+
+    /**
+     * Saves this token into application shared preferences
+     */
+    public void save() {
+        saveTokenToSharedPreferences(VKUIHelper.getApplicationContext(), VK_SDK_ACCESS_TOKEN_PREF_KEY);
+    }
+
+    /**
+     * Return if this token contains passed permissions array
+     * @param scopes permissions to check
+     * @return true, if token has all of this permissions
+     */
+    public boolean hasScope(String... scopes) {
+        boolean allScope = true;
+        for (String scopeStr : scopes) {
+            if (this.scope.get(scopeStr) == null) {
+                allScope = false;
+                break;
+            }
+        }
+        return allScope;
+    }
+
+    /**
+     * Creates copy of current token, with params from passed token
+     * @param token Usually this is partly filled access token, made after validation
+     * @return New access token with updated fields
+     */
+    public VKAccessToken copyWithToken(@NonNull VKAccessToken token) {
+        Map<String, String> newTokenParams = tokenParams();
+        newTokenParams.putAll(token.tokenParams());
+        return VKAccessToken.tokenFromParameters(newTokenParams);
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/docs/VKUploadWallDocRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/docs/VKUploadWallDocRequest.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/docs/VKUploadWallDocRequest.java	(revision )
@@ -0,0 +1,56 @@
+package com.vk.sdk.api.docs;
+
+import com.vk.sdk.api.VKApi;
+import com.vk.sdk.api.VKApiConst;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.util.VKJsonHelper;
+import com.vk.sdk.util.VKUtil;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.File;
+
+public class VKUploadWallDocRequest extends VKUploadDocBase {
+    /**
+     * Creates a VKUploadWallDocRequest instance.
+     * @param doc file for upload to server
+     */
+    public VKUploadWallDocRequest(File doc) {
+        super();
+        this.mDoc = doc;
+        this.mGroupId = 0;
+    }
+
+    /**
+     * Creates a VKUploadWallDocRequest instance.
+     * @param doc file for upload to server
+     * @param groupId community ID (if the document will be uploaded to the community).
+     */
+    public VKUploadWallDocRequest(File doc, long groupId) {
+        super();
+        this.mDoc = doc;
+        this.mGroupId = groupId;
+    }
+
+    @Override
+    protected VKRequest getServerRequest() {
+        if (mGroupId != 0)
+            return VKApi.docs().getUploadWallServer(mGroupId);
+        return VKApi.docs().getUploadWallServer();
+    }
+
+    @Override
+    protected VKRequest getSaveRequest(JSONObject response) {
+        VKRequest saveRequest;
+        try {
+            saveRequest = VKApi.docs().save(new VKParameters(VKJsonHelper.toMap(response)));
+        } catch (JSONException e) {
+            return null;
+        }
+        if (mGroupId != 0)
+            saveRequest.addExtraParameters(VKUtil.paramsFrom(VKApiConst.GROUP_ID, mGroupId));
+        return saveRequest;
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKHttpOperation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKHttpOperation.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKHttpOperation.java	(revision )
@@ -0,0 +1,192 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.httpClient;
+
+import android.support.annotation.Nullable;
+
+import com.vk.sdk.api.VKError;
+
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.util.concurrent.ExecutorService;
+
+/**
+ * Class for loading any data by HTTP request
+ */
+public class VKHttpOperation<ResponseType> extends VKAbstractOperation {
+    /**
+     * Request initialized this object
+     */
+    private final VKHttpClient.VKHTTPRequest mUriRequest;
+    /**
+     * Last exception throws while loading or parsing
+     */
+    protected Exception mLastException;
+
+    /**
+     * Response data from server
+     */
+    @Nullable
+    public VKHttpClient.VKHttpResponse response;
+
+    /**
+     * String representation of response
+     */
+    private String mResponseString;
+
+    /**
+     * Create new operation for loading prepared Http request. Requests may be prepared in VKHttpClient
+     *
+     * @param uriRequest Prepared request
+     */
+    public VKHttpOperation(VKHttpClient.VKHTTPRequest uriRequest) {
+        mUriRequest = uriRequest;
+    }
+
+
+    /**
+     * Start current prepared http-operation for result
+     */
+    @Override
+    public void start(ExecutorService s) {
+        super.start(s);
+        setState(VKOperationState.Executing);
+        try {
+            if (this.mUriRequest.isAborted) {
+                return;
+            }
+            response = VKHttpClient.execute(mUriRequest);
+
+        } catch (IOException e) {
+            mLastException = e;
+        }
+        setState(VKOperationState.Finished);
+    }
+
+    @Override
+    public void finish() {
+        postExecution();
+        super.finish();
+    }
+
+    @Override
+    public ResponseType getResultObject() {
+        return response != null ? (ResponseType) response.responseBytes : null;
+    }
+
+    /**
+     * Calls before providing result, but after response loads
+     *
+     * @return true is post execution succeed
+     */
+    protected boolean postExecution() {
+        return true;
+    }
+
+    /**
+     * Cancel current operation execution
+     */
+    @Override
+    public void cancel() {
+        VKHttpClient.cancelHttpOperation(this);
+        super.cancel();
+    }
+
+    /**
+     * Returns request associated with current operation
+     *
+     * @return URI request
+     */
+    public VKHttpClient.VKHTTPRequest getUriRequest() {
+        return mUriRequest;
+    }
+
+    /**
+     * Get operation response data
+     *
+     * @return Bytes of response
+     */
+    public byte[] getResponseData() {
+        return response != null ? response.responseBytes : null;
+    }
+
+    /**
+     * Get operation response string, if possible
+     *
+     * @return Encoded string from response data bytes
+     */
+    public String getResponseString() {
+        if (response == null || response.responseBytes == null) {
+            return null;
+        }
+        if (mResponseString == null) {
+            try {
+                mResponseString = new String(response.responseBytes, "UTF-8");
+            } catch (UnsupportedEncodingException e) {
+                mLastException = e;
+            }
+        }
+        return mResponseString;
+    }
+
+    /**
+     * Generates VKError about that request fails
+     *
+     * @param e Exception for error
+     * @return New generated error
+     */
+    protected VKError generateError(Exception e) {
+        VKError error;
+        if (state() == VKOperationState.Canceled) {
+            error = new VKError(VKError.VK_CANCELED);
+        } else {
+            error = new VKError(VKError.VK_REQUEST_HTTP_FAILED);
+        }
+        if (e != null) {
+            error.errorMessage = e.getMessage();
+            if (error.errorMessage == null)
+                error.errorMessage = e.toString();
+            error.httpError = e;
+        }
+        return error;
+    }
+
+
+    /**
+     * Set listener for current operation
+     *
+     * @param listener Listener subclasses VKHTTPOperationCompleteListener
+     */
+    public <OperationType extends VKHttpOperation> void setHttpOperationListener(final VKAbstractCompleteListener<OperationType, ResponseType> listener) {
+        this.setCompleteListener(new VKOperationCompleteListener() {
+            @SuppressWarnings("unchecked")
+            @Override
+            public void onComplete() {
+                if (VKHttpOperation.this.state() != VKOperationState.Finished || mLastException != null) {
+                    listener.onError((OperationType) VKHttpOperation.this, generateError(mLastException));
+                } else {
+                    listener.onComplete((OperationType) VKHttpOperation.this, getResultObject());
+                }
+            }
+        });
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/AnimationFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/AnimationFragment.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/AnimationFragment.java	(revision )
@@ -0,0 +1,112 @@
+package com.vkdocs.oceanminded.vkdocs.Fragments;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.VKResponse;
+import com.vk.sdk.api.model.VKApiDocument;
+import com.vk.sdk.api.model.VKDocsArray;
+import com.vkdocs.oceanminded.vkdocs.Adapters.RVAdapter;
+import com.vkdocs.oceanminded.vkdocs.R;
+import com.vkdocs.oceanminded.vkdocs.Services.VKDataService;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by josh on 23.01.16.
+ */
+public class AnimationFragment extends Fragment {
+
+    private TextView notdosc;
+    private List<VKApiDocument> documentslist;
+    private RecyclerView documenstListRV;
+    private RVAdapter adapter;
+    public static int DOCS_PARAMETR = 3;
+    public static final String VKDOCS_LOADING = "Test";
+    public static final String ALARM_MESSAGE = "Срочно пришлите кота!";
+
+
+
+
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+
+        super.onCreate(savedInstanceState);
+
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.fragmenta,
+                container, false);
+        //doscList =(ListView) view.findViewById(R.id.docs_list);
+        notdosc =(TextView) view.findViewById(R.id.notdocs_text);
+        documenstListRV = (RecyclerView) view.findViewById(R.id.documents_recycleview);
+        LinearLayoutManager llm = new LinearLayoutManager(getContext());
+        documenstListRV.setLayoutManager(llm);
+        documenstListRV.setHasFixedSize(true);
+        documentslist = new ArrayList<>();
+        getDocumentFromServer();
+
+        return view;
+    }
+
+    public void updateData(){
+        Intent vkServiceIntent = new Intent(getActivity(),VKDataService.class);
+
+
+    }
+    public void getDocumentFromServer() {
+        List<VKApiDocument> docsList = new ArrayList<VKApiDocument>();
+        VKRequest getdocs = new VKRequest("docs.get", VKParameters.from("type", DOCS_PARAMETR), VKRequest.HttpMethod.GET, VKDocsArray.class);
+        getdocs.executeWithListener(new VKRequest.VKRequestListener() {
+            @Override
+            public void onProgress(VKRequest.VKProgressType progressType, long bytesLoaded, long bytesTotal) {
+                super.onProgress(progressType, bytesLoaded, bytesTotal);
+            }
+
+            @Override
+            public void onComplete(VKResponse response) {
+                super.onComplete(response);
+                VKDocsArray docsArray = (VKDocsArray) response.parsedModel;
+                for (VKApiDocument doc : docsArray) {
+                    documentslist.add(doc);
+                    //Log.i("json", response.json.toString());
+                }
+                adapter = new RVAdapter(documentslist);
+                documenstListRV.setAdapter(adapter);
+            }
+
+            @Override
+            public void attemptFailed(VKRequest request, int attemptNumber, int totalAttempts) {
+                super.attemptFailed(request, attemptNumber, totalAttempts);
+            }
+
+            @Override
+            public void onError(VKError error) {
+                super.onError(error);
+            }
+        });
+//        Log.i("list.size", "" + documentslist.size());
+    }
+
+
+    @Override
+    public void onAttach(Context context) {
+        super.onAttach(context);
+    }
+}
Index: gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gradlew.bat	(revision )
+++ gradlew.bat	(revision )
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: app/src/main/res/drawable-v21/ic_cloud_done_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_cloud_done_black_24dp.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_cloud_done_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M19.35,10.04C18.67,6.59 15.64,4 12,4 9.11,4 6.6,5.64 5.35,8.04 2.34,8.36 0,10.91 0,14c0,3.31 2.69,6 6,6h13c2.76,0 5,-2.24 5,-5 0,-2.64 -2.05,-4.78 -4.65,-4.96zM10,17l-3.5,-3.5 1.41,-1.41L10,14.17 15.18,9l1.41,1.41L10,17z"/>
+</vector>
Index: app/src/main/res/layout/activity_maps.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_maps.xml	(revision )
+++ app/src/main/res/layout/activity_maps.xml	(revision )
@@ -0,0 +1,8 @@
+<fragment xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:map="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/map"
+    android:name="com.google.android.gms.maps.SupportMapFragment"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".Activitys.MapsActivity" />
Index: gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gradlew	(revision )
+++ gradlew	(revision )
@@ -0,0 +1,160 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
Index: app/src/androidTest/java/com/vkdocs/oceanminded/vkdocs/ApplicationTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/androidTest/java/com/vkdocs/oceanminded/vkdocs/ApplicationTest.java	(revision )
+++ app/src/androidTest/java/com/vkdocs/oceanminded/vkdocs/ApplicationTest.java	(revision )
@@ -0,0 +1,13 @@
+package com.vkdocs.oceanminded.vkdocs;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+/**
+ * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
+ */
+public class ApplicationTest extends ApplicationTestCase<Application> {
+    public ApplicationTest() {
+        super(Application.class);
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiMessages.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiMessages.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/methods/VKApiMessages.java	(revision )
@@ -0,0 +1,89 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.methods;
+
+import com.vk.sdk.api.VKApiConst;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKParser;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.model.VKApiGetDialogResponse;
+import com.vk.sdk.api.model.VKApiGetMessagesResponse;
+
+import org.json.JSONObject;
+
+/**
+ * Builds requests for API.messages part
+ */
+public class VKApiMessages extends VKApiBase {
+    /**
+     * Returns messages current user
+     *
+     * @return Request for load
+     */
+    public VKRequest get() {
+        return get(VKParameters.from(VKApiConst.COUNT, "10"));
+    }
+
+    /**
+     * https://vk.com/dev/messages.get
+     *
+     * @param params use parameters from description with VKApiConst class
+     * @return Request for load
+     */
+    public VKRequest get(VKParameters params) {
+        return prepareRequest("get", params, new VKParser() {
+            @Override
+            public Object createModel(JSONObject object) {
+                return new VKApiGetMessagesResponse(object);
+            }
+        });
+    }
+
+    /**
+     * Returns dialogs current user
+     *
+     * @return Request for load
+     */
+    public VKRequest getDialogs() {
+        return getDialogs(VKParameters.from(VKApiConst.COUNT, "5"));
+    }
+
+    /**
+     * https://vk.com/dev/messages.getDialogs
+     *
+     * @param params use parameters from description with VKApiConst class
+     * @return Request for load
+     */
+    public VKRequest getDialogs(VKParameters params) {
+        return prepareRequest("getDialogs", params, new VKParser() {
+            @Override
+            public Object createModel(JSONObject object) {
+                return new VKApiGetDialogResponse(object);
+            }
+        });
+    }
+
+    @Override
+    protected String getMethodsGroup() {
+        return "messages";
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiComment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiComment.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiComment.java	(revision )
@@ -0,0 +1,181 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * Comment.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 19.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+
+import org.json.JSONObject;
+
+/**
+ * Comment object describes a comment.
+ */
+@SuppressWarnings("unused")
+public class VKApiComment extends VKApiModel implements Identifiable, android.os.Parcelable
+{
+
+	/**
+	 * Comment ID, positive number
+	 */
+	public int id;
+
+	/**
+	 * Comment author ID.
+	 */
+	public int from_id;
+
+	/**
+	 * Date when the comment was added as unixtime.
+	 */
+	public long date;
+
+	/**
+	 * Text of the comment
+	 */
+	public String text;
+
+	/**
+	 * ID of the user or community to whom the reply is addressed (if the comment is a reply to another comment).
+	 */
+	public int reply_to_user;
+
+	/**
+	 * ID of the comment the reply to which is represented by the current comment (if the comment is a reply to another comment).
+	 */
+	public int reply_to_comment;
+
+	/**
+	 * Number of likes on the comment.
+	 */
+	public int likes;
+
+	/**
+	 * Information whether the current user liked the comment.
+	 */
+	public boolean user_likes;
+
+	/**
+	 * Whether the current user can like on the comment.
+	 */
+	public boolean can_like;
+
+	/**
+	 * Information about attachments in the comments (photos, links, etc.;)
+	 */
+	public VKAttachments attachments = new VKAttachments();
+
+	public VKApiComment(JSONObject from)
+	{
+		parse(from);
+	}
+
+	/**
+	 * Fills a Comment instance from JSONObject.
+	 */
+	public VKApiComment parse(JSONObject from)
+	{
+		id = from.optInt("id");
+		from_id = from.optInt("from_id");
+		date = from.optLong("date");
+		text = from.optString("text");
+		reply_to_user = from.optInt("reply_to_user");
+		reply_to_comment = from.optInt("reply_to_comment");
+		attachments.fill(from.optJSONArray("attachments"));
+		JSONObject likes = from.optJSONObject("likes");
+		this.likes = ParseUtils.parseInt(likes, "count");
+		this.user_likes = ParseUtils.parseBoolean(likes, "user_likes");
+		this.can_like = ParseUtils.parseBoolean(likes, "can_like");
+		return this;
+	}
+
+	/**
+	 * Creates a Comment instance from Parcel.
+	 */
+	public VKApiComment(Parcel in)
+	{
+		this.id = in.readInt();
+		this.from_id = in.readInt();
+		this.date = in.readLong();
+		this.text = in.readString();
+		this.reply_to_user = in.readInt();
+		this.reply_to_comment = in.readInt();
+		this.likes = in.readInt();
+		this.user_likes = in.readByte() != 0;
+		this.can_like = in.readByte() != 0;
+		this.attachments = in.readParcelable(VKAttachments.class.getClassLoader());
+	}
+
+
+	/**
+	 * Creates empty Comment instance.
+	 */
+	public VKApiComment()
+	{
+
+	}
+
+	@Override
+	public int getId()
+	{
+		return id;
+	}
+
+	@Override
+	public int describeContents()
+	{
+		return 0;
+	}
+
+	@Override
+	public void writeToParcel(Parcel dest, int flags)
+	{
+		dest.writeInt(this.id);
+		dest.writeInt(this.from_id);
+		dest.writeLong(this.date);
+		dest.writeString(this.text);
+		dest.writeInt(this.reply_to_user);
+		dest.writeInt(this.reply_to_comment);
+		dest.writeInt(this.likes);
+		dest.writeByte(user_likes ? (byte) 1 : (byte) 0);
+		dest.writeByte(can_like ? (byte) 1 : (byte) 0);
+		dest.writeParcelable(this.attachments, flags);
+	}
+
+	public static Creator<VKApiComment> CREATOR = new Creator<VKApiComment>()
+	{
+		public VKApiComment createFromParcel(Parcel source)
+		{
+			return new VKApiComment(source);
+		}
+
+		public VKApiComment[] newArray(int size)
+		{
+			return new VKApiComment[size];
+		}
+	};
+}
Index: app/src/main/res/drawable-v21/ic_folder_shared_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_folder_shared_black_24dp.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_folder_shared_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M20,6h-8l-2,-2L4,4c-1.1,0 -1.99,0.9 -1.99,2L2,18c0,1.1 0.9,2 2,2h16c1.1,0 2,-0.9 2,-2L22,8c0,-1.1 -0.9,-2 -2,-2zM15,9c1.1,0 2,0.9 2,2s-0.9,2 -2,2 -2,-0.9 -2,-2 0.9,-2 2,-2zM19,17h-8v-1c0,-1.33 2.67,-2 4,-2s4,0.67 4,2v1z"/>
+</vector>
Index: vksdk_library/src/main/java/com/vk/sdk/WebView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/WebView.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/WebView.java	(revision )
@@ -0,0 +1,31 @@
+package com.vk.sdk;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.util.AttributeSet;
+import android.view.View;
+
+public class WebView extends android.webkit.WebView {
+
+	public WebView(Context context) {
+		super(context);
+	}
+
+	public WebView(Context context, AttributeSet attrs) {
+		super(context, attrs);
+	}
+
+	public WebView(Context context, AttributeSet attrs, int defStyleAttr) {
+		super(context, attrs, defStyleAttr);
+	}
+
+	@Override
+	protected void onAttachedToWindow() {
+		super.onAttachedToWindow();
+		View view = this;
+		while (view.getParent() instanceof View) {
+			view = (View) view.getParent();
+			view.setBackgroundColor(Color.TRANSPARENT);
+		}
+	}
+}
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision )
+++ app/build.gradle	(revision )
@@ -0,0 +1,42 @@
+apply plugin: 'com.android.application'
+
+android {
+    signingConfigs {
+        config {
+            keyAlias 'myAndroidKey'
+            keyPassword '5425158k'
+            storeFile file('/home/josh/ocean minded/vkdocs.jks')
+            storePassword '5425158l'
+        }
+    }
+    compileSdkVersion 23
+    buildToolsVersion "23.0.2"
+    defaultConfig {
+        applicationId "com.vkdocs.oceanminded.vkdocs"
+        minSdkVersion 15
+        targetSdkVersion 23
+        versionCode 1
+        versionName "1.0"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+            signingConfig signingConfigs.config
+        }
+        debug {
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    testCompile 'junit:junit:4.12'
+    compile project(':vksdk_library')
+    compile 'com.android.support:appcompat-v7:23.1.1'
+    compile 'com.android.support:design:23.1.1'
+    compile 'com.android.support:cardview-v7:23.1.1'
+    compile 'com.google.android.gms:play-services:8.4.0'
+    compile 'com.squareup.picasso:picasso:2.5.1'
+    compile 'com.felipecsl:gifimageview:2.0.0'
+}
Index: app/src/main/res/drawable/shadow.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/shadow.xml	(revision )
+++ app/src/main/res/drawable/shadow.xml	(revision )
@@ -0,0 +1,5 @@
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <solid android:color="#42000000" />
+    <corners android:radius="5dp" />
+</shape>
\ No newline at end of file
Index: app/src/main/res/drawable-v21/ic_folder_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_folder_black_24dp.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_folder_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M10,4H4c-1.1,0 -1.99,0.9 -1.99,2L2,18c0,1.1 0.9,2 2,2h16c1.1,0 2,-0.9 2,-2V8c0,-1.1 -0.9,-2 -2,-2h-8l-2,-2z"/>
+</vector>
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKPostArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKPostArray.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKPostArray.java	(revision )
@@ -0,0 +1,37 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * Array of Post
+ * Created by alex_xpert on 29.01.14.
+ */
+public class VKPostArray extends VKList<VKApiPost> {
+    @Override
+    public VKApiModel parse(JSONObject response) throws JSONException {
+        fill(response, VKApiPost.class);
+        return this;
+    }
+}
Index: app/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/.gitignore	(revision )
+++ app/.gitignore	(revision )
@@ -0,0 +1,1 @@
+/build
Index: app/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/colors.xml	(revision )
+++ app/src/main/res/values/colors.xml	(revision )
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#5281b9</color>
+    <color name="colorPrimaryDark">#406693</color>
+    <color name="colorAccent">#fff</color>
+    <color name="actionBarText">#fff</color>
+    <color name="gray">#e9ecf1</color>
+
+    <color name="black_overlay">#66000000</color>
+</resources>
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKPhotoSizes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKPhotoSizes.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKPhotoSizes.java	(revision )
@@ -0,0 +1,242 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.util.Collections;
+
+/**
+ * Model to parse a list of photo with <a href="http://vk.com/dev/photo_sizes">photo sizes<a/> format.
+ *
+ * When {@code photo_sizes=1} parameter is used in methods,
+ * response contains an info about original photo
+ * copies with different sizes in sizes array with objects,
+ * each of them contains following fields: <br />
+ * <ul>
+ *  <li>src — url of image copy;</li>
+ *  <li> width — copy width, px;</li>
+ *  <li> height — copy height, px;</li>
+ *  <li>type — notation for copy size and ratio.</li>
+ * </ul>
+ */
+@SuppressWarnings("unused")
+public class VKPhotoSizes extends VKList<VKApiPhotoSize> implements Parcelable {
+
+    private static float sQuality = 1.0f;
+
+    /**
+     * Sets the quality modifier for sampling algorithm of image resolution.
+     * @param quality positive number between 0.0f and 1.0f.
+     */
+    public static void setQuality(float quality) {
+        sQuality = quality;
+    }
+
+    /**
+     * Original width of photo in pixels.
+     */
+    private int mOriginalWidth = 1;
+
+    /**
+     * Original height of photo in pixels.
+     */
+    private int mOriginalHeight = 1;
+
+    /**
+     * URL of last image thumb for width sampling algorithm.
+     */
+    private String mWidthThumb;
+    /**
+     * URL of last image thumb for height sampling algorithm.
+     */
+    private String mHeightThumb;
+
+    /**
+     * Width of last image thumb for width sampling algorithm.
+     */
+    private int mLastWidth;
+
+    /**
+     * Height of last image thumb for width sampling algorithm.
+     */
+    private int mLastHeight;
+
+    /**
+     * Parser that's used for parsing photo sizes.
+     */
+    private final Parser<VKApiPhotoSize> parser = new Parser<VKApiPhotoSize>() {
+        @Override
+        public VKApiPhotoSize parseObject(JSONObject source) throws Exception {
+            return VKApiPhotoSize.parse(source, mOriginalWidth, mOriginalHeight);
+        }
+    };
+
+    /**
+     * Creates empty list of photo sizes.
+     */
+    public VKPhotoSizes() {
+        super();
+    }
+
+    /**
+     * Creates and fills list of photo sizes.
+     */
+    public VKPhotoSizes(JSONArray from) {
+        super();
+        fill(from);
+    }
+
+    /**
+     * Creates list of photo sizes which fill with according data.
+     * @param from array of photo sizes returned by VK.
+     * @param width original photo width in pixels.
+     * @param height original photo height in pixels.
+     */
+    public void fill(JSONArray from, int width, int height) {
+        setOriginalDimension(width, height);
+        fill(from);
+    }
+
+    /**
+     * Fill list according with given data.
+     * @param from array of photo sizes returned by VK.
+     */
+    public void fill(JSONArray from) {
+        fill(from, parser);
+        sort();
+    }
+
+    /**
+     * Return image according with given type of thumb.
+     * @return  URL of image thumb, or null if image with this thumb is not found in the list.
+     */
+    public String getByType(char type) {
+        for(VKApiPhotoSize size: this) {
+            if(size.type == type) {
+                return size.src;
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Sets original image dimensions.
+     * @param width original photo width in pixels.
+     * @param height original photo height in pixels.
+     */
+    public void setOriginalDimension(int width, int height) {
+        if(width != 0) {
+            this.mOriginalWidth = width;
+        }
+        if(height != 0) {
+            this.mOriginalHeight = height;
+        }
+    }
+
+    /**
+     * Sorts thumbs according to their width.
+     */
+    public void sort() {
+        Collections.sort(this);
+    }
+
+    /**
+     * Finds an image that fits perfectly into the specified dimensions.
+     * Method is uses a cache of last thumbs for better performance.
+     * @param width required minimum width of image in pixels.
+     * @param height required minimum height of image in pixels.
+     * @return URL of selected thumb or null if image with what parameters is not found.
+     */
+    public String getImageForDimension(int width, int height) {
+        return width >= height ? getImageForWidth(width) : getImageForHeight(height);
+    }
+
+    private String getImageForWidth(int width) {
+        if((mWidthThumb != null && mLastWidth != width) || isEmpty()) {
+            return mWidthThumb;
+        }
+        mLastWidth = width;
+        mWidthThumb = null;
+        width = (int) (width * sQuality);
+
+        for(VKApiPhotoSize size : this) {
+            if(size.width >= width) {
+                mWidthThumb = size.src;
+                break;
+            }
+        }
+        return mWidthThumb;
+    }
+
+    private String getImageForHeight(int height) {
+        if((mHeightThumb != null && mLastHeight != height) || isEmpty()) {
+            return mHeightThumb;
+        }
+        mLastHeight = height;
+        mHeightThumb = null;
+        height = (int) (height * sQuality);
+
+        for(VKApiPhotoSize size : this) {
+            if(size.height >= height) {
+                mHeightThumb = size.src;
+                break;
+            }
+        }
+        return mHeightThumb;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        super.writeToParcel(dest, flags);
+        dest.writeInt(this.mOriginalWidth);
+        dest.writeInt(this.mOriginalHeight);
+        dest.writeString(this.mWidthThumb);
+        dest.writeInt(this.mLastWidth);
+    }
+
+    private VKPhotoSizes(Parcel in) {
+        super(in);
+        this.mOriginalWidth = in.readInt();
+        this.mOriginalHeight = in.readInt();
+        this.mWidthThumb = in.readString();
+        this.mLastWidth = in.readInt();
+    }
+
+    public static Creator<VKPhotoSizes> CREATOR = new Creator<VKPhotoSizes>() {
+        public VKPhotoSizes createFromParcel(Parcel source) {
+            return new VKPhotoSizes(source);
+        }
+
+        public VKPhotoSizes[] newArray(int size) {
+            return new VKPhotoSizes[size];
+        }
+    };
+}
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Adapters/RVAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Adapters/RVAdapter.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Adapters/RVAdapter.java	(revision )
@@ -0,0 +1,148 @@
+/*
+
+*/
+
+package com.vkdocs.oceanminded.vkdocs.Adapters;
+
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.squareup.picasso.Picasso;
+import com.vk.sdk.api.model.VKApiDocument;
+import com.vkdocs.oceanminded.vkdocs.Activitys.ImageActivity;
+import com.vkdocs.oceanminded.vkdocs.R;
+
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+import java.util.Locale;
+
+/**
+ * Created by josh on 16.01.16.
+ */
+public class RVAdapter extends RecyclerView.Adapter<RVAdapter.DocumentsHolder> {
+
+    List<VKApiDocument> documentslist;
+    public Context context;
+    Locale russian = new Locale("ru");
+    String[] newMonths = {
+            "января", "февраля", "марта", "апреля", "мая", "июня",
+            "июля", "августа", "сентября", "октября", "ноября", "декабря"};
+    private Bitmap bitmap;
+
+    public static class DocumentsHolder extends RecyclerView.ViewHolder{
+        TextView documentTitle;
+        TextView documentInfo;
+        ImageView documentIcon;
+        TextView documentIconText;
+    public DocumentsHolder(View itemView) {
+        super(itemView);
+        documentTitle = (TextView) itemView.findViewById(R.id.doc_name);
+        documentInfo = (TextView) itemView.findViewById(R.id.doc_info);
+        documentIcon = (ImageView) itemView.findViewById(R.id.doc_image);
+        documentIconText = (TextView) itemView.findViewById(R.id.doc_text_image);
+    }
+}
+
+    public RVAdapter(List<VKApiDocument> list) {
+        this.documentslist = new ArrayList<>(list);
+    }
+
+    @Override
+    public DocumentsHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        context = parent.getContext();
+        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.card_item, parent, false);
+        DocumentsHolder pvh = new DocumentsHolder(v);
+
+        return pvh;
+    }
+
+    @Override
+    public void onBindViewHolder(final DocumentsHolder holder, final int position) {
+        holder.documentTitle.setText(title(documentslist.get(position).title));
+        holder.documentInfo.setText(convertSize(documentslist.get(position).size) + ", " + convertDate(documentslist.get(position).date));
+
+
+        if(documentslist.get(position).isImage() || documentslist.get(position).isGif()) {
+            holder.documentIconText.setText("");
+            Picasso.with(context).load(documentslist.get(position).photo_100).into(holder.documentIcon);
+        }
+        else{
+            holder.documentIconText.setText(documentslist.get(position).ext);
+            holder.documentIcon.setImageDrawable(new ColorDrawable(Color.parseColor("#e9ecf1")));
+        }
+
+        holder.itemView.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if(holder.documentIconText.getText() == "") {
+                    Intent open = new Intent(context, ImageActivity.class);
+                    open.putExtra("url",documentslist.get(position).url );
+                    context.startActivity(open);
+                }
+            }
+        });
+    }
+
+
+
+    public  String title(String s){
+        if(s.length() >=30){
+            s = s.substring(0,30) + "...";
+        }
+        return s;
+    }
+
+
+    public String convertDate(long unixdate) {
+        SimpleDateFormat sdf = new SimpleDateFormat("d MMM yyyy в H:m", russian);
+        Date date = new Date(unixdate * 1000);
+        String formatedDate = sdf.format(date);
+        return formatedDate;
+    }
+
+    public String convertSize(long unixsize)
+    {
+        String result = ""+unixsize;
+
+        switch (result.length()){
+            case 1: result += " Б";;
+                break;
+            case 2: result += " Б";
+                break;
+            case 3: result += " Б";
+                break;
+            case 4: result = result.subSequence(0,1) + " КБ";
+                break;
+            case 5:  result = result.subSequence(0,2) + " КБ";
+                break;
+            case 6:  result = result.subSequence(0,3) + " КБ";
+                break;
+            case 7:  result = result.subSequence(0,1) + " МБ";
+                break;
+            case 8:  result = result.subSequence(0,2) + " МБ";
+                break;
+            case 9:  result = result.subSequence(0,3) + " МБ";
+                break;
+        }
+        return result;
+    }
+
+
+    @Override
+    public int getItemCount() {
+        return documentslist.size();
+    }
+
+
+}
Index: vksdk_library/src/main/res/values-w720dp/dimen.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/values-w720dp/dimen.xml	(revision )
+++ vksdk_library/src/main/res/values-w720dp/dimen.xml	(revision )
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <dimen name="vk_share_dialog_view_padding">160dp</dimen>
+</resources>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/util/VKJsonHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/util/VKJsonHelper.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/util/VKJsonHelper.java	(revision )
@@ -0,0 +1,183 @@
+//  Based on https://gist.github.com/codebutler/2339666
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.util;
+
+import com.vk.sdk.VKSdk;
+import com.vk.sdk.api.model.VKApiModel;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.lang.reflect.Array;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Provide common functions for json processing
+ */
+@SuppressWarnings("rawtypes")
+public class VKJsonHelper {
+    /**
+     * Converts object to JSON object, if possible
+     *
+     * @param object object to serialize to json
+     * @return Completed json object
+     * @throws JSONException
+     */
+
+    public static Object toJSON(Object object) throws JSONException {
+        if (object instanceof Map) {
+            JSONObject json = new JSONObject();
+            Map map = (Map) object;
+            for (Object key : map.keySet()) {
+                json.put(key.toString(), toJSON(map.get(key)));
+            }
+            return json;
+        } else if (object instanceof Iterable) {
+            JSONArray json = new JSONArray();
+            for (Object value : ((Iterable) object)) {
+                json.put(value);
+            }
+            return json;
+        } else {
+            return object;
+        }
+    }
+
+    /**
+     * Check if json object is empty
+     *
+     * @param object object to check
+     * @return true if object is empty
+     */
+    public static boolean isEmptyObject(JSONObject object) {
+        return object.names() == null;
+    }
+
+    /**
+     * Converts field in key to map
+     *
+     * @param object target object
+     * @param key    target key
+     * @return Map of field by passed key
+     * @throws JSONException
+     */
+    public static Map<String, Object> getMap(JSONObject object, String key) throws JSONException {
+        return toMap(object.getJSONObject(key));
+    }
+
+    /**
+     * Converts selected json-object to map
+     *
+     * @param object object to convert
+     * @return Filled map
+     * @throws JSONException
+     */
+    public static Map<String, Object> toMap(JSONObject object) throws JSONException {
+        Map<String, Object> map = new HashMap<String, Object>();
+        Iterator keys = object.keys();
+        while (keys.hasNext()) {
+            String key = (String) keys.next();
+            map.put(key, fromJson(object.get(key)));
+        }
+        return map;
+    }
+
+    /**
+     * Converts json-array to list
+     *
+     * @param array json-array to convert
+     * @return converted array
+     * @throws JSONException
+     */
+    @SuppressWarnings("unchecked")
+    public static List toList(JSONArray array) throws JSONException {
+        List list = new ArrayList();
+        for (int i = 0; i < array.length(); i++) {
+            list.add(fromJson(array.get(i)));
+        }
+        return list;
+    }
+
+    public static Object toArray(JSONArray array, Class arrayClass)
+    {
+        Object ret = Array.newInstance(arrayClass.getComponentType(), array.length());
+        Class<?> subType = arrayClass.getComponentType();
+
+        for (int i = 0; i < array.length(); i++)
+        {
+            try
+            {
+                Object jsonItem = array.get(i);
+                Object objItem = subType.newInstance();
+                if (jsonItem instanceof JSONObject)
+                {
+                    JSONObject jsonItem2 = (JSONObject) jsonItem;
+                    if (objItem instanceof VKApiModel)
+                    {
+                        VKApiModel objItem2 = (VKApiModel) objItem;
+                        ((VKApiModel) objItem).parse(jsonItem2);
+                        Array.set(ret, i, objItem2);
+                    }
+                }
+            }
+            catch (JSONException e)
+            {
+                if (VKSdk.DEBUG)
+                    e.printStackTrace();
+            }
+            catch (InstantiationException e)
+            {
+                if (VKSdk.DEBUG)
+                    e.printStackTrace();
+            }
+            catch (IllegalAccessException e)
+            {
+                if (VKSdk.DEBUG)
+                    e.printStackTrace();
+            }
+        }
+        return ret;
+    }
+
+    /**
+     * Converts object from json to java object
+     *
+     * @param json object from jsonobject or jsonarray
+     * @return converted object
+     * @throws JSONException
+     */
+    private static Object fromJson(Object json) throws JSONException {
+        if (json == JSONObject.NULL) {
+            return null;
+        } else if (json instanceof JSONObject) {
+            return toMap((JSONObject) json);
+        } else if (json instanceof JSONArray) {
+            return toList((JSONArray) json);
+        } else {
+            return json;
+        }
+    }
+}
\ No newline at end of file
Index: vksdk_library/src/main/res/drawable/vk_share_send_button_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/drawable/vk_share_send_button_background.xml	(revision )
+++ vksdk_library/src/main/res/drawable/vk_share_send_button_background.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true" android:state_selected="true" android:drawable="@drawable/vk_gray_transparent_shape"/>
+    <item android:state_pressed="true" android:drawable="@drawable/vk_gray_transparent_shape"/>
+    <item android:state_selected="true" android:drawable="@drawable/vk_gray_transparent_shape"/>
+    <item android:drawable="@drawable/vk_clear_shape"/>
+</selector>
\ No newline at end of file
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gradle.properties	(revision )
+++ gradle.properties	(revision )
@@ -0,0 +1,19 @@
+# Project-wide Gradle settings.
+
+# IDE (e.g. Android Studio) users:
+# Gradle settings configured through the IDE *will override*
+# any settings specified in this file.
+
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx10248m -XX:MaxPermSize=256m
+# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+# org.gradle.daemon=true
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/docs/VKUploadDocBase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/docs/VKUploadDocBase.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/docs/VKUploadDocBase.java	(revision )
@@ -0,0 +1,54 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.docs;
+
+import com.vk.sdk.api.VKUploadBase;
+import com.vk.sdk.api.httpClient.VKHttpClient;
+import com.vk.sdk.api.httpClient.VKJsonOperation;
+
+import java.io.File;
+
+/**
+ * Provides common part of document upload process
+ */
+public abstract class VKUploadDocBase extends VKUploadBase {
+    /**
+     * ID of group to upload
+     */
+    protected long mGroupId;
+    /**
+     * Document to upload
+     */
+    protected File mDoc;
+
+    /**
+     * Creates a VKUploadDocBase empty instance.
+     */
+    public VKUploadDocBase() {
+        super();
+    }
+
+    @Override
+    protected VKJsonOperation getUploadOperation(String uploadUrl) {
+        return new VKJsonOperation(VKHttpClient.docUploadRequest(uploadUrl, mDoc));
+    }
+}
Index: app/src/main/res/values/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/dimens.xml	(revision )
+++ app/src/main/res/values/dimens.xml	(revision )
@@ -0,0 +1,9 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+    <dimen name="fab_margin">16dp</dimen>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="nav_header_vertical_spacing">16dp</dimen>
+    <dimen name="nav_header_height">160dp</dimen>
+</resources>
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPostedPhoto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPostedPhoto.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiPostedPhoto.java	(revision )
@@ -0,0 +1,67 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * PostdPhoto.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 19.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import org.json.JSONObject;
+import static com.vk.sdk.api.model.VKAttachments.*;
+
+/**
+ * Subclass to directly uploaded wall photo.
+ */
+@SuppressWarnings("unused")
+public class VKApiPostedPhoto extends VKApiPhoto {
+
+    /**
+     * Fills a PostedPhoto instance from JSONObject.
+     */
+    public VKApiPostedPhoto parse(JSONObject from) {
+        super.parse(from);
+        return this;
+    }
+
+    /**
+     * Creates a PostedPhoto instance from Parcel.
+     */
+    public VKApiPostedPhoto(Parcel in) {
+        super(in);
+    }
+
+    /**
+     * Creates empty PostedPhoto instance.
+     */
+    public VKApiPostedPhoto() {
+
+    }
+
+    @Override
+    public String getType() {
+        return TYPE_POSTED_PHOTO;
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/VKUploadBase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/VKUploadBase.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/VKUploadBase.java	(revision )
@@ -0,0 +1,177 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api;
+
+import com.vk.sdk.VKSdk;
+import com.vk.sdk.api.httpClient.VKAbstractOperation;
+import com.vk.sdk.api.httpClient.VKHttpClient;
+import com.vk.sdk.api.httpClient.VKJsonOperation;
+import com.vk.sdk.api.httpClient.VKJsonOperation.VKJSONOperationCompleteListener;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.concurrent.ExecutorService;
+
+/**
+ * Base class for upload files to server
+ */
+public abstract class VKUploadBase extends VKRequest {
+
+    protected abstract VKRequest getServerRequest();
+
+    protected abstract VKRequest getSaveRequest(JSONObject response);
+
+    protected abstract VKJsonOperation getUploadOperation(String uploadUrl);
+
+    public VKUploadBase() {
+        super(null);
+    }
+
+    @Override
+    public VKAbstractOperation getOperation() {
+        return new VKUploadOperation();
+    }
+
+    private class VKUploadOperation extends VKAbstractOperation {
+
+        protected VKAbstractOperation lastOperation;
+
+        @Override
+        public void start(ExecutorService s) {
+            super.start(s);
+            final VKRequestListener originalListener = VKUploadBase.this.requestListener;
+
+            VKUploadBase.this.requestListener = new VKRequestListener() {
+                @Override
+                public void onComplete(VKResponse response) {
+                    setState(VKOperationState.Finished);
+                    response.request = VKUploadBase.this;
+                    if (originalListener != null) {
+                        originalListener.onComplete(response);
+                    }
+                }
+
+                @Override
+                public void onError(VKError error) {
+                    setState(VKOperationState.Finished);
+                    error.request = VKUploadBase.this;
+                    if (originalListener != null) {
+                        originalListener.onError(error);
+                    }
+                }
+
+                @Override
+                public void onProgress(VKProgressType progressType, long bytesLoaded,
+                                       long bytesTotal) {
+                    if (originalListener != null) {
+                        originalListener.onProgress(progressType, bytesLoaded, bytesTotal);
+                    }
+                }
+            };
+            setState(VKOperationState.Executing);
+            VKRequest serverRequest = getServerRequest();
+            serverRequest.setRequestListener(new VKUploadRequestListener());
+            lastOperation = serverRequest.getOperation();
+            VKHttpClient.enqueueOperation(lastOperation);
+        }
+
+        @Override
+        public void cancel() {
+            if (lastOperation != null)
+                lastOperation.cancel();
+            super.cancel();
+        }
+
+        @Override
+        public void finish() {
+            super.finish();
+            lastOperation = null;
+        }
+
+        @Override
+        public Object getResultObject() {
+            return null;
+        }
+
+        private class VKUploadRequestListener extends VKRequestListener {
+            @Override
+            public void onComplete(VKResponse response) {
+                try {
+                    String uploadUrl = response.json.getJSONObject("response").getString("upload_url");
+                    VKJsonOperation postFileRequest = getUploadOperation(uploadUrl);
+                    postFileRequest.setHttpOperationListener(new VKJSONOperationCompleteListener() {
+                        @Override
+                        public void onComplete(VKJsonOperation operation,
+                                               JSONObject response) {
+
+                            VKRequest saveRequest = getSaveRequest(response);
+                            saveRequest.setRequestListener(new VKRequestListener() {
+                                @Override
+                                public void onComplete(VKResponse response) {
+                                    if (requestListener != null) {
+                                        requestListener.onComplete(response);
+                                    }
+                                    setState(VKOperationState.Finished);
+                                }
+
+                                @Override
+                                public void onError(VKError error) {
+                                    if (requestListener != null) {
+                                        requestListener.onError(error);
+                                    }
+                                }
+                            });
+                            lastOperation = saveRequest.getOperation();
+                            VKHttpClient.enqueueOperation(lastOperation);
+                        }
+
+                        @Override
+                        public void onError(VKJsonOperation operation, VKError error) {
+                            if (requestListener != null) {
+                                requestListener.onError(error);
+                            }
+                        }
+                    });
+
+                    lastOperation = postFileRequest;
+                    VKHttpClient.enqueueOperation(lastOperation);
+                } catch (JSONException e) {
+                    if (VKSdk.DEBUG)
+                        e.printStackTrace();
+                    VKError error = new VKError(VKError.VK_JSON_FAILED);
+                    error.httpError = e;
+                    error.errorMessage = e.getMessage();
+                    if (requestListener != null) {
+                        requestListener.onError(error);
+                    }
+                }
+            }
+
+            @Override
+            public void onError(VKError error) {
+                if (requestListener != null)
+                    requestListener.onError(error);
+            }
+        }
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiNote.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiNote.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiNote.java	(revision )
@@ -0,0 +1,157 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * Note.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 19.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+import static com.vk.sdk.api.model.VKAttachments.*;
+
+/**
+ * A note object describes a note.
+ */
+@SuppressWarnings("unused")
+public class VKApiNote extends VKAttachments.VKApiAttachment implements Identifiable, android.os.Parcelable {
+
+    /**
+     * Note ID, positive number
+     */
+    public int id;
+
+    /**
+     * Note owner ID.
+     */
+    public int user_id;
+
+    /**
+     * Note title.
+     */
+    public String title;
+
+    /**
+     * Note text.
+     */
+    public String text;
+
+    /**
+     * Date (in Unix time) when the note was created.
+     */
+    public long date;
+
+    /**
+     * Number of comments.
+     */
+    public int comments;
+
+    /**
+     * Number of read comments (only if owner_id is the current user).
+     */
+    public int read_comments;
+
+	public VKApiNote(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills a Note instance from JSONObject.
+     */
+    public VKApiNote parse(JSONObject source) {
+        id = source.optInt("id");
+        user_id = source.optInt("user_id");
+        title = source.optString("title");
+        text = source.optString("text");
+        date = source.optLong("date");
+        comments = source.optInt("comments");
+        read_comments = source.optInt("read_comments");
+        return this;
+    }
+
+    /**
+     * Creates a Note instance from Parcel.
+     */
+    public VKApiNote(Parcel in) {
+        this.id = in.readInt();
+        this.user_id = in.readInt();
+        this.title = in.readString();
+        this.text = in.readString();
+        this.date = in.readLong();
+        this.comments = in.readInt();
+        this.read_comments = in.readInt();
+    }
+
+    /**
+     * Creates empty Note instance.
+     */
+    public VKApiNote() {
+
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public CharSequence toAttachmentString() {
+        return new StringBuilder(TYPE_NOTE).append(user_id).append('_').append(id);
+    }
+
+    @Override
+    public String getType() {
+        return TYPE_NOTE;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeInt(this.user_id);
+        dest.writeString(this.title);
+        dest.writeString(this.text);
+        dest.writeLong(this.date);
+        dest.writeInt(this.comments);
+        dest.writeInt(this.read_comments);
+    }
+
+    public static Creator<VKApiNote> CREATOR = new Creator<VKApiNote>() {
+        public VKApiNote createFromParcel(Parcel source) {
+            return new VKApiNote(source);
+        }
+
+        public VKApiNote[] newArray(int size) {
+            return new VKApiNote[size];
+        }
+    };
+
+}
Index: vksdk_library/src/main/project.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/project.properties	(revision )
+++ vksdk_library/src/main/project.properties	(revision )
@@ -0,0 +1,15 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system edit
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+#
+# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
+#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
+
+# Project target.
+target=android-19
+android.library=true
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/AllDocumentsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/AllDocumentsFragment.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/AllDocumentsFragment.java	(revision )
@@ -0,0 +1,96 @@
+package com.vkdocs.oceanminded.vkdocs.Fragments;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.VKResponse;
+import com.vk.sdk.api.model.VKApiDocument;
+import com.vk.sdk.api.model.VKDocsArray;
+import com.vkdocs.oceanminded.vkdocs.Adapters.RVAdapter;
+import com.vkdocs.oceanminded.vkdocs.R;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+
+public class AllDocumentsFragment extends Fragment {
+
+    private TextView notdosc;
+    private List<VKApiDocument> documentslist;
+    private RecyclerView documenstListRV;
+    private RVAdapter adapter;
+    public static int DOCS_PARAMETR = 0;
+    public static int DOCS_COUNT = 20;
+
+
+    public AllDocumentsFragment() {
+        // Required empty public constructor
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.fragmenta,container, false);
+        notdosc =(TextView) view.findViewById(R.id.notdocs_text);
+        documenstListRV = (RecyclerView) view.findViewById(R.id.documents_recycleview);
+        LinearLayoutManager llm = new LinearLayoutManager(getContext());
+        documenstListRV.setLayoutManager(llm);
+        documenstListRV.setHasFixedSize(true);
+        documentslist = new ArrayList<>();
+        getDocumentFromServer();
+        return view;
+    }
+
+    public void getDocumentFromServer() {
+        //---- Async Request--------------
+        List<VKApiDocument> docsList = new ArrayList<VKApiDocument>();
+        VKRequest getdocs = new VKRequest("docs.get", VKParameters.from("type", DOCS_PARAMETR,"count",20), VKRequest.HttpMethod.GET, VKDocsArray.class);
+        getdocs.executeSyncWithListener(new VKRequest.VKRequestListener() {
+            @Override
+            public void onProgress(VKRequest.VKProgressType progressType, long bytesLoaded, long bytesTotal) {
+                super.onProgress(progressType, bytesLoaded, bytesTotal);
+            }
+
+            @Override
+            public void onComplete(VKResponse response) {
+                super.onComplete(response);
+                VKDocsArray docsArray = (VKDocsArray) response.parsedModel;
+                for (VKApiDocument doc : docsArray) {
+                    documentslist.add(doc);
+                }
+                adapter = new RVAdapter(documentslist);
+                documenstListRV.setAdapter(adapter);
+            }
+
+            @Override
+            public void attemptFailed(VKRequest request, int attemptNumber, int totalAttempts) {
+                super.attemptFailed(request, attemptNumber, totalAttempts);
+            }
+
+            @Override
+            public void onError(VKError error) {
+                super.onError(error);
+            }
+        });
+    }
+    @Override
+    public void onAttach(Context context) {
+        super.onAttach(context);
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/VKBatchRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/VKBatchRequest.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/VKBatchRequest.java	(revision )
@@ -0,0 +1,165 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api;
+
+import android.os.Handler;
+import android.os.Looper;
+
+import com.vk.sdk.VKObject;
+import com.vk.sdk.api.httpClient.VKHttpClient;
+
+/**
+ * Used for execution bunch of methods at time, and receive results of that methods in array
+ */
+public class VKBatchRequest extends VKObject {
+    private final VKRequest[] mRequests;
+    private final VKResponse[] mResponses;
+    private final VKRequest.VKRequestListener[] mOriginalListeners;
+    private boolean mCanceled = false;
+
+    /**
+     * Specify listener for current request
+     */
+    public VKBatchRequestListener requestListener;
+
+    public VKBatchRequest(VKRequest... requests) {
+        mRequests = requests;
+        mResponses = new VKResponse[mRequests.length];
+        mOriginalListeners = new VKRequest.VKRequestListener[mRequests.length];
+        for (int i = 0; i < mRequests.length; i++) {
+            mOriginalListeners[i] = mRequests[i].requestListener;
+        }
+    }
+
+    /**
+     * Start new batch execution. At this moment a batch simply sends all requests with interval
+     * @param listener {@link com.vk.sdk.api.VKBatchRequest.VKBatchRequestListener}
+     */
+    public void executeWithListener(VKBatchRequestListener listener) {
+        if (mRequests == null) {
+            provideError(new VKError(VKError.VK_REQUEST_NOT_PREPARED));
+            return;
+        }
+        this.requestListener = listener;
+        Handler intervalHandler = new Handler(Looper.myLooper());
+
+        int nextInterval = 0;
+        for (final VKRequest request : mRequests) {
+            intervalHandler.postDelayed(new Runnable() {
+                @Override
+                public void run() {
+                    final VKRequest.VKRequestListener originalListener = request.requestListener;
+                    request.setRequestListener(new VKRequest.VKRequestListener() {
+                        @Override
+                        public void onComplete(VKResponse response) {
+                            provideResponse(response);
+                        }
+
+                        @Override
+                        public void onError(VKError error) {
+                            provideError(error);
+                        }
+
+                        @Override
+                        public void onProgress(VKRequest.VKProgressType progressType, long bytesLoaded, long bytesTotal) {
+                            if (originalListener != null) {
+                                originalListener.onProgress(progressType, bytesLoaded, bytesTotal);
+                            }
+                        }
+                    });
+                    VKHttpClient.enqueueOperation(request.getOperation());
+                }
+            }, nextInterval);
+
+            nextInterval += 1000 / 3;
+        }
+    }
+
+    /**
+     * Cancel current batch request
+     */
+    public void cancel() {
+        if (mCanceled) return;
+        mCanceled = true;
+        for (VKRequest request : mRequests)
+            request.cancel();
+
+    }
+
+    protected void provideResponse(VKResponse response) {
+        mResponses[indexOfRequest(response.request)] = response;
+        for (VKResponse resp : mResponses) {
+            if (resp == null) return;
+        }
+        for (int i = 0; i < mRequests.length; i++) {
+            VKRequest.VKRequestListener l = mOriginalListeners[i];
+            if (l != null) {
+                l.onComplete(mResponses[i]);
+            }
+        }
+
+        if (requestListener != null) {
+            requestListener.onComplete(mResponses);
+        }
+    }
+
+    private int indexOfRequest(VKRequest request) {
+        for (int i = 0; i < mRequests.length; i++)
+            if (mRequests[i].equals(request)) return i;
+        return -1;
+    }
+
+    protected void provideError(VKError error) {
+        if (mCanceled)
+            return;
+        for (int i = 0; i < mRequests.length; i++) {
+            VKRequest.VKRequestListener l = mOriginalListeners[i];
+            if (l != null) {
+                l.onError(error);
+            }
+        }
+        if (requestListener != null)
+            requestListener.onError(error);
+        cancel();
+    }
+
+    /**
+     * Extend listeners for requests from that class
+     */
+    public static abstract class VKBatchRequestListener {
+        /**
+         * Called if there were no HTTP or API errors, returns execution result.
+         *
+         * @param responses responses from VKRequests in passing order of construction
+         */
+        public void onComplete(VKResponse[] responses) {
+        }
+
+        /**
+         * Called immediately if there was API error, or after <b>attempts</b> tries if there was an HTTP error
+         *
+         * @param error error for VKRequest
+         */
+        public void onError(VKError error) {
+        }
+    }
+}
Index: app/src/main/res/drawable-v21/ic_cloud_queue_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_cloud_queue_black_24dp.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_cloud_queue_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M19.35,10.04C18.67,6.59 15.64,4 12,4 9.11,4 6.6,5.64 5.35,8.04 2.34,8.36 0,10.91 0,14c0,3.31 2.69,6 6,6h13c2.76,0 5,-2.24 5,-5 0,-2.64 -2.05,-4.78 -4.65,-4.96zM19,18H6c-2.21,0 -4,-1.79 -4,-4s1.79,-4 4,-4h0.71C7.37,7.69 9.48,6 12,6c3.04,0 5.5,2.46 5.5,5.5v0.5H19c1.66,0 3,1.34 3,3s-1.34,3 -3,3z"/>
+</vector>
Index: app/src/main/res/values-v21/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values-v21/styles.xml	(revision )
+++ app/src/main/res/values-v21/styles.xml	(revision )
@@ -0,0 +1,9 @@
+<resources>
+
+    <style name="AppTheme.NoActionBar">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+        <item name="android:windowDrawsSystemBarBackgrounds">true</item>
+        <item name="android:statusBarColor">@android:color/transparent</item>
+    </style>
+</resources>
Index: vksdk_library/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/values/strings.xml	(revision )
+++ vksdk_library/src/main/res/values/strings.xml	(revision )
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="vk_name">VK</string>
+    <string name="vk_enter_captcha_text">Enter captcha text here</string>
+    <string name="vk_retry">Retry</string>
+    <string name="vk_send">SEND</string>
+    <string name="vk_share">Share</string>
+    <string name="vk_new_message_text">Enter your message..</string>
+    <string name="vk_new_post_settings">Post settings</string>
+
+</resources>
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision )
+++ .idea/gradle.xml	(revision )
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleHome" value="$APPLICATION_HOME_DIR$/gradle/gradle-2.8" />
+        <option name="gradleJvm" value="1.8" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/app" />
+            <option value="$PROJECT_DIR$/vksdk_library" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/res/layout/progresbar_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/progresbar_item.xml	(revision )
+++ app/src/main/res/layout/progresbar_item.xml	(revision )
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical" >
+
+    <ProgressBar
+        android:id="@+id/progressBar1"
+        android:layout_width="wrap_content"
+        android:layout_gravity="center_horizontal"
+        android:layout_height="wrap_content" />
+
+</LinearLayout>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiWikiPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiWikiPage.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiWikiPage.java	(revision )
@@ -0,0 +1,212 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * WikiPage.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 19.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+import static com.vk.sdk.api.model.VKAttachments.*;
+
+/**
+ * Describes a Wiki page.
+ */
+@SuppressWarnings("unused")
+public class VKApiWikiPage extends VKAttachments.VKApiAttachment implements android.os.Parcelable {
+
+    /**
+     * Wiki page ID;
+     */
+    public int id;
+
+    /**
+     * ID of the group the wiki page belongs to;
+     */
+    public int group_id;
+
+    /**
+     * ID of the page creator.
+     */
+    public int creator_id;
+
+    /**
+     * Wiki page name.
+     */
+    public String title;
+
+    /**
+     * Text of the wiki page.
+     */
+    public String source;
+
+    /**
+     * Whether a user can edit page text (false — cannot, true — can).
+     */
+    public boolean current_user_can_edit;
+
+    /**
+     * Whether a user can edit page access permissions (false — cannot, true — can).
+     */
+    public boolean current_user_can_edit_access;
+
+    /**
+     * Who can view the wiki page(0 — only community managers, 1 — only community members, 2 — all users).
+     */
+    public int who_can_view;
+
+    /**
+     * Who can edit the wiki page (0 — only community managers, 1 — only community members, 2 — all users).
+     */
+    public int who_can_edit;
+
+    /**
+     * ID of the last user who edited the page.
+     */
+    public int editor_id;
+
+    /**
+     * Date of the last change.
+     */
+    public long edited;
+
+    /**
+     * Page creation date.
+     */
+    public long created;
+
+    /**
+     * Title of the parent page for navigation, if any.
+     */
+    public String parent;
+
+    /**
+     * Title of the second parent page for navigation, if any.
+     */
+    public String parent2;
+
+	public VKApiWikiPage(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills a WikiPage instance from JSONObject.
+     */
+    public VKApiWikiPage parse(JSONObject source) {
+        id = source.optInt("id");
+        group_id = source.optInt("group_id");
+        creator_id = source.optInt("creator_id");
+        title = source.optString("title");
+        this.source = source.optString("source");
+        current_user_can_edit = ParseUtils.parseBoolean(source, "current_user_can_edit");
+        current_user_can_edit_access = ParseUtils.parseBoolean(source, "current_user_can_edit_access");
+        who_can_view = source.optInt("who_can_view");
+        who_can_edit = source.optInt("who_can_edit");
+        editor_id = source.optInt("editor_id");
+        edited = source.optLong("edited");
+        created = source.optLong("created");
+        parent = source.optString("parent");
+        parent2 = source.optString("parent2");
+        return this;
+    }
+
+    /**
+     * Creates a WikiPage instance from Parcel.
+     */
+    public VKApiWikiPage(Parcel in) {
+        this.id = in.readInt();
+        this.group_id = in.readInt();
+        this.creator_id = in.readInt();
+        this.title = in.readString();
+        this.source = in.readString();
+        this.current_user_can_edit = in.readByte() != 0;
+        this.current_user_can_edit_access = in.readByte() != 0;
+        this.who_can_view = in.readInt();
+        this.who_can_edit = in.readInt();
+        this.editor_id = in.readInt();
+        this.edited = in.readLong();
+        this.created = in.readLong();
+        this.parent = in.readString();
+        this.parent2 = in.readString();
+    }
+
+    /**
+     * Creates empty WikiPage instance.
+     */
+    public VKApiWikiPage() {
+
+    }
+
+    @Override
+    public CharSequence toAttachmentString() {
+        return new StringBuilder(TYPE_WIKI_PAGE).append(group_id).append('_').append(id);
+    }
+
+    @Override
+    public String getType() {
+        return TYPE_WIKI_PAGE;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeInt(this.group_id);
+        dest.writeInt(this.creator_id);
+        dest.writeString(this.title);
+        dest.writeString(this.source);
+        dest.writeByte(current_user_can_edit ? (byte) 1 : (byte) 0);
+        dest.writeByte(current_user_can_edit_access ? (byte) 1 : (byte) 0);
+        dest.writeInt(this.who_can_view);
+        dest.writeInt(this.who_can_edit);
+        dest.writeInt(this.editor_id);
+        dest.writeLong(this.edited);
+        dest.writeLong(this.created);
+        dest.writeString(this.parent);
+        dest.writeString(this.parent2);
+    }
+
+    public static Creator<VKApiWikiPage> CREATOR = new Creator<VKApiWikiPage>() {
+        public VKApiWikiPage createFromParcel(Parcel source) {
+            return new VKApiWikiPage(source);
+        }
+
+        public VKApiWikiPage[] newArray(int size) {
+            return new VKApiWikiPage[size];
+        }
+    };
+
+    @Override
+    public int getId() {
+        return id;
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiUniversity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiUniversity.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiUniversity.java	(revision )
@@ -0,0 +1,195 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import static android.text.TextUtils.isEmpty;
+
+/**
+ * An university object describes an university.
+ */
+@SuppressWarnings("unused")
+public class VKApiUniversity extends VKApiModel implements Parcelable, Identifiable {
+
+    /**
+     * University ID, positive number
+     */
+    public int id;
+
+    /**
+     * ID of the country the university is located in, positive number
+     */
+    public int country_id;
+
+    /**
+     * ID of the city the university is located in, positive number
+     */
+    public int city_id;
+
+    /**
+     * University name
+     */
+    public String name;
+
+    /**
+     * Faculty ID
+     */
+    public String faculty;
+
+    /**
+     * Faculty name
+     */
+    public String faculty_name;
+
+    /**
+     * University chair ID;
+     */
+    public int chair;
+
+    /**
+     * Chair name
+     */
+    public String chair_name;
+
+    /**
+     * Graduation year
+     */
+    public int graduation;
+
+    /**
+     * Form of education
+     */
+    public String education_form;
+
+    /**
+     * Status of education
+     */
+    public String education_status;
+
+	public VKApiUniversity(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills a University instance from JSONObject.
+     */
+    public VKApiUniversity parse(JSONObject from) {
+        id = from.optInt("id");
+        country_id = from.optInt("country_id");
+        city_id = from.optInt("city_id");
+        name = from.optString("name");
+        faculty = from.optString("faculty");
+        faculty_name = from.optString("faculty_name");
+        chair = from.optInt("chair");
+        chair_name = from.optString("chair_name");
+        graduation = from.optInt("graduation");
+        education_form = from.optString("education_form");
+        education_status = from.optString("education_status");
+        return this;
+    }
+
+    /**
+     * Creates a University instance from Parcel.
+     */
+    public VKApiUniversity(Parcel in) {
+        this.id = in.readInt();
+        this.country_id = in.readInt();
+        this.city_id = in.readInt();
+        this.name = in.readString();
+        this.faculty = in.readString();
+        this.faculty_name = in.readString();
+        this.chair = in.readInt();
+        this.chair_name = in.readString();
+        this.graduation = in.readInt();
+        this.education_form = in.readString();
+        this.education_status = in.readString();
+    }
+
+    /**
+     * Creates empty University instance.
+     */
+    public VKApiUniversity() {
+
+    }
+
+    private String fullName;
+
+    @Override
+    public String toString() {
+        if(fullName == null) {
+            StringBuilder result = new StringBuilder(name);
+            result.append(" \'");
+            result.append(String.format("%02d", graduation % 100));
+            if(!isEmpty(faculty_name)) {
+                result.append(", ");
+                result.append(faculty_name);
+            }
+            if(!isEmpty(chair_name)) {
+                result.append(", ");
+                result.append(chair_name);
+            }
+            fullName = result.toString();
+        }
+        return fullName;
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeInt(this.country_id);
+        dest.writeInt(this.city_id);
+        dest.writeString(this.name);
+        dest.writeString(this.faculty);
+        dest.writeString(this.faculty_name);
+        dest.writeInt(this.chair);
+        dest.writeString(this.chair_name);
+        dest.writeInt(this.graduation);
+        dest.writeString(this.education_form);
+        dest.writeString(this.education_status);
+    }
+
+    public static Creator<VKApiUniversity> CREATOR = new Creator<VKApiUniversity>() {
+        public VKApiUniversity createFromParcel(Parcel source) {
+            return new VKApiUniversity(source);
+        }
+
+        public VKApiUniversity[] newArray(int size) {
+            return new VKApiUniversity[size];
+        }
+    };
+
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiMessage.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKApiMessage.java	(revision )
@@ -0,0 +1,176 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+/**
+ * Message.java
+ * vk-android-sdk
+ *
+ * Created by Babichev Vitaly on 19.01.14.
+ * Copyright (c) 2014 VK. All rights reserved.
+ */
+package com.vk.sdk.api.model;
+
+import android.os.Parcel;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * A message object describes a private message
+ */
+@SuppressWarnings("unused")
+public class VKApiMessage extends VKApiModel implements Identifiable, android.os.Parcelable {
+
+    /**
+     * 	Message ID. (Not returned for forwarded messages), positive number
+     */
+    public int id;
+
+    /**
+     * For an incoming message, the user ID of the author. For an outgoing message, the user ID of the receiver.
+     */
+    public int user_id;
+
+    /**
+     * 	Date (in Unix time) when the message was sent.
+     */
+    public long date;
+
+    /**
+     * Message status (false — not read, true — read). (Not returned for forwarded messages.)
+     */
+    public boolean read_state;
+
+    /**
+     * Message type (false — received, true — sent). (Not returned for forwarded messages.)
+     */
+    public boolean out;
+
+    /**
+     * Title of message or chat.
+     */
+    public String title;
+
+    /**
+     * Body of the message.
+     */
+    public String body;
+
+    /**
+     * List of media-attachments;
+     */
+    public VKAttachments attachments = new VKAttachments();
+
+    /**
+     * Array of forwarded messages (if any).
+     */
+    public VKList<VKApiMessage> fwd_messages;
+
+    /**
+     *	Whether the message contains smiles (false — no, true — yes).
+     */
+    public boolean emoji;
+
+    /**
+     * Whether the message is deleted (false — no, true — yes).
+     */
+    public boolean deleted;
+
+	public VKApiMessage(JSONObject from) throws JSONException
+	{
+		parse(from);
+	}
+    /**
+     * Fills a Message instance from JSONObject.
+     */
+    public VKApiMessage parse(JSONObject source) throws JSONException {
+        id = source.optInt("id");
+        user_id = source.optInt("user_id");
+        date = source.optLong("date");
+        read_state = ParseUtils.parseBoolean(source, "read_state");
+        out = ParseUtils.parseBoolean(source, "out");
+        title = source.optString("title");
+        body = source.optString("body");
+        attachments .fill(source.optJSONArray("attachments"));
+        fwd_messages = new VKList<VKApiMessage>(source.optJSONArray("fwd_messages"), VKApiMessage.class);
+        emoji = ParseUtils.parseBoolean(source, "emoji");
+        deleted = ParseUtils.parseBoolean(source, "deleted");
+        return this;
+    }
+
+    /**
+     * Creates a Message instance from Parcel.
+     */
+    public VKApiMessage(Parcel in) {
+        this.id = in.readInt();
+        this.user_id = in.readInt();
+        this.date = in.readLong();
+        this.read_state = in.readByte() != 0;
+        this.out = in.readByte() != 0;
+        this.title = in.readString();
+        this.body = in.readString();
+        this.attachments = in.readParcelable(VKAttachments.class.getClassLoader());
+        this.fwd_messages = in.readParcelable(VKList.class.getClassLoader());
+        this.emoji = in.readByte() != 0;
+        this.deleted = in.readByte() != 0;
+    }
+
+    /**
+     * Creates empty Country instance.
+     */
+    public VKApiMessage() {
+
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(this.id);
+        dest.writeInt(this.user_id);
+        dest.writeLong(this.date);
+        dest.writeByte(read_state ? (byte) 1 : (byte) 0);
+        dest.writeByte(out ? (byte) 1 : (byte) 0);
+        dest.writeString(this.title);
+        dest.writeString(this.body);
+        dest.writeParcelable(attachments, flags);
+        dest.writeParcelable(this.fwd_messages, flags);
+        dest.writeByte(emoji ? (byte) 1 : (byte) 0);
+        dest.writeByte(deleted ? (byte) 1 : (byte) 0);
+    }
+
+    public static Creator<VKApiMessage> CREATOR = new Creator<VKApiMessage>() {
+        public VKApiMessage createFromParcel(Parcel source) {
+            return new VKApiMessage(source);
+        }
+
+        public VKApiMessage[] newArray(int size) {
+            return new VKApiMessage[size];
+        }
+    };
+}
Index: vksdk_library/src/main/java/com/vk/sdk/dialogs/VKShareDialogBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/dialogs/VKShareDialogBuilder.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/dialogs/VKShareDialogBuilder.java	(revision )
@@ -0,0 +1,142 @@
+//
+//  Copyright (c) 2015 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.dialogs;
+
+import android.annotation.TargetApi;
+import android.app.FragmentManager;
+import android.os.Build;
+
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.api.model.VKApiPhoto;
+import com.vk.sdk.api.model.VKPhotoArray;
+import com.vk.sdk.api.photo.VKUploadImage;
+
+/**
+ * Share dialog for making post directly to VK.
+ * Now it supports: attaching 1 named link, attaching photos with upload,
+ * attaching photos already uploaded to VK.
+ * Example usage:
+ * <pre>
+ * {@code VKPhotoArray photos = new VKPhotoArray();
+ * photos.add(new VKApiPhoto("photo-47200925_314622346"));
+ * new VKShareDialogBuilder()
+ * .setText("I created this post with VK Android SDK\nSee additional information below\n#vksdk")
+ * .setUploadedPhotos(photos)
+ * .setAttachmentImages(new VKUploadImage[]{
+ * new VKUploadImage(myBitmap, VKImageParameters.pngImage())
+ * })
+ * .setAttachmentLink("VK Android SDK information", "https://vk.com/dev/android_sdk")
+ * .setShareDialogListener(new VKShareDialog.VKShareDialogListener() {
+ * public void onVkShareComplete(int postId) {
+ *
+ * }
+ * public void onVkShareCancel() {
+ *
+ * }
+ * })
+ * .show(getFragmentManager(), "VK_SHARE_DIALOG");
+ * }
+ * </pre>
+ */
+public class VKShareDialogBuilder {
+
+	String linkTitle;
+	String linkUrl;
+	VKUploadImage[] attachmentImages;
+	VKPhotoArray existingPhotos;
+	CharSequence attachmentText;
+	VKShareDialogListener listener;
+
+	/**
+	 * Sets images that will be uploaded with post
+	 *
+	 * @param images array of VKUploadImage objects with image data and upload parameters
+	 * @return Returns this dialog for chaining
+	 */
+	public VKShareDialogBuilder setAttachmentImages(VKUploadImage[] images) {
+		this.attachmentImages = images;
+		return this;
+	}
+
+	/**
+	 * Sets this dialog post text. User can change that text
+	 *
+	 * @param textToPost Text for post
+	 * @return Returns this dialog for chaining
+	 */
+	public VKShareDialogBuilder setText(CharSequence textToPost) {
+		this.attachmentText = textToPost;
+		return this;
+	}
+
+	/**
+	 * Sets dialog link with link name
+	 *
+	 * @param linkTitle A small description for your link
+	 * @param linkUrl   Url that link follows
+	 * @return Returns this dialog for chaining
+	 */
+	public VKShareDialogBuilder setAttachmentLink(String linkTitle, String linkUrl) {
+		this.linkTitle = linkTitle;
+		this.linkUrl = linkUrl;
+		return this;
+	}
+
+	/**
+	 * Sets array of already uploaded photos from VK, that will be attached to post
+	 *
+	 * @param photos Prepared array of {@link VKApiPhoto} objects
+	 * @return Returns this dialog for chaining
+	 */
+	public VKShareDialogBuilder setUploadedPhotos(VKPhotoArray photos) {
+		this.existingPhotos = photos;
+		return this;
+	}
+
+	/**
+	 * Sets this dialog listener
+	 *
+	 * @param listener {@link VKShareDialogListener} object
+	 * @return Returns this dialog for chaining
+	 */
+	public VKShareDialogBuilder setShareDialogListener(VKShareDialogListener listener) {
+		this.listener = listener;
+		return this;
+	}
+
+	@TargetApi(Build.VERSION_CODES.HONEYCOMB)
+	public void show(FragmentManager manager, String tag) {
+		new VKShareDialogNative(this).show(manager, tag);
+	}
+
+	public void show(android.support.v4.app.FragmentManager manager, String tag) {
+		new VKShareDialog(this).show(manager, tag);
+	}
+
+	public interface VKShareDialogListener {
+		void onVkShareComplete(int postId);
+
+		void onVkShareCancel();
+
+		void onVkShareError(VKError error);
+	}
+}
\ No newline at end of file
Index: vksdk_library/src/main/res/layout-v17/vk_share_dialog.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/res/layout-v17/vk_share_dialog.xml	(revision )
+++ vksdk_library/src/main/res/layout-v17/vk_share_dialog.xml	(revision )
@@ -0,0 +1,185 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_centerInParent="true"
+    android:layout_gravity="center"
+    android:orientation="vertical"
+
+    tools:context="com.vk.sdk.dialogs.VKShareDialog">
+    <View
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+        android:focusable="true"
+        android:focusableInTouchMode="true" />
+
+    <RelativeLayout
+        android:id="@+id/topBarLayout"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/vk_share_top_panel_height"
+        android:background="@color/vk_share_top_blue_color">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_alignParentStart="true"
+            android:layout_toStartOf="@+id/sendButtonLayout">
+
+            <ImageView
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:layout_marginStart="@dimen/vk_share_top_image_margin"
+                android:scaleType="fitCenter"
+                android:src="@drawable/ic_ab_app"
+                android:contentDescription="@string/vk_name"/>
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_marginStart="@dimen/vk_share_top_title_margin"
+                android:gravity="center_vertical"
+                android:text="@string/vk_share"
+                android:textColor="@color/vk_white"
+                android:textSize="@dimen/vk_share_title_text_size" />
+        </LinearLayout>
+
+        <LinearLayout
+            android:id="@+id/sendButtonLayout"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentEnd="true">
+
+            <View
+                android:layout_width="1dp"
+                android:layout_height="match_parent"
+                android:layout_margin="@dimen/vk_share_top_line_margin"
+                android:background="#3fff" />
+
+            <ProgressBar
+                android:id="@+id/sendProgress"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:indeterminate="true"
+                android:visibility="gone" />
+
+            <Button
+                android:id="@+id/sendButton"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:background="@drawable/vk_share_send_button_background"
+                android:drawableStart="@drawable/ic_ab_done"
+                android:drawablePadding="3dp"
+                android:paddingStart="@dimen/vk_share_top_button_padding_left"
+                android:paddingEnd="@dimen/vk_share_top_button_padding_right"
+                android:text="@string/vk_send"
+                android:textAllCaps="true"
+                android:textColor="@color/vk_white"
+                android:textSize="@dimen/vk_share_send_text_size"
+                android:textStyle="bold" />
+        </LinearLayout>
+
+    </RelativeLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/topBarLayout"
+        android:orientation="vertical">
+
+        <ScrollView
+            android:layout_width="fill_parent"
+            android:layout_height="0dp"
+            android:layout_weight="1"
+            android:background="@color/vk_white"
+            android:fillViewport="true">
+
+            <LinearLayout
+                android:id="@+id/postContentLayout"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:paddingBottom="@dimen/vk_share_dialog_padding"
+                android:paddingLeft="@dimen/vk_share_dialog_padding"
+                android:paddingRight="@dimen/vk_share_dialog_padding"
+                android:paddingTop="@dimen/vk_share_dialog_padding_top">
+
+                <EditText
+                    android:id="@+id/shareText"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:background="@color/vk_clear"
+                    android:hint="@string/vk_new_message_text"
+                    android:inputType="textCapSentences|textMultiLine"
+                    android:textColor="@color/vk_black"
+                    android:textColorHint="@color/vk_share_link_color"
+                    android:textSize="@dimen/vk_share_title_text_size" />
+
+                <HorizontalScrollView
+                    android:id="@+id/imagesScrollView"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/vk_share_dialog_padding">
+
+                    <LinearLayout
+                        android:id="@+id/imagesContainer"
+                        android:layout_width="wrap_content"
+                        android:layout_height="match_parent"
+                        android:orientation="horizontal" />
+                </HorizontalScrollView>
+
+                <LinearLayout
+                    android:id="@+id/attachmentLinkLayout"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginBottom="@dimen/vk_share_link_top_margin"
+                    android:layout_marginTop="@dimen/vk_share_top_image_margin"
+                    android:orientation="vertical"
+                    android:visibility="gone">
+
+                    <TextView
+                        android:id="@+id/linkTitle"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:ellipsize="end"
+                        android:lines="1"
+                        android:textColor="@color/vk_share_link_title_color"
+                        android:textSize="@dimen/vk_share_title_link_title_size" />
+
+                    <TextView
+                        android:id="@+id/linkHost"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginTop="-1dp"
+                        android:ellipsize="end"
+                        android:lines="1"
+                        android:textColor="@color/vk_share_link_color"
+                        android:textSize="@dimen/vk_share_title_link_host_size" />
+                </LinearLayout>
+            </LinearLayout>
+        </ScrollView>
+
+        <LinearLayout
+            android:id="@+id/postSettingsLayout"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:minHeight="@dimen/vk_share_settings_button_min_height"
+            android:orientation="vertical"
+            android:visibility="gone">
+
+            <View
+                android:layout_width="match_parent"
+                android:layout_height="1dp"
+                android:layout_marginLeft="@dimen/vk_share_dialog_padding"
+                android:layout_marginRight="@dimen/vk_share_dialog_padding"
+                android:background="@color/vk_share_gray_line" />
+
+            <Button
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:background="@drawable/vk_share_send_button_background"
+                android:text="@string/vk_new_post_settings"
+                android:textColor="@color/vk_share_blue_color" />
+        </LinearLayout>
+    </LinearLayout>
+</RelativeLayout>
\ No newline at end of file
Index: vksdk_library/src/main/java/com/vk/sdk/VKCallback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/VKCallback.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/VKCallback.java	(revision )
@@ -0,0 +1,29 @@
+//
+//  Copyright (c) 2015 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk;
+
+import com.vk.sdk.api.VKError;
+
+public interface VKCallback<RESULT> {
+    void onResult(RESULT res);
+    void onError(VKError error);
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/photo/VKUploadPhotoBase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/photo/VKUploadPhotoBase.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/photo/VKUploadPhotoBase.java	(revision )
@@ -0,0 +1,60 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.photo;
+
+import com.vk.sdk.api.VKUploadBase;
+import com.vk.sdk.api.httpClient.VKHttpClient;
+import com.vk.sdk.api.httpClient.VKJsonOperation;
+
+import java.io.File;
+
+/**
+ * Provides common part of photo upload process
+ */
+public abstract class VKUploadPhotoBase extends VKUploadBase {
+	private static final long serialVersionUID = -4566961568409572159L;
+	/**
+     * ID of album to upload
+     */
+    protected long mAlbumId;
+    /**
+     * ID of group to upload
+     */
+    protected long mGroupId;
+    /**
+     * ID of user wall to upload
+     */
+    protected long mUserId;
+    /**
+     * Image to upload
+     */
+    protected File[] mImages;
+
+    public VKUploadPhotoBase() {
+        super();
+    }
+
+    @Override
+    protected VKJsonOperation getUploadOperation(String uploadUrl) {
+        return new VKJsonOperation(VKHttpClient.fileUploadRequest(uploadUrl, mImages));
+    }
+}
Index: app/src/main/res/drawable-v21/ic_menu_slideshow.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable-v21/ic_menu_slideshow.xml	(revision )
+++ app/src/main/res/drawable-v21/ic_menu_slideshow.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportHeight="24.0"
+    android:viewportWidth="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M4,6H2v14c0,1.1 0.9,2 2,2h14v-2H4V6zm16,-4H8c-1.1,0 -2,0.9 -2,2v12c0,1.1 0.9,2 2,2h12c1.1,0 2,-0.9 2,-2V4c0,-1.1 -0.9,-2 -2,-2zm-8,12.5v-9l6,4.5 -6,4.5z" />
+</vector>
Index: vksdk_library/src/main/java/com/vk/sdk/api/VKApi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/VKApi.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/VKApi.java	(revision )
@@ -0,0 +1,168 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api;
+
+import com.vk.sdk.api.methods.VKApiAudio;
+import com.vk.sdk.api.methods.VKApiDocs;
+import com.vk.sdk.api.methods.VKApiFriends;
+import com.vk.sdk.api.methods.VKApiGroups;
+import com.vk.sdk.api.methods.VKApiMessages;
+import com.vk.sdk.api.methods.VKApiPhotos;
+import com.vk.sdk.api.methods.VKApiUsers;
+import com.vk.sdk.api.methods.VKApiVideo;
+import com.vk.sdk.api.methods.VKApiWall;
+import com.vk.sdk.api.photo.VKUploadAlbumPhotoRequest;
+import com.vk.sdk.api.photo.VKUploadImage;
+import com.vk.sdk.api.photo.VKUploadMessagesPhotoRequest;
+import com.vk.sdk.api.photo.VKUploadWallPhotoRequest;
+
+import java.io.File;
+
+/**
+ Provides access for API parts.
+ */
+public class VKApi {
+    /**
+     * https://vk.com/dev/users
+     * Returns object for preparing requests to users part of API
+     */
+    public static VKApiUsers users() {
+        return new VKApiUsers();
+    }
+    /**
+     * https://vk.com/dev/users
+     * Returns object for preparing requests to users part of API
+     */
+    public static VKApiFriends friends() {
+        return new VKApiFriends();
+    }
+    /**
+     * https://vk.com/dev/messages
+     * Returns object for preparing requests to messages part of API
+     */
+    public static VKApiMessages messages() {
+        return new VKApiMessages();
+    }
+    /**
+     * https://vk.com/dev/wall
+     * Returns object for preparing requests to wall part of API
+     */
+    public static VKApiWall wall() {
+        return new VKApiWall();
+    }
+
+    /**
+     * https://vk.com/dev/photos
+     * Returns object for preparing requests to photos part of API
+     */
+    public static VKApiPhotos photos() {
+        return new VKApiPhotos();
+    }
+
+    /**
+     * https://vk.com/dev/docs
+     * Returns object for preparing requests to docs part of API
+     */
+    public static VKApiDocs docs() {
+        return new VKApiDocs();
+    }
+
+    /**
+     * https://vk.com/dev/audio
+     * Returns object for preparing requests to audio part of API
+     */
+    public static VKApiAudio audio() {
+        return new VKApiAudio();
+    }
+
+    /**
+     * https://vk.com/dev/groups
+     * Returns object for preparing requests to groups part of API
+     */
+    public static VKApiGroups groups() { return new VKApiGroups(); }
+    /**
+     * Upload a specified file to VK servers for posting on user or group wall
+     * @param image Image file to upload. Must have extension jpg or png
+     * @param userId User wall id or 0
+     * @param groupId Group id or 0
+     * @return Prepared vk request for photo upload
+     */
+    public static VKRequest uploadWallPhotoRequest(File image, long userId, int groupId) {
+        return new VKUploadWallPhotoRequest(image, userId, groupId);
+    }
+    /**
+     * Upload a specified file to VK servers for posting on user or group wall
+     * @param image Special image object to upload
+     * @param userId User wall id or 0
+     * @param groupId Group id or 0
+     * @return Prepared vk request for photo upload
+     */
+    public static VKRequest uploadWallPhotoRequest(VKUploadImage image, long userId, int groupId) {
+        return new VKUploadWallPhotoRequest(image, userId, groupId);
+    }
+
+    /**
+     * Upload a specified file to VK servers and saves it into the album
+     * @param image Image file to upload. Must have extension jpg or png
+     * @param albumId Album id to upload. Must be specified
+     * @param groupId Group id or 0
+     * @return Prepared vk request for photo upload
+     */
+    public static VKRequest uploadAlbumPhotoRequest(File image, long albumId, int groupId) {
+        return new VKUploadAlbumPhotoRequest(image, albumId, groupId);
+    }
+    /**
+     * Upload a specified file to VK servers and saves it into the album
+     * @param image Special image object to upload
+     * @param albumId Album id to upload. Must be specified
+     * @param groupId Group id or 0
+     * @return Prepared vk request for photo upload
+     */
+    public static VKRequest uploadAlbumPhotoRequest(VKUploadImage image, long albumId, int groupId) {
+        return new VKUploadAlbumPhotoRequest(image, albumId, groupId);
+    }
+	
+	/**
+     * Upload a specified file to VK servers for use as an attachment to a message
+     * @param image Image file to upload. Must have extension jpg or png
+     * @return Prepared vk request for photo upload
+     */
+	public static VKRequest uploadMessagesPhotoRequest(File image) {
+        return new VKUploadMessagesPhotoRequest(image);
+    }
+	/**
+     * Upload a specified file to VK servers for use as an attachment to a message
+     * @param image Special image object to upload
+     * @return Prepared vk request for photo upload
+     */
+    public static VKRequest uploadMessagesPhotoRequest(VKUploadImage image) {
+        return new VKUploadMessagesPhotoRequest(image);
+    }
+
+    /**
+     * https://vk.com/dev/video
+     * Returns object for preparing requests to audio part of API
+     */
+    public static VKApiVideo video() {
+        return new VKApiVideo();
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/VKUIHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/VKUIHelper.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/VKUIHelper.java	(revision )
@@ -0,0 +1,94 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffXfermode;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.support.annotation.Nullable;
+
+/**
+ * Class for VK authorization and dialogs helping
+ */
+public class VKUIHelper {
+    private static Context sApplicationContext;
+
+    /**
+     * A forced setting of an application context for the SDK.
+     * That method must be call in services of broadcast events for prepare the SDK for a work.
+     *
+     * @param appContext Context of application
+     */
+    static void setApplicationContext(Context appContext) {
+        if (appContext != null) {
+            sApplicationContext = appContext.getApplicationContext();
+        }
+    }
+
+    @Nullable
+    public static Context getApplicationContext() {
+        return sApplicationContext;
+    }
+
+    /**
+     * Creates a bitmap with rounded corners
+     *
+     * @param bitmap    source bitmap
+     * @param maxHeight maximal height for result bitmap
+     * @param pixels    corner radius
+     * @return a new bitmap if succeed, nil instead
+     */
+    public static Bitmap getRoundedCornerBitmap(Bitmap bitmap, int maxHeight, int pixels) {
+        if (bitmap == null || sApplicationContext == null) {
+            return bitmap;
+        }
+        maxHeight = (int) (sApplicationContext.getResources().getDisplayMetrics().density * maxHeight);
+        float scale = bitmap.getHeight() * 1.0f / maxHeight;
+        int newWidth = (int) (bitmap.getWidth() / scale);
+
+        Bitmap output = Bitmap.createBitmap(newWidth, maxHeight, Bitmap.Config.ARGB_8888);
+        Canvas canvas = new Canvas(output);
+
+        final int color = 0xffffffff;
+        final Paint paint = new Paint();
+        final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
+        final Rect dstRect = new Rect(0, 0, newWidth, maxHeight);
+        final RectF rectF = new RectF(dstRect);
+
+        paint.setAntiAlias(true);
+        canvas.drawARGB(0, 0, 0, 0);
+        paint.setColor(color);
+        canvas.drawRoundRect(rectF, (float) pixels, (float) pixels, paint);
+
+        paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
+        canvas.drawBitmap(bitmap, rect, dstRect, paint);
+
+        return output;
+    }
+
+
+}
Index: app/src/main/res/values/attrs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/attrs.xml	(revision )
+++ app/src/main/res/values/attrs.xml	(revision )
@@ -0,0 +1,12 @@
+<resources>
+
+    <!-- Declare custom theme attributes that allow changing which styles are
+         used for button bars depending on the API level.
+         ?android:attr/buttonBarStyle is new as of API 11 so this is
+         necessary to support previous API levels. -->
+    <declare-styleable name="ButtonBarContainerTheme">
+        <attr name="metaButtonBarStyle" format="reference" />
+        <attr name="metaButtonBarButtonStyle" format="reference" />
+    </declare-styleable>
+
+</resources>
Index: vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKModelOperation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKModelOperation.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/httpClient/VKModelOperation.java	(revision )
@@ -0,0 +1,78 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.httpClient;
+
+import com.vk.sdk.VKSdk;
+import com.vk.sdk.api.VKDefaultParser;
+import com.vk.sdk.api.VKParser;
+import com.vk.sdk.api.model.VKApiModel;
+
+import org.json.JSONObject;
+
+/**
+ * Operation based on json operation with object-model parsing possibility
+ */
+public class VKModelOperation extends VKJsonOperation {
+    protected final VKParser mParser;
+    public Object parsedModel;
+
+    /**
+     * Create new model operation
+     *
+     * @param uriRequest Prepared request
+     * @param modelClass Model for parsing response
+     */
+    public VKModelOperation(VKHttpClient.VKHTTPRequest uriRequest, Class<? extends VKApiModel> modelClass) {
+        super(uriRequest);
+        mParser = new VKDefaultParser(modelClass);
+    }
+
+    /**
+     * Create new model operation
+     *
+     * @param uriRequest Prepared request
+     * @param parser     Parser for create response
+     */
+    public VKModelOperation(VKHttpClient.VKHTTPRequest uriRequest, VKParser parser) {
+        super(uriRequest);
+        mParser = parser;
+    }
+
+    @Override
+    protected boolean postExecution() {
+        if (!super.postExecution())
+            return false;
+
+        if (mParser != null) {
+            try {
+                JSONObject response = getResponseJson();
+                parsedModel = mParser.createModel(response);
+                return true;
+            } catch (Exception e) {
+                if (VKSdk.DEBUG) {
+                    e.printStackTrace();
+                }
+            }
+        }
+        return false;
+    }
+}
\ No newline at end of file
Index: app/src/test/java/com/vkdocs/oceanminded/vkdocs/ExampleUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/vkdocs/oceanminded/vkdocs/ExampleUnitTest.java	(revision )
+++ app/src/test/java/com/vkdocs/oceanminded/vkdocs/ExampleUnitTest.java	(revision )
@@ -0,0 +1,15 @@
+package com.vkdocs.oceanminded.vkdocs;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * To work on unit tests, switch the Test Artifact in the Build Variants view.
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/OtherFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/OtherFragment.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/OtherFragment.java	(revision )
@@ -0,0 +1,109 @@
+package com.vkdocs.oceanminded.vkdocs.Fragments;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.VKResponse;
+import com.vk.sdk.api.model.VKApiDocument;
+import com.vk.sdk.api.model.VKDocsArray;
+import com.vkdocs.oceanminded.vkdocs.Adapters.RVAdapter;
+import com.vkdocs.oceanminded.vkdocs.R;
+import com.vkdocs.oceanminded.vkdocs.Services.VKDataService;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by josh on 23.01.16.
+ */
+public class OtherFragment extends Fragment {
+
+    private TextView notdosc;
+    private List<VKApiDocument> documentslist;
+    private RecyclerView documenstListRV;
+    private RVAdapter adapter;
+    public static int DOCS_PARAMETR = 8;
+    public static final String VKDOCS_LOADING = "Test";
+    public static final String ALARM_MESSAGE = "Срочно пришлите кота!";
+
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+
+        super.onCreate(savedInstanceState);
+
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.fragmenta,
+                container, false);
+        //doscList =(ListView) view.findViewById(R.id.docs_list);
+        notdosc =(TextView) view.findViewById(R.id.notdocs_text);
+        documenstListRV = (RecyclerView) view.findViewById(R.id.documents_recycleview);
+        LinearLayoutManager llm = new LinearLayoutManager(getContext());
+        documenstListRV.setLayoutManager(llm);
+        documenstListRV.setHasFixedSize(true);
+        documentslist = new ArrayList<>();
+        getDocumentFromServer();
+
+        return view;
+    }
+
+    public void updateData(){
+        Intent vkServiceIntent = new Intent(getActivity(),VKDataService.class);
+
+
+    }
+    public void getDocumentFromServer() {
+        List<VKApiDocument> docsList = new ArrayList<VKApiDocument>();
+        VKRequest getdocs = new VKRequest("docs.get", VKParameters.from("type", DOCS_PARAMETR), VKRequest.HttpMethod.GET, VKDocsArray.class);
+        getdocs.executeWithListener(new VKRequest.VKRequestListener() {
+            @Override
+            public void onProgress(VKRequest.VKProgressType progressType, long bytesLoaded, long bytesTotal) {
+                super.onProgress(progressType, bytesLoaded, bytesTotal);
+            }
+
+            @Override
+            public void onComplete(VKResponse response) {
+                super.onComplete(response);
+                VKDocsArray docsArray = (VKDocsArray) response.parsedModel;
+                for (VKApiDocument doc : docsArray) {
+                    documentslist.add(doc);
+                    //Log.i("json", response.json.toString());
+                }
+                adapter = new RVAdapter(documentslist);
+                documenstListRV.setAdapter(adapter);
+            }
+
+            @Override
+            public void attemptFailed(VKRequest request, int attemptNumber, int totalAttempts) {
+                super.attemptFailed(request, attemptNumber, totalAttempts);
+            }
+
+            @Override
+            public void onError(VKError error) {
+                super.onError(error);
+            }
+        });
+//        Log.i("list.size", "" + documentslist.size());
+    }
+
+
+    @Override
+    public void onAttach(Context context) {
+        super.onAttach(context);
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/api/model/VKUsersArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/api/model/VKUsersArray.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/api/model/VKUsersArray.java	(revision )
@@ -0,0 +1,33 @@
+//
+//  Copyright (c) 2014 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.api.model;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+public class VKUsersArray extends VKList<VKApiUserFull> {
+    @Override
+    public VKApiModel parse(JSONObject response) throws JSONException {
+        fill(response, VKApiUserFull.class);
+        return this;
+    }
+}
Index: vksdk_library/src/main/java/com/vk/sdk/payments/VKPaymentsDatabase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vksdk_library/src/main/java/com/vk/sdk/payments/VKPaymentsDatabase.java	(revision )
+++ vksdk_library/src/main/java/com/vk/sdk/payments/VKPaymentsDatabase.java	(revision )
@@ -0,0 +1,97 @@
+//
+//  Copyright (c) 2015 VK.com
+//
+//  Permission is hereby granted, free of charge, to any person obtaining a copy of
+//  this software and associated documentation files (the "Software"), to deal in
+//  the Software without restriction, including without limitation the rights to
+//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+//  the Software, and to permit persons to whom the Software is furnished to do so,
+//  subject to the following conditions:
+//
+//  The above copyright notice and this permission notice shall be included in all
+//  copies or substantial portions of the Software.
+//
+//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+package com.vk.sdk.payments;
+
+import android.content.ContentValues;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.support.annotation.NonNull;
+
+import java.util.HashSet;
+
+
+class VKPaymentsDatabase extends SQLiteOpenHelper {
+    private static int VERSION = 1;
+    public static final String DATABASE_NAME = "vk_sdk_db";
+
+    public static final String TABLE_PURCHASE_INFO = "vk_sdk_table_purchase_info";
+    public static final String TABLE_PURCHASE_INFO_PURCHASE = "purchase";
+    public static final String TABLE_PURCHASE_INFO_CREATE_SQL = "CREATE TABLE IF NOT EXISTS "
+            + TABLE_PURCHASE_INFO + " (" + TABLE_PURCHASE_INFO_PURCHASE + " TEXT);";
+
+    private static VKPaymentsDatabase sInstance;
+
+    // ---------- PURCHASE INFO ----------
+
+    public void insertPurchase(String purchase) {
+        SQLiteDatabase db = getWritableDatabase();
+        ContentValues values = new ContentValues();
+        values.put(TABLE_PURCHASE_INFO_PURCHASE, purchase);
+        db.insert(TABLE_PURCHASE_INFO, TABLE_PURCHASE_INFO_PURCHASE, values);
+    }
+
+    public void deletePurchase(String purchase) {
+        SQLiteDatabase db = getWritableDatabase();
+        db.delete(TABLE_PURCHASE_INFO, TABLE_PURCHASE_INFO_PURCHASE + "=?", new String[]{purchase});
+    }
+
+    public HashSet<String> getPurchases() {
+        SQLiteDatabase db = getReadableDatabase();
+        Cursor cursor = db.query(TABLE_PURCHASE_INFO, new String[]{TABLE_PURCHASE_INFO_PURCHASE}, null, null, null, null, null);
+        HashSet<String> set = new HashSet<>();
+        if (cursor.moveToFirst()) {
+            do {
+                set.add(cursor.getString(0));
+            } while (cursor.moveToNext());
+        }
+        cursor.close();
+        return set;
+    }
+
+    // ---------- SQLITE OPEN HELPER PART ----------
+
+    public static VKPaymentsDatabase getInstance(@NonNull Context context) {
+        if (sInstance == null) {
+            synchronized (VKPaymentsDatabase.class) {
+                if (sInstance == null) {
+                    sInstance = new VKPaymentsDatabase(context);
+                }
+            }
+        }
+        return sInstance;
+    }
+
+    private VKPaymentsDatabase(@NonNull Context context) {
+        super(context.getApplicationContext(), DATABASE_NAME, null, VERSION);
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase arg0) {
+        arg0.execSQL(TABLE_PURCHASE_INFO_CREATE_SQL);
+    }
+
+    @Override
+    public void onUpgrade(SQLiteDatabase arg0, int oldVersion, int newVersion) {
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/image.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/image.xml	(revision )
+++ app/src/main/res/layout/image.xml	(revision )
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context="com.vkdocs.oceanminded.vkdocs.Activitys.ImageActivity"
+    android:background="#000000"
+    style="@style/ImageTheme">
+
+    <ImageView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/image_content"
+        android:layout_centerVertical="true"
+        android:layout_centerHorizontal="true" />
+
+    <ProgressBar
+        style="?android:attr/progressBarStyleLarge"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/image_progresbar"
+        android:layout_above="@+id/image_content"
+        android:layout_centerVertical="true"
+        android:layout_centerHorizontal="true"
+        android:background="@drawable/progres_bar" />
+</RelativeLayout>
Index: app/src/main/res/layout/drawer_header.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/drawer_header.xml	(revision )
+++ app/src/main/res/layout/drawer_header.xml	(revision )
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="horizontal" android:layout_width="fill_parent"
+    android:layout_height="176dp"
+    android:background="@color/actionBarText">
+
+    <ImageView
+        android:layout_width="75dp"
+        android:layout_height="75dp"
+        android:id="@+id/user_avatar_imageview"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_marginLeft="16dp"
+        android:layout_marginTop="40dp" />
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="New Text"
+        android:id="@+id/user_name_textview"
+        android:textSize="14dp"
+        android:textColor="#ffffff"
+        android:layout_below="@+id/user_avatar_imageview"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_marginTop="16dp"
+        android:layout_marginLeft="16dp" />
+
+</RelativeLayout>
\ No newline at end of file
Index: app/src/main/res/layout/fragmenta.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragmenta.xml	(revision )
+++ app/src/main/res/layout/fragmenta.xml	(revision )
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="fill_parent"
+    android:layout_height="fill_parent">
+
+    <android.support.v7.widget.RecyclerView
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:id="@+id/documents_recycleview"
+        android:transitionGroup="false" />
+
+    <TextView
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:textAppearance="?android:attr/textAppearanceLarge"
+        android:text="Документы не найдены"
+        android:id="@+id/notdocs_text"
+        android:gravity="center_vertical|center_horizontal"
+        android:visibility="invisible" />
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/BooksFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/BooksFragment.java	(revision )
+++ app/src/main/java/com/vkdocs/oceanminded/vkdocs/Fragments/BooksFragment.java	(revision )
@@ -0,0 +1,110 @@
+package com.vkdocs.oceanminded.vkdocs.Fragments;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.vk.sdk.api.VKError;
+import com.vk.sdk.api.VKParameters;
+import com.vk.sdk.api.VKRequest;
+import com.vk.sdk.api.VKResponse;
+import com.vk.sdk.api.model.VKApiDocument;
+import com.vk.sdk.api.model.VKDocsArray;
+import com.vkdocs.oceanminded.vkdocs.Adapters.RVAdapter;
+import com.vkdocs.oceanminded.vkdocs.R;
+import com.vkdocs.oceanminded.vkdocs.Services.VKDataService;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by josh on 23.01.16.
+ */
+public class BooksFragment extends Fragment {
+
+    private TextView notdosc;
+    private List<VKApiDocument> documentslist;
+    private RecyclerView documenstListRV;
+    private RVAdapter adapter;
+    public static int DOCS_PARAMETR = 7;
+    public static final String VKDOCS_LOADING = "Test";
+    public static final String ALARM_MESSAGE = "Срочно пришлите кота!";
+
+
+
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+
+        super.onCreate(savedInstanceState);
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.fragmenta,
+                container, false);
+        //doscList =(ListView) view.findViewById(R.id.docs_list);
+        notdosc =(TextView) view.findViewById(R.id.notdocs_text);
+        documenstListRV = (RecyclerView) view.findViewById(R.id.documents_recycleview);
+        LinearLayoutManager llm = new LinearLayoutManager(getContext());
+        documenstListRV.setLayoutManager(llm);
+        documenstListRV.setHasFixedSize(true);
+        documentslist = new ArrayList<>();
+        getDocumentFromServer();
+
+        return view;
+    }
+
+    public void updateData(){
+        Intent vkServiceIntent = new Intent(getActivity(),VKDataService.class);
+
+
+    }
+    public void getDocumentFromServer() {
+        List<VKApiDocument> docsList = new ArrayList<VKApiDocument>();
+        VKRequest getdocs = new VKRequest("docs.get", VKParameters.from("type", DOCS_PARAMETR), VKRequest.HttpMethod.GET, VKDocsArray.class);
+        getdocs.executeWithListener(new VKRequest.VKRequestListener() {
+            @Override
+            public void onProgress(VKRequest.VKProgressType progressType, long bytesLoaded, long bytesTotal) {
+                super.onProgress(progressType, bytesLoaded, bytesTotal);
+            }
+
+            @Override
+            public void onComplete(VKResponse response) {
+                super.onComplete(response);
+                VKDocsArray docsArray = (VKDocsArray) response.parsedModel;
+                for (VKApiDocument doc : docsArray) {
+                    documentslist.add(doc);
+                    //Log.i("json", response.json.toString());
+                }
+                adapter = new RVAdapter(documentslist);
+                documenstListRV.setAdapter(adapter);
+            }
+
+            @Override
+            public void attemptFailed(VKRequest request, int attemptNumber, int totalAttempts) {
+                super.attemptFailed(request, attemptNumber, totalAttempts);
+            }
+
+            @Override
+            public void onError(VKError error) {
+                super.onError(error);
+            }
+        });
+//        Log.i("list.size", "" + documentslist.size());
+    }
+
+
+    @Override
+    public void onAttach(Context context) {
+        super.onAttach(context);
+    }
+}
